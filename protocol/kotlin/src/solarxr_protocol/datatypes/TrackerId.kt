// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.datatypes

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class TrackerId : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TrackerId {
        __init(_i, _bb)
        return this
    }
    /**
     * The device the tracker is associated with. If there is no hardware device it is
     * associated with, this should be `null`.
     */
    val deviceId : solarxr_protocol.datatypes.DeviceId? get() = deviceId(solarxr_protocol.datatypes.DeviceId())
    fun deviceId(obj: solarxr_protocol.datatypes.DeviceId) : solarxr_protocol.datatypes.DeviceId? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    /**
     * There are possibly multiple trackers per device. This identifies which one.
     */
    val trackerNum : UByte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsTrackerId(_bb: ByteBuffer): TrackerId = getRootAsTrackerId(_bb, TrackerId())
        @JvmStatic
        fun getRootAsTrackerId(_bb: ByteBuffer, obj: TrackerId): TrackerId {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun startTrackerId(builder: FlatBufferBuilder) = builder.startTable(2)
        @JvmStatic
        fun addDeviceId(builder: FlatBufferBuilder, deviceId: Int) = builder.addStruct(0, deviceId, 0)
        @JvmStatic
        fun addTrackerNum(builder: FlatBufferBuilder, trackerNum: UByte) = builder.addByte(1, trackerNum.toByte(), 0)
        @JvmStatic
        fun endTrackerId(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
