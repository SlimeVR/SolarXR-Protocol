// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.datatypes

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * General purpose logging datatype
 */
@Suppress("unused")
class LogData : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LogData {
        __init(_i, _bb)
        return this
    }
    val message : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val messageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun messageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    fun data(j: Int) : UByte {
        val o = __offset(6)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val dataLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val dataAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun dataInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsLogData(_bb: ByteBuffer): LogData = getRootAsLogData(_bb, LogData())
        @JvmStatic
        fun getRootAsLogData(_bb: ByteBuffer, obj: LogData): LogData {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createLogData(builder: FlatBufferBuilder, messageOffset: Int, dataOffset: Int) : Int {
            builder.startTable(2)
            addData(builder, dataOffset)
            addMessage(builder, messageOffset)
            return endLogData(builder)
        }
        @JvmStatic
        fun startLogData(builder: FlatBufferBuilder) = builder.startTable(2)
        @JvmStatic
        fun addMessage(builder: FlatBufferBuilder, message: Int) = builder.addOffset(0, message, 0)
        @JvmStatic
        fun addData(builder: FlatBufferBuilder, data: Int) = builder.addOffset(1, data, 0)
        @JvmStatic
        fun createDataVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        @JvmStatic
        fun endLogData(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
