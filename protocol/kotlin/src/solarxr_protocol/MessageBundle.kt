// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * MessageBundle contains all of the messages for the data feed system and the
 * rpc system that will be sent in one buffer.
 */
@Suppress("unused")
class MessageBundle : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MessageBundle {
        __init(_i, _bb)
        return this
    }
    fun dataFeedMsgs(j: Int) : solarxr_protocol.data_feed.DataFeedMessageHeader? = dataFeedMsgs(solarxr_protocol.data_feed.DataFeedMessageHeader(), j)
    fun dataFeedMsgs(obj: solarxr_protocol.data_feed.DataFeedMessageHeader, j: Int) : solarxr_protocol.data_feed.DataFeedMessageHeader? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val dataFeedMsgsLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    fun rpcMsgs(j: Int) : solarxr_protocol.rpc.RpcMessageHeader? = rpcMsgs(solarxr_protocol.rpc.RpcMessageHeader(), j)
    fun rpcMsgs(obj: solarxr_protocol.rpc.RpcMessageHeader, j: Int) : solarxr_protocol.rpc.RpcMessageHeader? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val rpcMsgsLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    fun pubSubMsgs(j: Int) : solarxr_protocol.pub_sub.PubSubHeader? = pubSubMsgs(solarxr_protocol.pub_sub.PubSubHeader(), j)
    fun pubSubMsgs(obj: solarxr_protocol.pub_sub.PubSubHeader, j: Int) : solarxr_protocol.pub_sub.PubSubHeader? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val pubSubMsgsLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsMessageBundle(_bb: ByteBuffer): MessageBundle = getRootAsMessageBundle(_bb, MessageBundle())
        @JvmStatic
        fun getRootAsMessageBundle(_bb: ByteBuffer, obj: MessageBundle): MessageBundle {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createMessageBundle(builder: FlatBufferBuilder, dataFeedMsgsOffset: Int, rpcMsgsOffset: Int, pubSubMsgsOffset: Int) : Int {
            builder.startTable(3)
            addPubSubMsgs(builder, pubSubMsgsOffset)
            addRpcMsgs(builder, rpcMsgsOffset)
            addDataFeedMsgs(builder, dataFeedMsgsOffset)
            return endMessageBundle(builder)
        }
        @JvmStatic
        fun startMessageBundle(builder: FlatBufferBuilder) = builder.startTable(3)
        @JvmStatic
        fun addDataFeedMsgs(builder: FlatBufferBuilder, dataFeedMsgs: Int) = builder.addOffset(0, dataFeedMsgs, 0)
        @JvmStatic
        fun createDataFeedMsgsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startDataFeedMsgsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun addRpcMsgs(builder: FlatBufferBuilder, rpcMsgs: Int) = builder.addOffset(1, rpcMsgs, 0)
        @JvmStatic
        fun createRpcMsgsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startRpcMsgsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun addPubSubMsgs(builder: FlatBufferBuilder, pubSubMsgs: Int) = builder.addOffset(2, pubSubMsgs, 0)
        @JvmStatic
        fun createPubSubMsgsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startPubSubMsgsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun endMessageBundle(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
