// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.data_feed

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Requests for a single `Update` to be sent. This is helpful when getting
 * initial info about the device.
 */
@Suppress("unused")
class PollDataFeed : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PollDataFeed {
        __init(_i, _bb)
        return this
    }
    val config : solarxr_protocol.data_feed.DataFeedConfig? get() = config(solarxr_protocol.data_feed.DataFeedConfig())
    fun config(obj: solarxr_protocol.data_feed.DataFeedConfig) : solarxr_protocol.data_feed.DataFeedConfig? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsPollDataFeed(_bb: ByteBuffer): PollDataFeed = getRootAsPollDataFeed(_bb, PollDataFeed())
        @JvmStatic
        fun getRootAsPollDataFeed(_bb: ByteBuffer, obj: PollDataFeed): PollDataFeed {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createPollDataFeed(builder: FlatBufferBuilder, configOffset: Int) : Int {
            builder.startTable(1)
            addConfig(builder, configOffset)
            return endPollDataFeed(builder)
        }
        @JvmStatic
        fun startPollDataFeed(builder: FlatBufferBuilder) = builder.startTable(1)
        @JvmStatic
        fun addConfig(builder: FlatBufferBuilder, config: Int) = builder.addOffset(0, config, 0)
        @JvmStatic
        fun endPollDataFeed(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
