// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.data_feed

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class Bone : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Bone {
        __init(_i, _bb)
        return this
    }
    val bodyPart : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    /**
     * The global rotation of the bone.
     *
     * Note that the identity rotation is where a bone's tail is towards -y (assuming
     * the head of the bone is the origin)
     */
    val rotationG : solarxr_protocol.datatypes.math.Quat? get() = rotationG(solarxr_protocol.datatypes.math.Quat())
    fun rotationG(obj: solarxr_protocol.datatypes.math.Quat) : solarxr_protocol.datatypes.math.Quat? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val boneLength : Float
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * The global position of the head of this bone.
     *
     * The head of a bone is joint/node of the bone touching the parent bone. The
     * parent is defined as the bone closer to the HMD.
     */
    val headPositionG : solarxr_protocol.datatypes.math.Vec3f? get() = headPositionG(solarxr_protocol.datatypes.math.Vec3f())
    fun headPositionG(obj: solarxr_protocol.datatypes.math.Vec3f) : solarxr_protocol.datatypes.math.Vec3f? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsBone(_bb: ByteBuffer): Bone = getRootAsBone(_bb, Bone())
        @JvmStatic
        fun getRootAsBone(_bb: ByteBuffer, obj: Bone): Bone {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun startBone(builder: FlatBufferBuilder) = builder.startTable(4)
        @JvmStatic
        fun addBodyPart(builder: FlatBufferBuilder, bodyPart: UByte) = builder.addByte(0, bodyPart.toByte(), 0)
        @JvmStatic
        fun addRotationG(builder: FlatBufferBuilder, rotationG: Int) = builder.addStruct(1, rotationG, 0)
        @JvmStatic
        fun addBoneLength(builder: FlatBufferBuilder, boneLength: Float) = builder.addFloat(2, boneLength, 0.0)
        @JvmStatic
        fun addHeadPositionG(builder: FlatBufferBuilder, headPositionG: Int) = builder.addStruct(3, headPositionG, 0)
        @JvmStatic
        fun endBone(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
