// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.data_feed

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class DataFeedMessageHeader : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataFeedMessageHeader {
        __init(_i, _bb)
        return this
    }
    val messageType : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun message(obj: Table) : Table? {
        val o = __offset(6); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsDataFeedMessageHeader(_bb: ByteBuffer): DataFeedMessageHeader = getRootAsDataFeedMessageHeader(_bb, DataFeedMessageHeader())
        @JvmStatic
        fun getRootAsDataFeedMessageHeader(_bb: ByteBuffer, obj: DataFeedMessageHeader): DataFeedMessageHeader {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createDataFeedMessageHeader(builder: FlatBufferBuilder, messageType: UByte, messageOffset: Int) : Int {
            builder.startTable(2)
            addMessage(builder, messageOffset)
            addMessageType(builder, messageType)
            return endDataFeedMessageHeader(builder)
        }
        @JvmStatic
        fun startDataFeedMessageHeader(builder: FlatBufferBuilder) = builder.startTable(2)
        @JvmStatic
        fun addMessageType(builder: FlatBufferBuilder, messageType: UByte) = builder.addByte(0, messageType.toByte(), 0)
        @JvmStatic
        fun addMessage(builder: FlatBufferBuilder, message: Int) = builder.addOffset(1, message, 0)
        @JvmStatic
        fun endDataFeedMessageHeader(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
