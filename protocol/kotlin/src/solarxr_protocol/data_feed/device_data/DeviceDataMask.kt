// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.data_feed.device_data

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * A mask of values to be reported in subsequent DeviceStatus. Values set to `false`
 * or `null` will not reported. By default, all fields are false/null.
 *
 * If you set a value to `true`, it is not guaranteed that the sender actually has
 * such a value to send. In this case, they will probably send `null`, and the receiver
 * has the choice to disconnect due to missing data.
 */
@Suppress("unused")
class DeviceDataMask : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DeviceDataMask {
        __init(_i, _bb)
        return this
    }
    /**
     * Which tracker data should be sent in this data feed
     */
    val trackerData : solarxr_protocol.data_feed.tracker.TrackerDataMask? get() = trackerData(solarxr_protocol.data_feed.tracker.TrackerDataMask())
    fun trackerData(obj: solarxr_protocol.data_feed.tracker.TrackerDataMask) : solarxr_protocol.data_feed.tracker.TrackerDataMask? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * true if device data should be sent in this data feed
     */
    val deviceData : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsDeviceDataMask(_bb: ByteBuffer): DeviceDataMask = getRootAsDeviceDataMask(_bb, DeviceDataMask())
        @JvmStatic
        fun getRootAsDeviceDataMask(_bb: ByteBuffer, obj: DeviceDataMask): DeviceDataMask {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createDeviceDataMask(builder: FlatBufferBuilder, trackerDataOffset: Int, deviceData: Boolean) : Int {
            builder.startTable(2)
            addTrackerData(builder, trackerDataOffset)
            addDeviceData(builder, deviceData)
            return endDeviceDataMask(builder)
        }
        @JvmStatic
        fun startDeviceDataMask(builder: FlatBufferBuilder) = builder.startTable(2)
        @JvmStatic
        fun addTrackerData(builder: FlatBufferBuilder, trackerData: Int) = builder.addOffset(0, trackerData, 0)
        @JvmStatic
        fun addDeviceData(builder: FlatBufferBuilder, deviceData: Boolean) = builder.addBoolean(1, deviceData, false)
        @JvmStatic
        fun endDeviceDataMask(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
