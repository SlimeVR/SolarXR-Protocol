// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.data_feed.tracker

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * A mask of the different components in `TrackerComponent`
 */
@Suppress("unused")
class TrackerDataMask : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TrackerDataMask {
        __init(_i, _bb)
        return this
    }
    val info : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val status : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val rotation : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val position : Boolean
        get() {
            val o = __offset(10)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val rawAngularVelocity : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val rawAcceleration : Boolean
        get() {
            val o = __offset(14)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val temp : Boolean
        get() {
            val o = __offset(16)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val linearAcceleration : Boolean
        get() {
            val o = __offset(18)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val rotationReferenceAdjusted : Boolean
        get() {
            val o = __offset(20)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val rotationIdentityAdjusted : Boolean
        get() {
            val o = __offset(22)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val tps : Boolean
        get() {
            val o = __offset(24)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsTrackerDataMask(_bb: ByteBuffer): TrackerDataMask = getRootAsTrackerDataMask(_bb, TrackerDataMask())
        @JvmStatic
        fun getRootAsTrackerDataMask(_bb: ByteBuffer, obj: TrackerDataMask): TrackerDataMask {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createTrackerDataMask(builder: FlatBufferBuilder, info: Boolean, status: Boolean, rotation: Boolean, position: Boolean, rawAngularVelocity: Boolean, rawAcceleration: Boolean, temp: Boolean, linearAcceleration: Boolean, rotationReferenceAdjusted: Boolean, rotationIdentityAdjusted: Boolean, tps: Boolean) : Int {
            builder.startTable(11)
            addTps(builder, tps)
            addRotationIdentityAdjusted(builder, rotationIdentityAdjusted)
            addRotationReferenceAdjusted(builder, rotationReferenceAdjusted)
            addLinearAcceleration(builder, linearAcceleration)
            addTemp(builder, temp)
            addRawAcceleration(builder, rawAcceleration)
            addRawAngularVelocity(builder, rawAngularVelocity)
            addPosition(builder, position)
            addRotation(builder, rotation)
            addStatus(builder, status)
            addInfo(builder, info)
            return endTrackerDataMask(builder)
        }
        @JvmStatic
        fun startTrackerDataMask(builder: FlatBufferBuilder) = builder.startTable(11)
        @JvmStatic
        fun addInfo(builder: FlatBufferBuilder, info: Boolean) = builder.addBoolean(0, info, false)
        @JvmStatic
        fun addStatus(builder: FlatBufferBuilder, status: Boolean) = builder.addBoolean(1, status, false)
        @JvmStatic
        fun addRotation(builder: FlatBufferBuilder, rotation: Boolean) = builder.addBoolean(2, rotation, false)
        @JvmStatic
        fun addPosition(builder: FlatBufferBuilder, position: Boolean) = builder.addBoolean(3, position, false)
        @JvmStatic
        fun addRawAngularVelocity(builder: FlatBufferBuilder, rawAngularVelocity: Boolean) = builder.addBoolean(4, rawAngularVelocity, false)
        @JvmStatic
        fun addRawAcceleration(builder: FlatBufferBuilder, rawAcceleration: Boolean) = builder.addBoolean(5, rawAcceleration, false)
        @JvmStatic
        fun addTemp(builder: FlatBufferBuilder, temp: Boolean) = builder.addBoolean(6, temp, false)
        @JvmStatic
        fun addLinearAcceleration(builder: FlatBufferBuilder, linearAcceleration: Boolean) = builder.addBoolean(7, linearAcceleration, false)
        @JvmStatic
        fun addRotationReferenceAdjusted(builder: FlatBufferBuilder, rotationReferenceAdjusted: Boolean) = builder.addBoolean(8, rotationReferenceAdjusted, false)
        @JvmStatic
        fun addRotationIdentityAdjusted(builder: FlatBufferBuilder, rotationIdentityAdjusted: Boolean) = builder.addBoolean(9, rotationIdentityAdjusted, false)
        @JvmStatic
        fun addTps(builder: FlatBufferBuilder, tps: Boolean) = builder.addBoolean(10, tps, false)
        @JvmStatic
        fun endTrackerDataMask(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
