// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.data_feed

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Requests for the other party to send `data_feeds`.
 * For example, GUI requests for position data to be sent from server.
 *
 * When sending a new `StartFeed`, the old data feeds should stop being sent.
 * We still support multiple data feeds at the same time, because `data_feeds`
 * is a list.
 *
 * Multiple data feeds are useful to get data at different frequencies.
 */
@Suppress("unused")
class StartDataFeed : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : StartDataFeed {
        __init(_i, _bb)
        return this
    }
    fun dataFeeds(j: Int) : solarxr_protocol.data_feed.DataFeedConfig? = dataFeeds(solarxr_protocol.data_feed.DataFeedConfig(), j)
    fun dataFeeds(obj: solarxr_protocol.data_feed.DataFeedConfig, j: Int) : solarxr_protocol.data_feed.DataFeedConfig? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val dataFeedsLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsStartDataFeed(_bb: ByteBuffer): StartDataFeed = getRootAsStartDataFeed(_bb, StartDataFeed())
        @JvmStatic
        fun getRootAsStartDataFeed(_bb: ByteBuffer, obj: StartDataFeed): StartDataFeed {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createStartDataFeed(builder: FlatBufferBuilder, dataFeedsOffset: Int) : Int {
            builder.startTable(1)
            addDataFeeds(builder, dataFeedsOffset)
            return endStartDataFeed(builder)
        }
        @JvmStatic
        fun startStartDataFeed(builder: FlatBufferBuilder) = builder.startTable(1)
        @JvmStatic
        fun addDataFeeds(builder: FlatBufferBuilder, dataFeeds: Int) = builder.addOffset(0, dataFeeds, 0)
        @JvmStatic
        fun createDataFeedsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startDataFeedsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun endStartDataFeed(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
