// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc.settings

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Settings for the skeletal model that are ratios.
 * These values range from 0 to 1.
 */
@Suppress("unused")
class ModelRatios : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ModelRatios {
        __init(_i, _bb)
        return this
    }
    val imputeWaistFromChestHip : Float?
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getFloat(o + bb_pos) else null
        }
    val imputeWaistFromChestLegs : Float?
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getFloat(o + bb_pos) else null
        }
    val imputeHipFromChestLegs : Float?
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getFloat(o + bb_pos) else null
        }
    val imputeHipFromWaistLegs : Float?
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getFloat(o + bb_pos) else null
        }
    /**
     * Hip's yaw and roll is set to the average of legs when 1.0
     */
    val interpHipLegs : Float?
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getFloat(o + bb_pos) else null
        }
    /**
     * Knee trackers' yaw and roll is set to the lower leg's when 1.0
     */
    val interpKneeTrackerAnkle : Float?
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getFloat(o + bb_pos) else null
        }
    /**
     * Upper leg's yaw and roll is set to the lower leg's when 1.0
     */
    val interpKneeAnkle : Float?
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getFloat(o + bb_pos) else null
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsModelRatios(_bb: ByteBuffer): ModelRatios = getRootAsModelRatios(_bb, ModelRatios())
        @JvmStatic
        fun getRootAsModelRatios(_bb: ByteBuffer, obj: ModelRatios): ModelRatios {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createModelRatios(builder: FlatBufferBuilder, imputeWaistFromChestHip: Float?, imputeWaistFromChestLegs: Float?, imputeHipFromChestLegs: Float?, imputeHipFromWaistLegs: Float?, interpHipLegs: Float?, interpKneeTrackerAnkle: Float?, interpKneeAnkle: Float?) : Int {
            builder.startTable(7)
            interpKneeAnkle?.run { addInterpKneeAnkle(builder, interpKneeAnkle) }
            interpKneeTrackerAnkle?.run { addInterpKneeTrackerAnkle(builder, interpKneeTrackerAnkle) }
            interpHipLegs?.run { addInterpHipLegs(builder, interpHipLegs) }
            imputeHipFromWaistLegs?.run { addImputeHipFromWaistLegs(builder, imputeHipFromWaistLegs) }
            imputeHipFromChestLegs?.run { addImputeHipFromChestLegs(builder, imputeHipFromChestLegs) }
            imputeWaistFromChestLegs?.run { addImputeWaistFromChestLegs(builder, imputeWaistFromChestLegs) }
            imputeWaistFromChestHip?.run { addImputeWaistFromChestHip(builder, imputeWaistFromChestHip) }
            return endModelRatios(builder)
        }
        @JvmStatic
        fun startModelRatios(builder: FlatBufferBuilder) = builder.startTable(7)
        @JvmStatic
        fun addImputeWaistFromChestHip(builder: FlatBufferBuilder, imputeWaistFromChestHip: Float) = builder.addFloat(0, imputeWaistFromChestHip, 0.0)
        @JvmStatic
        fun addImputeWaistFromChestLegs(builder: FlatBufferBuilder, imputeWaistFromChestLegs: Float) = builder.addFloat(1, imputeWaistFromChestLegs, 0.0)
        @JvmStatic
        fun addImputeHipFromChestLegs(builder: FlatBufferBuilder, imputeHipFromChestLegs: Float) = builder.addFloat(2, imputeHipFromChestLegs, 0.0)
        @JvmStatic
        fun addImputeHipFromWaistLegs(builder: FlatBufferBuilder, imputeHipFromWaistLegs: Float) = builder.addFloat(3, imputeHipFromWaistLegs, 0.0)
        @JvmStatic
        fun addInterpHipLegs(builder: FlatBufferBuilder, interpHipLegs: Float) = builder.addFloat(4, interpHipLegs, 0.0)
        @JvmStatic
        fun addInterpKneeTrackerAnkle(builder: FlatBufferBuilder, interpKneeTrackerAnkle: Float) = builder.addFloat(5, interpKneeTrackerAnkle, 0.0)
        @JvmStatic
        fun addInterpKneeAnkle(builder: FlatBufferBuilder, interpKneeAnkle: Float) = builder.addFloat(6, interpKneeAnkle, 0.0)
        @JvmStatic
        fun endModelRatios(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
