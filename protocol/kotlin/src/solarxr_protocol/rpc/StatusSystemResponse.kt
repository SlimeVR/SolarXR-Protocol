// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Response containing all current valid statuses
 */
@Suppress("unused")
class StatusSystemResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : StatusSystemResponse {
        __init(_i, _bb)
        return this
    }
    fun currentStatuses(j: Int) : solarxr_protocol.rpc.StatusMessage? = currentStatuses(solarxr_protocol.rpc.StatusMessage(), j)
    fun currentStatuses(obj: solarxr_protocol.rpc.StatusMessage, j: Int) : solarxr_protocol.rpc.StatusMessage? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val currentStatusesLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsStatusSystemResponse(_bb: ByteBuffer): StatusSystemResponse = getRootAsStatusSystemResponse(_bb, StatusSystemResponse())
        @JvmStatic
        fun getRootAsStatusSystemResponse(_bb: ByteBuffer, obj: StatusSystemResponse): StatusSystemResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createStatusSystemResponse(builder: FlatBufferBuilder, currentStatusesOffset: Int) : Int {
            builder.startTable(1)
            addCurrentStatuses(builder, currentStatusesOffset)
            return endStatusSystemResponse(builder)
        }
        @JvmStatic
        fun startStatusSystemResponse(builder: FlatBufferBuilder) = builder.startTable(1)
        @JvmStatic
        fun addCurrentStatuses(builder: FlatBufferBuilder, currentStatuses: Int) = builder.addOffset(0, currentStatuses, 0)
        @JvmStatic
        fun createCurrentStatusesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startCurrentStatusesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun endStatusSystemResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
