// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class FilteringSettings : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FilteringSettings {
        __init(_i, _bb)
        return this
    }
    val type : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    /**
     * 0 to 1. A higher value results in more smoothing or prediction
     */
    val amount : Float
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsFilteringSettings(_bb: ByteBuffer): FilteringSettings = getRootAsFilteringSettings(_bb, FilteringSettings())
        @JvmStatic
        fun getRootAsFilteringSettings(_bb: ByteBuffer, obj: FilteringSettings): FilteringSettings {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createFilteringSettings(builder: FlatBufferBuilder, type: UByte, amount: Float) : Int {
            builder.startTable(2)
            addAmount(builder, amount)
            addType(builder, type)
            return endFilteringSettings(builder)
        }
        @JvmStatic
        fun startFilteringSettings(builder: FlatBufferBuilder) = builder.startTable(2)
        @JvmStatic
        fun addType(builder: FlatBufferBuilder, type: UByte) = builder.addByte(0, type.toByte(), 0)
        @JvmStatic
        fun addAmount(builder: FlatBufferBuilder, amount: Float) = builder.addFloat(1, amount, 0.0)
        @JvmStatic
        fun endFilteringSettings(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
