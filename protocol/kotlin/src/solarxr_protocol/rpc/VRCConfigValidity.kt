// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class VRCConfigValidity : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : VRCConfigValidity {
        __init(_i, _bb)
        return this
    }
    val legacyModeOk : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val shoulderTrackingOk : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val userHeightOk : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val calibrationRangeOk : Boolean
        get() {
            val o = __offset(10)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val calibrationVisualsOk : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val trackerModelOk : Boolean
        get() {
            val o = __offset(14)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val spineModeOk : Boolean
        get() {
            val o = __offset(16)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsVRCConfigValidity(_bb: ByteBuffer): VRCConfigValidity = getRootAsVRCConfigValidity(_bb, VRCConfigValidity())
        @JvmStatic
        fun getRootAsVRCConfigValidity(_bb: ByteBuffer, obj: VRCConfigValidity): VRCConfigValidity {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createVRCConfigValidity(builder: FlatBufferBuilder, legacyModeOk: Boolean, shoulderTrackingOk: Boolean, userHeightOk: Boolean, calibrationRangeOk: Boolean, calibrationVisualsOk: Boolean, trackerModelOk: Boolean, spineModeOk: Boolean) : Int {
            builder.startTable(7)
            addSpineModeOk(builder, spineModeOk)
            addTrackerModelOk(builder, trackerModelOk)
            addCalibrationVisualsOk(builder, calibrationVisualsOk)
            addCalibrationRangeOk(builder, calibrationRangeOk)
            addUserHeightOk(builder, userHeightOk)
            addShoulderTrackingOk(builder, shoulderTrackingOk)
            addLegacyModeOk(builder, legacyModeOk)
            return endVRCConfigValidity(builder)
        }
        @JvmStatic
        fun startVRCConfigValidity(builder: FlatBufferBuilder) = builder.startTable(7)
        @JvmStatic
        fun addLegacyModeOk(builder: FlatBufferBuilder, legacyModeOk: Boolean) = builder.addBoolean(0, legacyModeOk, false)
        @JvmStatic
        fun addShoulderTrackingOk(builder: FlatBufferBuilder, shoulderTrackingOk: Boolean) = builder.addBoolean(1, shoulderTrackingOk, false)
        @JvmStatic
        fun addUserHeightOk(builder: FlatBufferBuilder, userHeightOk: Boolean) = builder.addBoolean(2, userHeightOk, false)
        @JvmStatic
        fun addCalibrationRangeOk(builder: FlatBufferBuilder, calibrationRangeOk: Boolean) = builder.addBoolean(3, calibrationRangeOk, false)
        @JvmStatic
        fun addCalibrationVisualsOk(builder: FlatBufferBuilder, calibrationVisualsOk: Boolean) = builder.addBoolean(4, calibrationVisualsOk, false)
        @JvmStatic
        fun addTrackerModelOk(builder: FlatBufferBuilder, trackerModelOk: Boolean) = builder.addBoolean(5, trackerModelOk, false)
        @JvmStatic
        fun addSpineModeOk(builder: FlatBufferBuilder, spineModeOk: Boolean) = builder.addBoolean(6, spineModeOk, false)
        @JvmStatic
        fun endVRCConfigValidity(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
