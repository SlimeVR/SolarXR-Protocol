// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * OSC Settings specific to VRChat
 */
@Suppress("unused")
class VRCOSCSettings : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : VRCOSCSettings {
        __init(_i, _bb)
        return this
    }
    val oscSettings : solarxr_protocol.rpc.OSCSettings? get() = oscSettings(solarxr_protocol.rpc.OSCSettings())
    fun oscSettings(obj: solarxr_protocol.rpc.OSCSettings) : solarxr_protocol.rpc.OSCSettings? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val trackers : solarxr_protocol.rpc.OSCTrackersSetting? get() = trackers(solarxr_protocol.rpc.OSCTrackersSetting())
    fun trackers(obj: solarxr_protocol.rpc.OSCTrackersSetting) : solarxr_protocol.rpc.OSCTrackersSetting? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsVRCOSCSettings(_bb: ByteBuffer): VRCOSCSettings = getRootAsVRCOSCSettings(_bb, VRCOSCSettings())
        @JvmStatic
        fun getRootAsVRCOSCSettings(_bb: ByteBuffer, obj: VRCOSCSettings): VRCOSCSettings {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createVRCOSCSettings(builder: FlatBufferBuilder, oscSettingsOffset: Int, trackersOffset: Int) : Int {
            builder.startTable(2)
            addTrackers(builder, trackersOffset)
            addOscSettings(builder, oscSettingsOffset)
            return endVRCOSCSettings(builder)
        }
        @JvmStatic
        fun startVRCOSCSettings(builder: FlatBufferBuilder) = builder.startTable(2)
        @JvmStatic
        fun addOscSettings(builder: FlatBufferBuilder, oscSettings: Int) = builder.addOffset(0, oscSettings, 0)
        @JvmStatic
        fun addTrackers(builder: FlatBufferBuilder, trackers: Int) = builder.addOffset(1, trackers, 0)
        @JvmStatic
        fun endVRCOSCSettings(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
