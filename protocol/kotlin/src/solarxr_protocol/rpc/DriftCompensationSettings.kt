// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Settings related to IMU yaw drift compensation
 */
@Suppress("unused")
class DriftCompensationSettings : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DriftCompensationSettings {
        __init(_i, _bb)
        return this
    }
    val enabled : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val prediction : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * 0 to 1. A higher value results in more yaw drift compensation
     */
    val amount : Float
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getFloat(o + bb_pos) else 0.0f
        }
    /**
     * Number of previous resets to take into account when calculating yaw drift
     */
    val maxResets : UShort
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsDriftCompensationSettings(_bb: ByteBuffer): DriftCompensationSettings = getRootAsDriftCompensationSettings(_bb, DriftCompensationSettings())
        @JvmStatic
        fun getRootAsDriftCompensationSettings(_bb: ByteBuffer, obj: DriftCompensationSettings): DriftCompensationSettings {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createDriftCompensationSettings(builder: FlatBufferBuilder, enabled: Boolean, prediction: Boolean, amount: Float, maxResets: UShort) : Int {
            builder.startTable(4)
            addAmount(builder, amount)
            addMaxResets(builder, maxResets)
            addPrediction(builder, prediction)
            addEnabled(builder, enabled)
            return endDriftCompensationSettings(builder)
        }
        @JvmStatic
        fun startDriftCompensationSettings(builder: FlatBufferBuilder) = builder.startTable(4)
        @JvmStatic
        fun addEnabled(builder: FlatBufferBuilder, enabled: Boolean) = builder.addBoolean(0, enabled, false)
        @JvmStatic
        fun addPrediction(builder: FlatBufferBuilder, prediction: Boolean) = builder.addBoolean(1, prediction, false)
        @JvmStatic
        fun addAmount(builder: FlatBufferBuilder, amount: Float) = builder.addFloat(2, amount, 0.0)
        @JvmStatic
        fun addMaxResets(builder: FlatBufferBuilder, maxResets: UShort) = builder.addShort(3, maxResets.toShort(), 0)
        @JvmStatic
        fun endDriftCompensationSettings(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
