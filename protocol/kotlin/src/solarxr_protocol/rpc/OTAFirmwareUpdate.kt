// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class OTAFirmwareUpdate : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OTAFirmwareUpdate {
        __init(_i, _bb)
        return this
    }
    /**
     * id of the device, this refer to the actual DeviceId from the protocol
     */
    val deviceId : solarxr_protocol.datatypes.DeviceId? get() = deviceId(solarxr_protocol.datatypes.DeviceId())
    fun deviceId(obj: solarxr_protocol.datatypes.DeviceId) : solarxr_protocol.datatypes.DeviceId? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    /**
     * A table containing the url and offset of the firmware bin file
     */
    val firmwarePart : solarxr_protocol.rpc.FirmwarePart? get() = firmwarePart(solarxr_protocol.rpc.FirmwarePart())
    fun firmwarePart(obj: solarxr_protocol.rpc.FirmwarePart) : solarxr_protocol.rpc.FirmwarePart? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsOTAFirmwareUpdate(_bb: ByteBuffer): OTAFirmwareUpdate = getRootAsOTAFirmwareUpdate(_bb, OTAFirmwareUpdate())
        @JvmStatic
        fun getRootAsOTAFirmwareUpdate(_bb: ByteBuffer, obj: OTAFirmwareUpdate): OTAFirmwareUpdate {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun startOTAFirmwareUpdate(builder: FlatBufferBuilder) = builder.startTable(2)
        @JvmStatic
        fun addDeviceId(builder: FlatBufferBuilder, deviceId: Int) = builder.addStruct(0, deviceId, 0)
        @JvmStatic
        fun addFirmwarePart(builder: FlatBufferBuilder, firmwarePart: Int) = builder.addOffset(1, firmwarePart, 0)
        @JvmStatic
        fun endOTAFirmwareUpdate(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
