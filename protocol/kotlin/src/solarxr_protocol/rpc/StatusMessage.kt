// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * An status is some kind of warning sent by the server, it's mainly made for
 * showing problems with the server and need attention from the user.
 */
@Suppress("unused")
class StatusMessage : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : StatusMessage {
        __init(_i, _bb)
        return this
    }
    /**
     * The status ID
     */
    val id : UInt
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    /**
     * This should be prioritized in the GUI in some way if true
     */
    val prioritized : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val dataType : UByte
        get() {
            val o = __offset(8)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun data(obj: Table) : Table? {
        val o = __offset(10); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsStatusMessage(_bb: ByteBuffer): StatusMessage = getRootAsStatusMessage(_bb, StatusMessage())
        @JvmStatic
        fun getRootAsStatusMessage(_bb: ByteBuffer, obj: StatusMessage): StatusMessage {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createStatusMessage(builder: FlatBufferBuilder, id: UInt, prioritized: Boolean, dataType: UByte, dataOffset: Int) : Int {
            builder.startTable(4)
            addData(builder, dataOffset)
            addId(builder, id)
            addDataType(builder, dataType)
            addPrioritized(builder, prioritized)
            return endStatusMessage(builder)
        }
        @JvmStatic
        fun startStatusMessage(builder: FlatBufferBuilder) = builder.startTable(4)
        @JvmStatic
        fun addId(builder: FlatBufferBuilder, id: UInt) = builder.addInt(0, id.toInt(), 0)
        @JvmStatic
        fun addPrioritized(builder: FlatBufferBuilder, prioritized: Boolean) = builder.addBoolean(1, prioritized, false)
        @JvmStatic
        fun addDataType(builder: FlatBufferBuilder, dataType: UByte) = builder.addByte(2, dataType.toByte(), 0)
        @JvmStatic
        fun addData(builder: FlatBufferBuilder, data: Int) = builder.addOffset(3, data, 0)
        @JvmStatic
        fun endStatusMessage(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
