// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * update the corresponding step from its id
 */
@Suppress("unused")
class FlighListChangeResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FlighListChangeResponse {
        __init(_i, _bb)
        return this
    }
    val step : solarxr_protocol.rpc.FlightListStep? get() = step(solarxr_protocol.rpc.FlightListStep())
    fun step(obj: solarxr_protocol.rpc.FlightListStep) : solarxr_protocol.rpc.FlightListStep? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsFlighListChangeResponse(_bb: ByteBuffer): FlighListChangeResponse = getRootAsFlighListChangeResponse(_bb, FlighListChangeResponse())
        @JvmStatic
        fun getRootAsFlighListChangeResponse(_bb: ByteBuffer, obj: FlighListChangeResponse): FlighListChangeResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createFlighListChangeResponse(builder: FlatBufferBuilder, stepOffset: Int) : Int {
            builder.startTable(1)
            addStep(builder, stepOffset)
            return endFlighListChangeResponse(builder)
        }
        @JvmStatic
        fun startFlighListChangeResponse(builder: FlatBufferBuilder) = builder.startTable(1)
        @JvmStatic
        fun addStep(builder: FlatBufferBuilder, step: Int) = builder.addOffset(0, step, 0)
        @JvmStatic
        fun endFlighListChangeResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
