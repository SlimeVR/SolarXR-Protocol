// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * OSC Settings that are used in *any* osc application.
 */
@Suppress("unused")
class OSCSettings : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OSCSettings {
        __init(_i, _bb)
        return this
    }
    val enabled : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val portIn : UShort
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val portOut : UShort
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val address : String?
        get() {
            val o = __offset(10)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val addressAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun addressInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsOSCSettings(_bb: ByteBuffer): OSCSettings = getRootAsOSCSettings(_bb, OSCSettings())
        @JvmStatic
        fun getRootAsOSCSettings(_bb: ByteBuffer, obj: OSCSettings): OSCSettings {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createOSCSettings(builder: FlatBufferBuilder, enabled: Boolean, portIn: UShort, portOut: UShort, addressOffset: Int) : Int {
            builder.startTable(4)
            addAddress(builder, addressOffset)
            addPortOut(builder, portOut)
            addPortIn(builder, portIn)
            addEnabled(builder, enabled)
            return endOSCSettings(builder)
        }
        @JvmStatic
        fun startOSCSettings(builder: FlatBufferBuilder) = builder.startTable(4)
        @JvmStatic
        fun addEnabled(builder: FlatBufferBuilder, enabled: Boolean) = builder.addBoolean(0, enabled, false)
        @JvmStatic
        fun addPortIn(builder: FlatBufferBuilder, portIn: UShort) = builder.addShort(1, portIn.toShort(), 0)
        @JvmStatic
        fun addPortOut(builder: FlatBufferBuilder, portOut: UShort) = builder.addShort(2, portOut.toShort(), 0)
        @JvmStatic
        fun addAddress(builder: FlatBufferBuilder, address: Int) = builder.addOffset(3, address, 0)
        @JvmStatic
        fun endOSCSettings(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
