// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class RpcMessageHeader : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RpcMessageHeader {
        __init(_i, _bb)
        return this
    }
    /**
     * For a request, this identifies the request. For a response, this corresponds
     * to the request that it is responding to.
     */
    val txId : solarxr_protocol.datatypes.TransactionId? get() = txId(solarxr_protocol.datatypes.TransactionId())
    fun txId(obj: solarxr_protocol.datatypes.TransactionId) : solarxr_protocol.datatypes.TransactionId? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val messageType : UByte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun message(obj: Table) : Table? {
        val o = __offset(8); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsRpcMessageHeader(_bb: ByteBuffer): RpcMessageHeader = getRootAsRpcMessageHeader(_bb, RpcMessageHeader())
        @JvmStatic
        fun getRootAsRpcMessageHeader(_bb: ByteBuffer, obj: RpcMessageHeader): RpcMessageHeader {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun startRpcMessageHeader(builder: FlatBufferBuilder) = builder.startTable(3)
        @JvmStatic
        fun addTxId(builder: FlatBufferBuilder, txId: Int) = builder.addStruct(0, txId, 0)
        @JvmStatic
        fun addMessageType(builder: FlatBufferBuilder, messageType: UByte) = builder.addByte(1, messageType.toByte(), 0)
        @JvmStatic
        fun addMessage(builder: FlatBufferBuilder, message: Int) = builder.addOffset(2, message, 0)
        @JvmStatic
        fun endRpcMessageHeader(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
