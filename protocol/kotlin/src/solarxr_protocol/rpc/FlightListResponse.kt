// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class FlightListResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FlightListResponse {
        __init(_i, _bb)
        return this
    }
    fun steps(j: Int) : solarxr_protocol.rpc.FlightListStep? = steps(solarxr_protocol.rpc.FlightListStep(), j)
    fun steps(obj: solarxr_protocol.rpc.FlightListStep, j: Int) : solarxr_protocol.rpc.FlightListStep? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val stepsLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    fun ignoredSteps(j: Int) : UByte {
        val o = __offset(6)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val ignoredStepsLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val ignoredStepsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun ignoredStepsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsFlightListResponse(_bb: ByteBuffer): FlightListResponse = getRootAsFlightListResponse(_bb, FlightListResponse())
        @JvmStatic
        fun getRootAsFlightListResponse(_bb: ByteBuffer, obj: FlightListResponse): FlightListResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createFlightListResponse(builder: FlatBufferBuilder, stepsOffset: Int, ignoredStepsOffset: Int) : Int {
            builder.startTable(2)
            addIgnoredSteps(builder, ignoredStepsOffset)
            addSteps(builder, stepsOffset)
            return endFlightListResponse(builder)
        }
        @JvmStatic
        fun startFlightListResponse(builder: FlatBufferBuilder) = builder.startTable(2)
        @JvmStatic
        fun addSteps(builder: FlatBufferBuilder, steps: Int) = builder.addOffset(0, steps, 0)
        @JvmStatic
        fun createStepsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startStepsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun addIgnoredSteps(builder: FlatBufferBuilder, ignoredSteps: Int) = builder.addOffset(1, ignoredSteps, 0)
        @JvmStatic
        fun createIgnoredStepsVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startIgnoredStepsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        @JvmStatic
        fun endFlightListResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
