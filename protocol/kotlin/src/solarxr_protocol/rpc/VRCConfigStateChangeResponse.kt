// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Sent every time the vrchat config state gets updated
 * used to display vrchat missconfig settings to the user
 */
@Suppress("unused")
class VRCConfigStateChangeResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : VRCConfigStateChangeResponse {
        __init(_i, _bb)
        return this
    }
    val isSupported : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val validity : solarxr_protocol.rpc.VRCConfigValidity? get() = validity(solarxr_protocol.rpc.VRCConfigValidity())
    fun validity(obj: solarxr_protocol.rpc.VRCConfigValidity) : solarxr_protocol.rpc.VRCConfigValidity? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val state : solarxr_protocol.rpc.VRCConfigValues? get() = state(solarxr_protocol.rpc.VRCConfigValues())
    fun state(obj: solarxr_protocol.rpc.VRCConfigValues) : solarxr_protocol.rpc.VRCConfigValues? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val recommended : solarxr_protocol.rpc.VRCConfigRecommendedValues? get() = recommended(solarxr_protocol.rpc.VRCConfigRecommendedValues())
    fun recommended(obj: solarxr_protocol.rpc.VRCConfigRecommendedValues) : solarxr_protocol.rpc.VRCConfigRecommendedValues? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    fun muted(j: Int) : String? {
        val o = __offset(12)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val mutedLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsVRCConfigStateChangeResponse(_bb: ByteBuffer): VRCConfigStateChangeResponse = getRootAsVRCConfigStateChangeResponse(_bb, VRCConfigStateChangeResponse())
        @JvmStatic
        fun getRootAsVRCConfigStateChangeResponse(_bb: ByteBuffer, obj: VRCConfigStateChangeResponse): VRCConfigStateChangeResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createVRCConfigStateChangeResponse(builder: FlatBufferBuilder, isSupported: Boolean, validityOffset: Int, stateOffset: Int, recommendedOffset: Int, mutedOffset: Int) : Int {
            builder.startTable(5)
            addMuted(builder, mutedOffset)
            addRecommended(builder, recommendedOffset)
            addState(builder, stateOffset)
            addValidity(builder, validityOffset)
            addIsSupported(builder, isSupported)
            return endVRCConfigStateChangeResponse(builder)
        }
        @JvmStatic
        fun startVRCConfigStateChangeResponse(builder: FlatBufferBuilder) = builder.startTable(5)
        @JvmStatic
        fun addIsSupported(builder: FlatBufferBuilder, isSupported: Boolean) = builder.addBoolean(0, isSupported, false)
        @JvmStatic
        fun addValidity(builder: FlatBufferBuilder, validity: Int) = builder.addOffset(1, validity, 0)
        @JvmStatic
        fun addState(builder: FlatBufferBuilder, state: Int) = builder.addOffset(2, state, 0)
        @JvmStatic
        fun addRecommended(builder: FlatBufferBuilder, recommended: Int) = builder.addOffset(3, recommended, 0)
        @JvmStatic
        fun addMuted(builder: FlatBufferBuilder, muted: Int) = builder.addOffset(4, muted, 0)
        @JvmStatic
        fun createMutedVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startMutedVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun endVRCConfigStateChangeResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
