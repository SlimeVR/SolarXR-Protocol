// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * OSC Settings specific to VMC
 */
@Suppress("unused")
class VMCOSCSettings : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : VMCOSCSettings {
        __init(_i, _bb)
        return this
    }
    val oscSettings : solarxr_protocol.rpc.OSCSettings? get() = oscSettings(solarxr_protocol.rpc.OSCSettings())
    fun oscSettings(obj: solarxr_protocol.rpc.OSCSettings) : solarxr_protocol.rpc.OSCSettings? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val vrmJson : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val vrmJsonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun vrmJsonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val anchorHip : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val mirrorTracking : Boolean
        get() {
            val o = __offset(10)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsVMCOSCSettings(_bb: ByteBuffer): VMCOSCSettings = getRootAsVMCOSCSettings(_bb, VMCOSCSettings())
        @JvmStatic
        fun getRootAsVMCOSCSettings(_bb: ByteBuffer, obj: VMCOSCSettings): VMCOSCSettings {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createVMCOSCSettings(builder: FlatBufferBuilder, oscSettingsOffset: Int, vrmJsonOffset: Int, anchorHip: Boolean, mirrorTracking: Boolean) : Int {
            builder.startTable(4)
            addVrmJson(builder, vrmJsonOffset)
            addOscSettings(builder, oscSettingsOffset)
            addMirrorTracking(builder, mirrorTracking)
            addAnchorHip(builder, anchorHip)
            return endVMCOSCSettings(builder)
        }
        @JvmStatic
        fun startVMCOSCSettings(builder: FlatBufferBuilder) = builder.startTable(4)
        @JvmStatic
        fun addOscSettings(builder: FlatBufferBuilder, oscSettings: Int) = builder.addOffset(0, oscSettings, 0)
        @JvmStatic
        fun addVrmJson(builder: FlatBufferBuilder, vrmJson: Int) = builder.addOffset(1, vrmJson, 0)
        @JvmStatic
        fun addAnchorHip(builder: FlatBufferBuilder, anchorHip: Boolean) = builder.addBoolean(2, anchorHip, false)
        @JvmStatic
        fun addMirrorTracking(builder: FlatBufferBuilder, mirrorTracking: Boolean) = builder.addBoolean(3, mirrorTracking, false)
        @JvmStatic
        fun endVMCOSCSettings(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
