// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Multiple trackers are assigned to the same body part
 */
@Suppress("unused")
class StatusDoublyAssignedBody : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : StatusDoublyAssignedBody {
        __init(_i, _bb)
        return this
    }
    fun trackerIds(j: Int) : solarxr_protocol.datatypes.TrackerId? = trackerIds(solarxr_protocol.datatypes.TrackerId(), j)
    fun trackerIds(obj: solarxr_protocol.datatypes.TrackerId, j: Int) : solarxr_protocol.datatypes.TrackerId? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val trackerIdsLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsStatusDoublyAssignedBody(_bb: ByteBuffer): StatusDoublyAssignedBody = getRootAsStatusDoublyAssignedBody(_bb, StatusDoublyAssignedBody())
        @JvmStatic
        fun getRootAsStatusDoublyAssignedBody(_bb: ByteBuffer, obj: StatusDoublyAssignedBody): StatusDoublyAssignedBody {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createStatusDoublyAssignedBody(builder: FlatBufferBuilder, trackerIdsOffset: Int) : Int {
            builder.startTable(1)
            addTrackerIds(builder, trackerIdsOffset)
            return endStatusDoublyAssignedBody(builder)
        }
        @JvmStatic
        fun startStatusDoublyAssignedBody(builder: FlatBufferBuilder) = builder.startTable(1)
        @JvmStatic
        fun addTrackerIds(builder: FlatBufferBuilder, trackerIds: Int) = builder.addOffset(0, trackerIds, 0)
        @JvmStatic
        fun createTrackerIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startTrackerIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        @JvmStatic
        fun endStatusDoublyAssignedBody(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
