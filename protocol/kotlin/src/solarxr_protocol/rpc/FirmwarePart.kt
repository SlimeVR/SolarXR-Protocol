// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class FirmwarePart : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FirmwarePart {
        __init(_i, _bb)
        return this
    }
    /**
     * Url of the firmware bin to download
     */
    val url : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val urlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun urlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Offset of the firmware, used when flashing to the mcu, it indicates where to write this file in memory
     * Will be ignored in the case of OTA flashing
     */
    val offset : UInt
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsFirmwarePart(_bb: ByteBuffer): FirmwarePart = getRootAsFirmwarePart(_bb, FirmwarePart())
        @JvmStatic
        fun getRootAsFirmwarePart(_bb: ByteBuffer, obj: FirmwarePart): FirmwarePart {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createFirmwarePart(builder: FlatBufferBuilder, urlOffset: Int, offset: UInt) : Int {
            builder.startTable(2)
            addOffset(builder, offset)
            addUrl(builder, urlOffset)
            return endFirmwarePart(builder)
        }
        @JvmStatic
        fun startFirmwarePart(builder: FlatBufferBuilder) = builder.startTable(2)
        @JvmStatic
        fun addUrl(builder: FlatBufferBuilder, url: Int) = builder.addOffset(0, url, 0)
        @JvmStatic
        fun addOffset(builder: FlatBufferBuilder, offset: UInt) = builder.addInt(1, offset.toInt(), 0)
        @JvmStatic
        fun endFirmwarePart(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
