// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.pub_sub

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * A `TopicId` identifies an application-specific category of data. Because it
 * is application-specific, it is up to the application within the specified
 * organization to define its semantics/meaning.
 *
 * For example, "bob" may have an "overlay" app with a "settings" topic for controlling
 * the overlay visibility and other settings, as well as a "video feed" topic for
 * allowing other applications to display video data in a wrist mounted window in VR.
 */
@Suppress("unused")
class TopicId : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TopicId {
        __init(_i, _bb)
        return this
    }
    /**
     * The organization/developer that defines the meaning of this feature. Avoids name
     * clashes. Should be something unique - same idea as java package identifier.
     */
    val organization : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val organizationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun organizationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The name of the application/device. Should be unique within the organization.
     */
    val appName : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val appNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun appNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The name of the topic. Should be unique within the application.
     */
    val topic : String?
        get() {
            val o = __offset(8)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val topicAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun topicInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsTopicId(_bb: ByteBuffer): TopicId = getRootAsTopicId(_bb, TopicId())
        @JvmStatic
        fun getRootAsTopicId(_bb: ByteBuffer, obj: TopicId): TopicId {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createTopicId(builder: FlatBufferBuilder, organizationOffset: Int, appNameOffset: Int, topicOffset: Int) : Int {
            builder.startTable(3)
            addTopic(builder, topicOffset)
            addAppName(builder, appNameOffset)
            addOrganization(builder, organizationOffset)
            return endTopicId(builder)
        }
        @JvmStatic
        fun startTopicId(builder: FlatBufferBuilder) = builder.startTable(3)
        @JvmStatic
        fun addOrganization(builder: FlatBufferBuilder, organization: Int) = builder.addOffset(0, organization, 0)
        @JvmStatic
        fun addAppName(builder: FlatBufferBuilder, appName: Int) = builder.addOffset(1, appName, 0)
        @JvmStatic
        fun addTopic(builder: FlatBufferBuilder, topic: Int) = builder.addOffset(2, topic, 0)
        @JvmStatic
        fun endTopicId(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
