// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.pub_sub

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Request to get the `FeatureHandle` from a `FeatureId`. This is useful for reducing
 * bandwidth, since `FeatureId` can be large.
 */
@Suppress("unused")
class TopicHandleRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TopicHandleRequest {
        __init(_i, _bb)
        return this
    }
    val id : solarxr_protocol.pub_sub.TopicId? get() = id(solarxr_protocol.pub_sub.TopicId())
    fun id(obj: solarxr_protocol.pub_sub.TopicId) : solarxr_protocol.pub_sub.TopicId? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsTopicHandleRequest(_bb: ByteBuffer): TopicHandleRequest = getRootAsTopicHandleRequest(_bb, TopicHandleRequest())
        @JvmStatic
        fun getRootAsTopicHandleRequest(_bb: ByteBuffer, obj: TopicHandleRequest): TopicHandleRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createTopicHandleRequest(builder: FlatBufferBuilder, idOffset: Int) : Int {
            builder.startTable(1)
            addId(builder, idOffset)
            return endTopicHandleRequest(builder)
        }
        @JvmStatic
        fun startTopicHandleRequest(builder: FlatBufferBuilder) = builder.startTable(1)
        @JvmStatic
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        @JvmStatic
        fun endTopicHandleRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
