// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.pub_sub

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class PubSubHeader : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PubSubHeader {
        __init(_i, _bb)
        return this
    }
    val uType : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun u(obj: Table) : Table? {
        val o = __offset(6); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsPubSubHeader(_bb: ByteBuffer): PubSubHeader = getRootAsPubSubHeader(_bb, PubSubHeader())
        @JvmStatic
        fun getRootAsPubSubHeader(_bb: ByteBuffer, obj: PubSubHeader): PubSubHeader {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createPubSubHeader(builder: FlatBufferBuilder, uType: UByte, uOffset: Int) : Int {
            builder.startTable(2)
            addU(builder, uOffset)
            addUType(builder, uType)
            return endPubSubHeader(builder)
        }
        @JvmStatic
        fun startPubSubHeader(builder: FlatBufferBuilder) = builder.startTable(2)
        @JvmStatic
        fun addUType(builder: FlatBufferBuilder, uType: UByte) = builder.addByte(0, uType.toByte(), 0)
        @JvmStatic
        fun addU(builder: FlatBufferBuilder, u: Int) = builder.addOffset(1, u, 0)
        @JvmStatic
        fun endPubSubHeader(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
