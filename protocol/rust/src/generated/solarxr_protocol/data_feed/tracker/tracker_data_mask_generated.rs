// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TrackerDataMaskOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A mask of the different components in `TrackerComponent`
pub struct TrackerDataMask<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TrackerDataMask<'a> {
  type Inner = TrackerDataMask<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> TrackerDataMask<'a> {
  pub const VT_INFO: flatbuffers::VOffsetT = 4;
  pub const VT_STATUS: flatbuffers::VOffsetT = 6;
  pub const VT_ROTATION: flatbuffers::VOffsetT = 8;
  pub const VT_POSITION: flatbuffers::VOffsetT = 10;
  pub const VT_RAW_ROT_VEL: flatbuffers::VOffsetT = 12;
  pub const VT_RAW_TRANS_ACCEL: flatbuffers::VOffsetT = 14;
  pub const VT_TEMP: flatbuffers::VOffsetT = 16;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TrackerDataMask { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TrackerDataMaskArgs
  ) -> flatbuffers::WIPOffset<TrackerDataMask<'bldr>> {
    let mut builder = TrackerDataMaskBuilder::new(_fbb);
    builder.add_temp(args.temp);
    builder.add_raw_trans_accel(args.raw_trans_accel);
    builder.add_raw_rot_vel(args.raw_rot_vel);
    builder.add_position(args.position);
    builder.add_rotation(args.rotation);
    builder.add_status(args.status);
    builder.add_info(args.info);
    builder.finish()
  }


  #[inline]
  pub fn info(&self) -> bool {
    self._tab.get::<bool>(TrackerDataMask::VT_INFO, Some(false)).unwrap()
  }
  #[inline]
  pub fn status(&self) -> bool {
    self._tab.get::<bool>(TrackerDataMask::VT_STATUS, Some(false)).unwrap()
  }
  #[inline]
  pub fn rotation(&self) -> bool {
    self._tab.get::<bool>(TrackerDataMask::VT_ROTATION, Some(false)).unwrap()
  }
  #[inline]
  pub fn position(&self) -> bool {
    self._tab.get::<bool>(TrackerDataMask::VT_POSITION, Some(false)).unwrap()
  }
  #[inline]
  pub fn raw_rot_vel(&self) -> bool {
    self._tab.get::<bool>(TrackerDataMask::VT_RAW_ROT_VEL, Some(false)).unwrap()
  }
  #[inline]
  pub fn raw_trans_accel(&self) -> bool {
    self._tab.get::<bool>(TrackerDataMask::VT_RAW_TRANS_ACCEL, Some(false)).unwrap()
  }
  #[inline]
  pub fn temp(&self) -> bool {
    self._tab.get::<bool>(TrackerDataMask::VT_TEMP, Some(false)).unwrap()
  }
}

impl flatbuffers::Verifiable for TrackerDataMask<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("info", Self::VT_INFO, false)?
     .visit_field::<bool>("status", Self::VT_STATUS, false)?
     .visit_field::<bool>("rotation", Self::VT_ROTATION, false)?
     .visit_field::<bool>("position", Self::VT_POSITION, false)?
     .visit_field::<bool>("raw_rot_vel", Self::VT_RAW_ROT_VEL, false)?
     .visit_field::<bool>("raw_trans_accel", Self::VT_RAW_TRANS_ACCEL, false)?
     .visit_field::<bool>("temp", Self::VT_TEMP, false)?
     .finish();
    Ok(())
  }
}
pub struct TrackerDataMaskArgs {
    pub info: bool,
    pub status: bool,
    pub rotation: bool,
    pub position: bool,
    pub raw_rot_vel: bool,
    pub raw_trans_accel: bool,
    pub temp: bool,
}
impl<'a> Default for TrackerDataMaskArgs {
  #[inline]
  fn default() -> Self {
    TrackerDataMaskArgs {
      info: false,
      status: false,
      rotation: false,
      position: false,
      raw_rot_vel: false,
      raw_trans_accel: false,
      temp: false,
    }
  }
}

pub struct TrackerDataMaskBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TrackerDataMaskBuilder<'a, 'b> {
  #[inline]
  pub fn add_info(&mut self, info: bool) {
    self.fbb_.push_slot::<bool>(TrackerDataMask::VT_INFO, info, false);
  }
  #[inline]
  pub fn add_status(&mut self, status: bool) {
    self.fbb_.push_slot::<bool>(TrackerDataMask::VT_STATUS, status, false);
  }
  #[inline]
  pub fn add_rotation(&mut self, rotation: bool) {
    self.fbb_.push_slot::<bool>(TrackerDataMask::VT_ROTATION, rotation, false);
  }
  #[inline]
  pub fn add_position(&mut self, position: bool) {
    self.fbb_.push_slot::<bool>(TrackerDataMask::VT_POSITION, position, false);
  }
  #[inline]
  pub fn add_raw_rot_vel(&mut self, raw_rot_vel: bool) {
    self.fbb_.push_slot::<bool>(TrackerDataMask::VT_RAW_ROT_VEL, raw_rot_vel, false);
  }
  #[inline]
  pub fn add_raw_trans_accel(&mut self, raw_trans_accel: bool) {
    self.fbb_.push_slot::<bool>(TrackerDataMask::VT_RAW_TRANS_ACCEL, raw_trans_accel, false);
  }
  #[inline]
  pub fn add_temp(&mut self, temp: bool) {
    self.fbb_.push_slot::<bool>(TrackerDataMask::VT_TEMP, temp, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TrackerDataMaskBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TrackerDataMaskBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TrackerDataMask<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TrackerDataMask<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TrackerDataMask");
      ds.field("info", &self.info());
      ds.field("status", &self.status());
      ds.field("rotation", &self.rotation());
      ds.field("position", &self.position());
      ds.field("raw_rot_vel", &self.raw_rot_vel());
      ds.field("raw_trans_accel", &self.raw_trans_accel());
      ds.field("temp", &self.temp());
      ds.finish()
  }
}
