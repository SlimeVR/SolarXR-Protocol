// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BoneOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Bone<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Bone<'a> {
  type Inner = Bone<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Bone<'a> {
  pub const VT_BODY_PART: flatbuffers::VOffsetT = 4;
  pub const VT_ROTATION_G: flatbuffers::VOffsetT = 6;
  pub const VT_BONE_LENGTH: flatbuffers::VOffsetT = 8;
  pub const VT_HEAD_POSITION_G: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Bone { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args BoneArgs<'args>
  ) -> flatbuffers::WIPOffset<Bone<'bldr>> {
    let mut builder = BoneBuilder::new(_fbb);
    if let Some(x) = args.head_position_g { builder.add_head_position_g(x); }
    builder.add_bone_length(args.bone_length);
    if let Some(x) = args.rotation_g { builder.add_rotation_g(x); }
    builder.add_body_part(args.body_part);
    builder.finish()
  }


  #[inline]
  pub fn body_part(&self) -> super::datatypes::BodyPart {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::datatypes::BodyPart>(Bone::VT_BODY_PART, Some(super::datatypes::BodyPart::NONE)).unwrap()}
  }
  /// The global rotation of the bone.
  ///
  /// Note that the identity rotation is where a bone's tail is towards -y (assuming
  /// the head of the bone is the origin)
  #[inline]
  pub fn rotation_g(&self) -> Option<&'a super::datatypes::math::Quat> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::datatypes::math::Quat>(Bone::VT_ROTATION_G, None)}
  }
  #[inline]
  pub fn bone_length(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Bone::VT_BONE_LENGTH, Some(0.0)).unwrap()}
  }
  /// The global position of the head of this bone.
  ///
  /// The head of a bone is joint/node of the bone touching the parent bone. The
  /// parent is defined as the bone closer to the HMD.
  #[inline]
  pub fn head_position_g(&self) -> Option<&'a super::datatypes::math::Vec3f> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::datatypes::math::Vec3f>(Bone::VT_HEAD_POSITION_G, None)}
  }
}

impl flatbuffers::Verifiable for Bone<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<super::datatypes::BodyPart>("body_part", Self::VT_BODY_PART, false)?
     .visit_field::<super::datatypes::math::Quat>("rotation_g", Self::VT_ROTATION_G, false)?
     .visit_field::<f32>("bone_length", Self::VT_BONE_LENGTH, false)?
     .visit_field::<super::datatypes::math::Vec3f>("head_position_g", Self::VT_HEAD_POSITION_G, false)?
     .finish();
    Ok(())
  }
}
pub struct BoneArgs<'a> {
    pub body_part: super::datatypes::BodyPart,
    pub rotation_g: Option<&'a super::datatypes::math::Quat>,
    pub bone_length: f32,
    pub head_position_g: Option<&'a super::datatypes::math::Vec3f>,
}
impl<'a> Default for BoneArgs<'a> {
  #[inline]
  fn default() -> Self {
    BoneArgs {
      body_part: super::datatypes::BodyPart::NONE,
      rotation_g: None,
      bone_length: 0.0,
      head_position_g: None,
    }
  }
}

pub struct BoneBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BoneBuilder<'a, 'b> {
  #[inline]
  pub fn add_body_part(&mut self, body_part: super::datatypes::BodyPart) {
    self.fbb_.push_slot::<super::datatypes::BodyPart>(Bone::VT_BODY_PART, body_part, super::datatypes::BodyPart::NONE);
  }
  #[inline]
  pub fn add_rotation_g(&mut self, rotation_g: &super::datatypes::math::Quat) {
    self.fbb_.push_slot_always::<&super::datatypes::math::Quat>(Bone::VT_ROTATION_G, rotation_g);
  }
  #[inline]
  pub fn add_bone_length(&mut self, bone_length: f32) {
    self.fbb_.push_slot::<f32>(Bone::VT_BONE_LENGTH, bone_length, 0.0);
  }
  #[inline]
  pub fn add_head_position_g(&mut self, head_position_g: &super::datatypes::math::Vec3f) {
    self.fbb_.push_slot_always::<&super::datatypes::math::Vec3f>(Bone::VT_HEAD_POSITION_G, head_position_g);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BoneBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BoneBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Bone<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Bone<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Bone");
      ds.field("body_part", &self.body_part());
      ds.field("rotation_g", &self.rotation_g());
      ds.field("bone_length", &self.bone_length());
      ds.field("head_position_g", &self.head_position_g());
      ds.finish()
  }
}
