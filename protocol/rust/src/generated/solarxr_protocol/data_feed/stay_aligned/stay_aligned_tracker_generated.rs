// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StayAlignedTrackerOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StayAlignedTracker<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StayAlignedTracker<'a> {
  type Inner = StayAlignedTracker<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StayAlignedTracker<'a> {
  pub const VT_YAW_CORRECTION_IN_DEG: flatbuffers::VOffsetT = 4;
  pub const VT_LOCKED_ERROR_IN_DEG: flatbuffers::VOffsetT = 6;
  pub const VT_CENTER_ERROR_IN_DEG: flatbuffers::VOffsetT = 8;
  pub const VT_NEIGHBOR_ERROR_IN_DEG: flatbuffers::VOffsetT = 10;
  pub const VT_LOCKED: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StayAlignedTracker { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args StayAlignedTrackerArgs
  ) -> flatbuffers::WIPOffset<StayAlignedTracker<'bldr>> {
    let mut builder = StayAlignedTrackerBuilder::new(_fbb);
    builder.add_neighbor_error_in_deg(args.neighbor_error_in_deg);
    builder.add_center_error_in_deg(args.center_error_in_deg);
    builder.add_locked_error_in_deg(args.locked_error_in_deg);
    builder.add_yaw_correction_in_deg(args.yaw_correction_in_deg);
    builder.add_locked(args.locked);
    builder.finish()
  }


  #[inline]
  pub fn yaw_correction_in_deg(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(StayAlignedTracker::VT_YAW_CORRECTION_IN_DEG, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn locked_error_in_deg(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(StayAlignedTracker::VT_LOCKED_ERROR_IN_DEG, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn center_error_in_deg(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(StayAlignedTracker::VT_CENTER_ERROR_IN_DEG, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn neighbor_error_in_deg(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(StayAlignedTracker::VT_NEIGHBOR_ERROR_IN_DEG, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn locked(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(StayAlignedTracker::VT_LOCKED, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for StayAlignedTracker<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("yaw_correction_in_deg", Self::VT_YAW_CORRECTION_IN_DEG, false)?
     .visit_field::<f32>("locked_error_in_deg", Self::VT_LOCKED_ERROR_IN_DEG, false)?
     .visit_field::<f32>("center_error_in_deg", Self::VT_CENTER_ERROR_IN_DEG, false)?
     .visit_field::<f32>("neighbor_error_in_deg", Self::VT_NEIGHBOR_ERROR_IN_DEG, false)?
     .visit_field::<bool>("locked", Self::VT_LOCKED, false)?
     .finish();
    Ok(())
  }
}
pub struct StayAlignedTrackerArgs {
    pub yaw_correction_in_deg: f32,
    pub locked_error_in_deg: f32,
    pub center_error_in_deg: f32,
    pub neighbor_error_in_deg: f32,
    pub locked: bool,
}
impl<'a> Default for StayAlignedTrackerArgs {
  #[inline]
  fn default() -> Self {
    StayAlignedTrackerArgs {
      yaw_correction_in_deg: 0.0,
      locked_error_in_deg: 0.0,
      center_error_in_deg: 0.0,
      neighbor_error_in_deg: 0.0,
      locked: false,
    }
  }
}

pub struct StayAlignedTrackerBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StayAlignedTrackerBuilder<'a, 'b> {
  #[inline]
  pub fn add_yaw_correction_in_deg(&mut self, yaw_correction_in_deg: f32) {
    self.fbb_.push_slot::<f32>(StayAlignedTracker::VT_YAW_CORRECTION_IN_DEG, yaw_correction_in_deg, 0.0);
  }
  #[inline]
  pub fn add_locked_error_in_deg(&mut self, locked_error_in_deg: f32) {
    self.fbb_.push_slot::<f32>(StayAlignedTracker::VT_LOCKED_ERROR_IN_DEG, locked_error_in_deg, 0.0);
  }
  #[inline]
  pub fn add_center_error_in_deg(&mut self, center_error_in_deg: f32) {
    self.fbb_.push_slot::<f32>(StayAlignedTracker::VT_CENTER_ERROR_IN_DEG, center_error_in_deg, 0.0);
  }
  #[inline]
  pub fn add_neighbor_error_in_deg(&mut self, neighbor_error_in_deg: f32) {
    self.fbb_.push_slot::<f32>(StayAlignedTracker::VT_NEIGHBOR_ERROR_IN_DEG, neighbor_error_in_deg, 0.0);
  }
  #[inline]
  pub fn add_locked(&mut self, locked: bool) {
    self.fbb_.push_slot::<bool>(StayAlignedTracker::VT_LOCKED, locked, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StayAlignedTrackerBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StayAlignedTrackerBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StayAlignedTracker<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StayAlignedTracker<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StayAlignedTracker");
      ds.field("yaw_correction_in_deg", &self.yaw_correction_in_deg());
      ds.field("locked_error_in_deg", &self.locked_error_in_deg());
      ds.field("center_error_in_deg", &self.center_error_in_deg());
      ds.field("neighbor_error_in_deg", &self.neighbor_error_in_deg());
      ds.field("locked", &self.locked());
      ds.finish()
  }
}
