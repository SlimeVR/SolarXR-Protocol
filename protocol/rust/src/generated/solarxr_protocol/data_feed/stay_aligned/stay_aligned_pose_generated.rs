// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StayAlignedPoseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StayAlignedPose<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StayAlignedPose<'a> {
  type Inner = StayAlignedPose<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StayAlignedPose<'a> {
  pub const VT_UPPER_LEG_ANGLE_IN_DEG: flatbuffers::VOffsetT = 4;
  pub const VT_LOWER_LEG_ANGLE_IN_DEG: flatbuffers::VOffsetT = 6;
  pub const VT_FOOT_ANGLE_IN_DEG: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StayAlignedPose { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args StayAlignedPoseArgs
  ) -> flatbuffers::WIPOffset<StayAlignedPose<'bldr>> {
    let mut builder = StayAlignedPoseBuilder::new(_fbb);
    builder.add_foot_angle_in_deg(args.foot_angle_in_deg);
    builder.add_lower_leg_angle_in_deg(args.lower_leg_angle_in_deg);
    builder.add_upper_leg_angle_in_deg(args.upper_leg_angle_in_deg);
    builder.finish()
  }


  #[inline]
  pub fn upper_leg_angle_in_deg(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(StayAlignedPose::VT_UPPER_LEG_ANGLE_IN_DEG, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn lower_leg_angle_in_deg(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(StayAlignedPose::VT_LOWER_LEG_ANGLE_IN_DEG, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn foot_angle_in_deg(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(StayAlignedPose::VT_FOOT_ANGLE_IN_DEG, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for StayAlignedPose<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("upper_leg_angle_in_deg", Self::VT_UPPER_LEG_ANGLE_IN_DEG, false)?
     .visit_field::<f32>("lower_leg_angle_in_deg", Self::VT_LOWER_LEG_ANGLE_IN_DEG, false)?
     .visit_field::<f32>("foot_angle_in_deg", Self::VT_FOOT_ANGLE_IN_DEG, false)?
     .finish();
    Ok(())
  }
}
pub struct StayAlignedPoseArgs {
    pub upper_leg_angle_in_deg: f32,
    pub lower_leg_angle_in_deg: f32,
    pub foot_angle_in_deg: f32,
}
impl<'a> Default for StayAlignedPoseArgs {
  #[inline]
  fn default() -> Self {
    StayAlignedPoseArgs {
      upper_leg_angle_in_deg: 0.0,
      lower_leg_angle_in_deg: 0.0,
      foot_angle_in_deg: 0.0,
    }
  }
}

pub struct StayAlignedPoseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StayAlignedPoseBuilder<'a, 'b> {
  #[inline]
  pub fn add_upper_leg_angle_in_deg(&mut self, upper_leg_angle_in_deg: f32) {
    self.fbb_.push_slot::<f32>(StayAlignedPose::VT_UPPER_LEG_ANGLE_IN_DEG, upper_leg_angle_in_deg, 0.0);
  }
  #[inline]
  pub fn add_lower_leg_angle_in_deg(&mut self, lower_leg_angle_in_deg: f32) {
    self.fbb_.push_slot::<f32>(StayAlignedPose::VT_LOWER_LEG_ANGLE_IN_DEG, lower_leg_angle_in_deg, 0.0);
  }
  #[inline]
  pub fn add_foot_angle_in_deg(&mut self, foot_angle_in_deg: f32) {
    self.fbb_.push_slot::<f32>(StayAlignedPose::VT_FOOT_ANGLE_IN_DEG, foot_angle_in_deg, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StayAlignedPoseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StayAlignedPoseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StayAlignedPose<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StayAlignedPose<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StayAlignedPose");
      ds.field("upper_leg_angle_in_deg", &self.upper_leg_angle_in_deg());
      ds.field("lower_leg_angle_in_deg", &self.lower_leg_angle_in_deg());
      ds.field("foot_angle_in_deg", &self.foot_angle_in_deg());
      ds.finish()
  }
}
