// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TopicIdOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A `TopicId` identifies an application-specific category of data. Because it
/// is application-specific, it is up to the application within the specified
/// organization to define its semantics/meaning.
///
/// For example, "bob" may have an "overlay" app with a "settings" topic for controlling
/// the overlay visibility and other settings, as well as a "video feed" topic for
/// allowing other applications to display video data in a wrist mounted window in VR.
pub struct TopicId<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TopicId<'a> {
  type Inner = TopicId<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> TopicId<'a> {
  pub const VT_ORGANIZATION: flatbuffers::VOffsetT = 4;
  pub const VT_APP_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_TOPIC: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TopicId { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TopicIdArgs<'args>
  ) -> flatbuffers::WIPOffset<TopicId<'bldr>> {
    let mut builder = TopicIdBuilder::new(_fbb);
    if let Some(x) = args.topic { builder.add_topic(x); }
    if let Some(x) = args.app_name { builder.add_app_name(x); }
    if let Some(x) = args.organization { builder.add_organization(x); }
    builder.finish()
  }


  /// The organization/developer that defines the meaning of this feature. Avoids name
  /// clashes. Should be something unique - same idea as java package identifier.
  #[inline]
  pub fn organization(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TopicId::VT_ORGANIZATION, None)
  }
  /// The name of the application/device. Should be unique within the organization.
  #[inline]
  pub fn app_name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TopicId::VT_APP_NAME, None)
  }
  /// The name of the topic. Should be unique within the application.
  #[inline]
  pub fn topic(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TopicId::VT_TOPIC, None)
  }
}

impl flatbuffers::Verifiable for TopicId<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("organization", Self::VT_ORGANIZATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("app_name", Self::VT_APP_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("topic", Self::VT_TOPIC, false)?
     .finish();
    Ok(())
  }
}
pub struct TopicIdArgs<'a> {
    pub organization: Option<flatbuffers::WIPOffset<&'a str>>,
    pub app_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub topic: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for TopicIdArgs<'a> {
  #[inline]
  fn default() -> Self {
    TopicIdArgs {
      organization: None,
      app_name: None,
      topic: None,
    }
  }
}

pub struct TopicIdBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TopicIdBuilder<'a, 'b> {
  #[inline]
  pub fn add_organization(&mut self, organization: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TopicId::VT_ORGANIZATION, organization);
  }
  #[inline]
  pub fn add_app_name(&mut self, app_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TopicId::VT_APP_NAME, app_name);
  }
  #[inline]
  pub fn add_topic(&mut self, topic: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TopicId::VT_TOPIC, topic);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TopicIdBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TopicIdBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TopicId<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TopicId<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TopicId");
      ds.field("organization", &self.organization());
      ds.field("app_name", &self.app_name());
      ds.field("topic", &self.topic());
      ds.finish()
  }
}
