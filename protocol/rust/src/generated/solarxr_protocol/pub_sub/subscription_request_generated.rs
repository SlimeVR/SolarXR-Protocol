// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SubscriptionRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Requests a subscription to `topic`. Replies with a `TopicMapping`.
pub struct SubscriptionRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SubscriptionRequest<'a> {
  type Inner = SubscriptionRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SubscriptionRequest<'a> {
  pub const VT_TOPIC_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_TOPIC: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SubscriptionRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SubscriptionRequestArgs
  ) -> flatbuffers::WIPOffset<SubscriptionRequest<'bldr>> {
    let mut builder = SubscriptionRequestBuilder::new(_fbb);
    if let Some(x) = args.topic { builder.add_topic(x); }
    builder.add_topic_type(args.topic_type);
    builder.finish()
  }


  #[inline]
  pub fn topic_type(&self) -> Topic {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Topic>(SubscriptionRequest::VT_TOPIC_TYPE, Some(Topic::NONE)).unwrap()}
  }
  #[inline]
  pub fn topic(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(SubscriptionRequest::VT_TOPIC, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn topic_as_topic_handle(&self) -> Option<TopicHandle<'a>> {
    if self.topic_type() == Topic::TopicHandle {
      self.topic().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TopicHandle::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn topic_as_topic_id(&self) -> Option<TopicId<'a>> {
    if self.topic_type() == Topic::TopicId {
      self.topic().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TopicId::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for SubscriptionRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<Topic, _>("topic_type", Self::VT_TOPIC_TYPE, "topic", Self::VT_TOPIC, false, |key, v, pos| {
        match key {
          Topic::TopicHandle => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TopicHandle>>("Topic::TopicHandle", pos),
          Topic::TopicId => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TopicId>>("Topic::TopicId", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct SubscriptionRequestArgs {
    pub topic_type: Topic,
    pub topic: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for SubscriptionRequestArgs {
  #[inline]
  fn default() -> Self {
    SubscriptionRequestArgs {
      topic_type: Topic::NONE,
      topic: None,
    }
  }
}

pub struct SubscriptionRequestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SubscriptionRequestBuilder<'a, 'b> {
  #[inline]
  pub fn add_topic_type(&mut self, topic_type: Topic) {
    self.fbb_.push_slot::<Topic>(SubscriptionRequest::VT_TOPIC_TYPE, topic_type, Topic::NONE);
  }
  #[inline]
  pub fn add_topic(&mut self, topic: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SubscriptionRequest::VT_TOPIC, topic);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SubscriptionRequestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SubscriptionRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SubscriptionRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SubscriptionRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SubscriptionRequest");
      ds.field("topic_type", &self.topic_type());
      match self.topic_type() {
        Topic::TopicHandle => {
          if let Some(x) = self.topic_as_topic_handle() {
            ds.field("topic", &x)
          } else {
            ds.field("topic", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Topic::TopicId => {
          if let Some(x) = self.topic_as_topic_id() {
            ds.field("topic", &x)
          } else {
            ds.field("topic", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("topic", &x)
        },
      };
      ds.finish()
  }
}
