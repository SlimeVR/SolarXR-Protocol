// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum IgnoreTrackingChecklistStepRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct IgnoreTrackingChecklistStepRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IgnoreTrackingChecklistStepRequest<'a> {
  type Inner = IgnoreTrackingChecklistStepRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IgnoreTrackingChecklistStepRequest<'a> {
  pub const VT_STEP_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IGNORE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IgnoreTrackingChecklistStepRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args IgnoreTrackingChecklistStepRequestArgs
  ) -> flatbuffers::WIPOffset<IgnoreTrackingChecklistStepRequest<'bldr>> {
    let mut builder = IgnoreTrackingChecklistStepRequestBuilder::new(_fbb);
    builder.add_ignore(args.ignore);
    builder.add_step_id(args.step_id);
    builder.finish()
  }


  #[inline]
  pub fn step_id(&self) -> TrackingChecklistStepId {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TrackingChecklistStepId>(IgnoreTrackingChecklistStepRequest::VT_STEP_ID, Some(TrackingChecklistStepId::UNKNOWN)).unwrap()}
  }
  #[inline]
  pub fn ignore(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(IgnoreTrackingChecklistStepRequest::VT_IGNORE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for IgnoreTrackingChecklistStepRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<TrackingChecklistStepId>("step_id", Self::VT_STEP_ID, false)?
     .visit_field::<bool>("ignore", Self::VT_IGNORE, false)?
     .finish();
    Ok(())
  }
}
pub struct IgnoreTrackingChecklistStepRequestArgs {
    pub step_id: TrackingChecklistStepId,
    pub ignore: bool,
}
impl<'a> Default for IgnoreTrackingChecklistStepRequestArgs {
  #[inline]
  fn default() -> Self {
    IgnoreTrackingChecklistStepRequestArgs {
      step_id: TrackingChecklistStepId::UNKNOWN,
      ignore: false,
    }
  }
}

pub struct IgnoreTrackingChecklistStepRequestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> IgnoreTrackingChecklistStepRequestBuilder<'a, 'b> {
  #[inline]
  pub fn add_step_id(&mut self, step_id: TrackingChecklistStepId) {
    self.fbb_.push_slot::<TrackingChecklistStepId>(IgnoreTrackingChecklistStepRequest::VT_STEP_ID, step_id, TrackingChecklistStepId::UNKNOWN);
  }
  #[inline]
  pub fn add_ignore(&mut self, ignore: bool) {
    self.fbb_.push_slot::<bool>(IgnoreTrackingChecklistStepRequest::VT_IGNORE, ignore, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> IgnoreTrackingChecklistStepRequestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    IgnoreTrackingChecklistStepRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IgnoreTrackingChecklistStepRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IgnoreTrackingChecklistStepRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IgnoreTrackingChecklistStepRequest");
      ds.field("step_id", &self.step_id());
      ds.field("ignore", &self.ignore());
      ds.finish()
  }
}
