// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum OSCSettingsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OSCSettings<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OSCSettings<'a> {
  type Inner = OSCSettings<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> OSCSettings<'a> {
  pub const VT_ENABLED: flatbuffers::VOffsetT = 4;
  pub const VT_PORTIN: flatbuffers::VOffsetT = 6;
  pub const VT_PORTOUT: flatbuffers::VOffsetT = 8;
  pub const VT_ADDRESS: flatbuffers::VOffsetT = 10;
  pub const VT_TRACKERS: flatbuffers::VOffsetT = 12;
  pub const VT_APPIN: flatbuffers::VOffsetT = 14;
  pub const VT_APPOUT: flatbuffers::VOffsetT = 16;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OSCSettings { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args OSCSettingsArgs<'args>
  ) -> flatbuffers::WIPOffset<OSCSettings<'bldr>> {
    let mut builder = OSCSettingsBuilder::new(_fbb);
    if let Some(x) = args.trackers { builder.add_trackers(x); }
    if let Some(x) = args.address { builder.add_address(x); }
    builder.add_portOut(args.portOut);
    builder.add_portIn(args.portIn);
    builder.add_appOut(args.appOut);
    builder.add_appIn(args.appIn);
    builder.add_enabled(args.enabled);
    builder.finish()
  }


  #[inline]
  pub fn enabled(&self) -> bool {
    self._tab.get::<bool>(OSCSettings::VT_ENABLED, Some(false)).unwrap()
  }
  #[inline]
  pub fn portIn(&self) -> u16 {
    self._tab.get::<u16>(OSCSettings::VT_PORTIN, Some(0)).unwrap()
  }
  #[inline]
  pub fn portOut(&self) -> u16 {
    self._tab.get::<u16>(OSCSettings::VT_PORTOUT, Some(0)).unwrap()
  }
  #[inline]
  pub fn address(&self) -> Option<&'a super::datatypes::Ipv4Address> {
    self._tab.get::<super::datatypes::Ipv4Address>(OSCSettings::VT_ADDRESS, None)
  }
  #[inline]
  pub fn trackers(&self) -> Option<OSCTrackersSetting<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<OSCTrackersSetting>>(OSCSettings::VT_TRACKERS, None)
  }
  #[inline]
  pub fn appIn(&self) -> super::datatypes::OSCAppIn {
    self._tab.get::<super::datatypes::OSCAppIn>(OSCSettings::VT_APPIN, Some(super::datatypes::OSCAppIn::VRCHAT)).unwrap()
  }
  #[inline]
  pub fn appOut(&self) -> super::datatypes::OSCAppOut {
    self._tab.get::<super::datatypes::OSCAppOut>(OSCSettings::VT_APPOUT, Some(super::datatypes::OSCAppOut::VRCHAT)).unwrap()
  }
}

impl flatbuffers::Verifiable for OSCSettings<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("enabled", Self::VT_ENABLED, false)?
     .visit_field::<u16>("portIn", Self::VT_PORTIN, false)?
     .visit_field::<u16>("portOut", Self::VT_PORTOUT, false)?
     .visit_field::<super::datatypes::Ipv4Address>("address", Self::VT_ADDRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<OSCTrackersSetting>>("trackers", Self::VT_TRACKERS, false)?
     .visit_field::<super::datatypes::OSCAppIn>("appIn", Self::VT_APPIN, false)?
     .visit_field::<super::datatypes::OSCAppOut>("appOut", Self::VT_APPOUT, false)?
     .finish();
    Ok(())
  }
}
pub struct OSCSettingsArgs<'a> {
    pub enabled: bool,
    pub portIn: u16,
    pub portOut: u16,
    pub address: Option<&'a super::datatypes::Ipv4Address>,
    pub trackers: Option<flatbuffers::WIPOffset<OSCTrackersSetting<'a>>>,
    pub appIn: super::datatypes::OSCAppIn,
    pub appOut: super::datatypes::OSCAppOut,
}
impl<'a> Default for OSCSettingsArgs<'a> {
  #[inline]
  fn default() -> Self {
    OSCSettingsArgs {
      enabled: false,
      portIn: 0,
      portOut: 0,
      address: None,
      trackers: None,
      appIn: super::datatypes::OSCAppIn::VRCHAT,
      appOut: super::datatypes::OSCAppOut::VRCHAT,
    }
  }
}

pub struct OSCSettingsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> OSCSettingsBuilder<'a, 'b> {
  #[inline]
  pub fn add_enabled(&mut self, enabled: bool) {
    self.fbb_.push_slot::<bool>(OSCSettings::VT_ENABLED, enabled, false);
  }
  #[inline]
  pub fn add_portIn(&mut self, portIn: u16) {
    self.fbb_.push_slot::<u16>(OSCSettings::VT_PORTIN, portIn, 0);
  }
  #[inline]
  pub fn add_portOut(&mut self, portOut: u16) {
    self.fbb_.push_slot::<u16>(OSCSettings::VT_PORTOUT, portOut, 0);
  }
  #[inline]
  pub fn add_address(&mut self, address: &super::datatypes::Ipv4Address) {
    self.fbb_.push_slot_always::<&super::datatypes::Ipv4Address>(OSCSettings::VT_ADDRESS, address);
  }
  #[inline]
  pub fn add_trackers(&mut self, trackers: flatbuffers::WIPOffset<OSCTrackersSetting<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<OSCTrackersSetting>>(OSCSettings::VT_TRACKERS, trackers);
  }
  #[inline]
  pub fn add_appIn(&mut self, appIn: super::datatypes::OSCAppIn) {
    self.fbb_.push_slot::<super::datatypes::OSCAppIn>(OSCSettings::VT_APPIN, appIn, super::datatypes::OSCAppIn::VRCHAT);
  }
  #[inline]
  pub fn add_appOut(&mut self, appOut: super::datatypes::OSCAppOut) {
    self.fbb_.push_slot::<super::datatypes::OSCAppOut>(OSCSettings::VT_APPOUT, appOut, super::datatypes::OSCAppOut::VRCHAT);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> OSCSettingsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    OSCSettingsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OSCSettings<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OSCSettings<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OSCSettings");
      ds.field("enabled", &self.enabled());
      ds.field("portIn", &self.portIn());
      ds.field("portOut", &self.portOut());
      ds.field("address", &self.address());
      ds.field("trackers", &self.trackers());
      ds.field("appIn", &self.appIn());
      ds.field("appOut", &self.appOut());
      ds.finish()
  }
}
