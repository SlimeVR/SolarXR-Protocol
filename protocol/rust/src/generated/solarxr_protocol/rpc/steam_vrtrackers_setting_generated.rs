// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SteamVRTrackersSettingOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SteamVRTrackersSetting<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SteamVRTrackersSetting<'a> {
  type Inner = SteamVRTrackersSetting<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SteamVRTrackersSetting<'a> {
  pub const VT_WAIST: flatbuffers::VOffsetT = 4;
  pub const VT_CHEST: flatbuffers::VOffsetT = 6;
  pub const VT_AUTOMATICTRACKERTOGGLE: flatbuffers::VOffsetT = 16;
  pub const VT_LEFT_FOOT: flatbuffers::VOffsetT = 18;
  pub const VT_RIGHT_FOOT: flatbuffers::VOffsetT = 20;
  pub const VT_LEFT_KNEE: flatbuffers::VOffsetT = 22;
  pub const VT_RIGHT_KNEE: flatbuffers::VOffsetT = 24;
  pub const VT_LEFT_ELBOW: flatbuffers::VOffsetT = 26;
  pub const VT_RIGHT_ELBOW: flatbuffers::VOffsetT = 28;
  pub const VT_LEFT_HAND: flatbuffers::VOffsetT = 30;
  pub const VT_RIGHT_HAND: flatbuffers::VOffsetT = 32;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SteamVRTrackersSetting { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SteamVRTrackersSettingArgs
  ) -> flatbuffers::WIPOffset<SteamVRTrackersSetting<'bldr>> {
    let mut builder = SteamVRTrackersSettingBuilder::new(_fbb);
    builder.add_right_hand(args.right_hand);
    builder.add_left_hand(args.left_hand);
    builder.add_right_elbow(args.right_elbow);
    builder.add_left_elbow(args.left_elbow);
    builder.add_right_knee(args.right_knee);
    builder.add_left_knee(args.left_knee);
    builder.add_right_foot(args.right_foot);
    builder.add_left_foot(args.left_foot);
    builder.add_automaticTrackerToggle(args.automaticTrackerToggle);
    builder.add_chest(args.chest);
    builder.add_waist(args.waist);
    builder.finish()
  }


  #[inline]
  pub fn waist(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_WAIST, Some(false)).unwrap()}
  }
  #[inline]
  pub fn chest(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_CHEST, Some(false)).unwrap()}
  }
  #[inline]
  pub fn automaticTrackerToggle(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_AUTOMATICTRACKERTOGGLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn left_foot(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_LEFT_FOOT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn right_foot(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_RIGHT_FOOT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn left_knee(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_LEFT_KNEE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn right_knee(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_RIGHT_KNEE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn left_elbow(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_LEFT_ELBOW, Some(false)).unwrap()}
  }
  #[inline]
  pub fn right_elbow(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_RIGHT_ELBOW, Some(false)).unwrap()}
  }
  #[inline]
  pub fn left_hand(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_LEFT_HAND, Some(false)).unwrap()}
  }
  #[inline]
  pub fn right_hand(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SteamVRTrackersSetting::VT_RIGHT_HAND, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for SteamVRTrackersSetting<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("waist", Self::VT_WAIST, false)?
     .visit_field::<bool>("chest", Self::VT_CHEST, false)?
     .visit_field::<bool>("automaticTrackerToggle", Self::VT_AUTOMATICTRACKERTOGGLE, false)?
     .visit_field::<bool>("left_foot", Self::VT_LEFT_FOOT, false)?
     .visit_field::<bool>("right_foot", Self::VT_RIGHT_FOOT, false)?
     .visit_field::<bool>("left_knee", Self::VT_LEFT_KNEE, false)?
     .visit_field::<bool>("right_knee", Self::VT_RIGHT_KNEE, false)?
     .visit_field::<bool>("left_elbow", Self::VT_LEFT_ELBOW, false)?
     .visit_field::<bool>("right_elbow", Self::VT_RIGHT_ELBOW, false)?
     .visit_field::<bool>("left_hand", Self::VT_LEFT_HAND, false)?
     .visit_field::<bool>("right_hand", Self::VT_RIGHT_HAND, false)?
     .finish();
    Ok(())
  }
}
pub struct SteamVRTrackersSettingArgs {
    pub waist: bool,
    pub chest: bool,
    pub automaticTrackerToggle: bool,
    pub left_foot: bool,
    pub right_foot: bool,
    pub left_knee: bool,
    pub right_knee: bool,
    pub left_elbow: bool,
    pub right_elbow: bool,
    pub left_hand: bool,
    pub right_hand: bool,
}
impl<'a> Default for SteamVRTrackersSettingArgs {
  #[inline]
  fn default() -> Self {
    SteamVRTrackersSettingArgs {
      waist: false,
      chest: false,
      automaticTrackerToggle: false,
      left_foot: false,
      right_foot: false,
      left_knee: false,
      right_knee: false,
      left_elbow: false,
      right_elbow: false,
      left_hand: false,
      right_hand: false,
    }
  }
}

pub struct SteamVRTrackersSettingBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SteamVRTrackersSettingBuilder<'a, 'b> {
  #[inline]
  pub fn add_waist(&mut self, waist: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_WAIST, waist, false);
  }
  #[inline]
  pub fn add_chest(&mut self, chest: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_CHEST, chest, false);
  }
  #[inline]
  pub fn add_automaticTrackerToggle(&mut self, automaticTrackerToggle: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_AUTOMATICTRACKERTOGGLE, automaticTrackerToggle, false);
  }
  #[inline]
  pub fn add_left_foot(&mut self, left_foot: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_LEFT_FOOT, left_foot, false);
  }
  #[inline]
  pub fn add_right_foot(&mut self, right_foot: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_RIGHT_FOOT, right_foot, false);
  }
  #[inline]
  pub fn add_left_knee(&mut self, left_knee: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_LEFT_KNEE, left_knee, false);
  }
  #[inline]
  pub fn add_right_knee(&mut self, right_knee: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_RIGHT_KNEE, right_knee, false);
  }
  #[inline]
  pub fn add_left_elbow(&mut self, left_elbow: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_LEFT_ELBOW, left_elbow, false);
  }
  #[inline]
  pub fn add_right_elbow(&mut self, right_elbow: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_RIGHT_ELBOW, right_elbow, false);
  }
  #[inline]
  pub fn add_left_hand(&mut self, left_hand: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_LEFT_HAND, left_hand, false);
  }
  #[inline]
  pub fn add_right_hand(&mut self, right_hand: bool) {
    self.fbb_.push_slot::<bool>(SteamVRTrackersSetting::VT_RIGHT_HAND, right_hand, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SteamVRTrackersSettingBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SteamVRTrackersSettingBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SteamVRTrackersSetting<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SteamVRTrackersSetting<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SteamVRTrackersSetting");
      ds.field("waist", &self.waist());
      ds.field("chest", &self.chest());
      ds.field("automaticTrackerToggle", &self.automaticTrackerToggle());
      ds.field("left_foot", &self.left_foot());
      ds.field("right_foot", &self.right_foot());
      ds.field("left_knee", &self.left_knee());
      ds.field("right_knee", &self.right_knee());
      ds.field("left_elbow", &self.left_elbow());
      ds.field("right_elbow", &self.right_elbow());
      ds.field("left_hand", &self.left_hand());
      ds.field("right_hand", &self.right_hand());
      ds.finish()
  }
}
