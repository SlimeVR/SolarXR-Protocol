// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SkeletonHeightOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SkeletonHeight<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SkeletonHeight<'a> {
  type Inner = SkeletonHeight<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SkeletonHeight<'a> {
  pub const VT_HMD_HEIGHT: flatbuffers::VOffsetT = 4;
  pub const VT_FLOOR_HEIGHT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SkeletonHeight { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SkeletonHeightArgs
  ) -> flatbuffers::WIPOffset<SkeletonHeight<'bldr>> {
    let mut builder = SkeletonHeightBuilder::new(_fbb);
    if let Some(x) = args.floor_height { builder.add_floor_height(x); }
    if let Some(x) = args.hmd_height { builder.add_hmd_height(x); }
    builder.finish()
  }


  #[inline]
  pub fn hmd_height(&self) -> Option<f32> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(SkeletonHeight::VT_HMD_HEIGHT, None)}
  }
  #[inline]
  pub fn floor_height(&self) -> Option<f32> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(SkeletonHeight::VT_FLOOR_HEIGHT, None)}
  }
}

impl flatbuffers::Verifiable for SkeletonHeight<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("hmd_height", Self::VT_HMD_HEIGHT, false)?
     .visit_field::<f32>("floor_height", Self::VT_FLOOR_HEIGHT, false)?
     .finish();
    Ok(())
  }
}
pub struct SkeletonHeightArgs {
    pub hmd_height: Option<f32>,
    pub floor_height: Option<f32>,
}
impl<'a> Default for SkeletonHeightArgs {
  #[inline]
  fn default() -> Self {
    SkeletonHeightArgs {
      hmd_height: None,
      floor_height: None,
    }
  }
}

pub struct SkeletonHeightBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SkeletonHeightBuilder<'a, 'b> {
  #[inline]
  pub fn add_hmd_height(&mut self, hmd_height: f32) {
    self.fbb_.push_slot_always::<f32>(SkeletonHeight::VT_HMD_HEIGHT, hmd_height);
  }
  #[inline]
  pub fn add_floor_height(&mut self, floor_height: f32) {
    self.fbb_.push_slot_always::<f32>(SkeletonHeight::VT_FLOOR_HEIGHT, floor_height);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SkeletonHeightBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SkeletonHeightBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SkeletonHeight<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SkeletonHeight<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SkeletonHeight");
      ds.field("hmd_height", &self.hmd_height());
      ds.field("floor_height", &self.floor_height());
      ds.finish()
  }
}
