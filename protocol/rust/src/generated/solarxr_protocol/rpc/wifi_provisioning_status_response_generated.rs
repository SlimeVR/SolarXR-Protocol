// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum WifiProvisioningStatusResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WifiProvisioningStatusResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WifiProvisioningStatusResponse<'a> {
  type Inner = WifiProvisioningStatusResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WifiProvisioningStatusResponse<'a> {
  pub const VT_STATUS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WifiProvisioningStatusResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args WifiProvisioningStatusResponseArgs
  ) -> flatbuffers::WIPOffset<WifiProvisioningStatusResponse<'bldr>> {
    let mut builder = WifiProvisioningStatusResponseBuilder::new(_fbb);
    builder.add_status(args.status);
    builder.finish()
  }


  #[inline]
  pub fn status(&self) -> WifiProvisioningStatus {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<WifiProvisioningStatus>(WifiProvisioningStatusResponse::VT_STATUS, Some(WifiProvisioningStatus::NONE)).unwrap()}
  }
}

impl flatbuffers::Verifiable for WifiProvisioningStatusResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<WifiProvisioningStatus>("status", Self::VT_STATUS, false)?
     .finish();
    Ok(())
  }
}
pub struct WifiProvisioningStatusResponseArgs {
    pub status: WifiProvisioningStatus,
}
impl<'a> Default for WifiProvisioningStatusResponseArgs {
  #[inline]
  fn default() -> Self {
    WifiProvisioningStatusResponseArgs {
      status: WifiProvisioningStatus::NONE,
    }
  }
}

pub struct WifiProvisioningStatusResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> WifiProvisioningStatusResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_status(&mut self, status: WifiProvisioningStatus) {
    self.fbb_.push_slot::<WifiProvisioningStatus>(WifiProvisioningStatusResponse::VT_STATUS, status, WifiProvisioningStatus::NONE);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> WifiProvisioningStatusResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    WifiProvisioningStatusResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WifiProvisioningStatusResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WifiProvisioningStatusResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WifiProvisioningStatusResponse");
      ds.field("status", &self.status());
      ds.finish()
  }
}
