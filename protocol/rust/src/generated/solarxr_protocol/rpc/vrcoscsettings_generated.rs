// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VRCOSCSettingsOffset {}
#[derive(Copy, Clone, PartialEq)]

/// OSC Settings specific to VRChat
pub struct VRCOSCSettings<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VRCOSCSettings<'a> {
  type Inner = VRCOSCSettings<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VRCOSCSettings<'a> {
  pub const VT_OSC_SETTINGS: flatbuffers::VOffsetT = 4;
  pub const VT_TRACKERS: flatbuffers::VOffsetT = 6;
  pub const VT_OSCQUERY_ENABLED: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VRCOSCSettings { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VRCOSCSettingsArgs<'args>
  ) -> flatbuffers::WIPOffset<VRCOSCSettings<'bldr>> {
    let mut builder = VRCOSCSettingsBuilder::new(_fbb);
    if let Some(x) = args.trackers { builder.add_trackers(x); }
    if let Some(x) = args.osc_settings { builder.add_osc_settings(x); }
    builder.add_oscquery_enabled(args.oscquery_enabled);
    builder.finish()
  }


  #[inline]
  pub fn osc_settings(&self) -> Option<OSCSettings<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<OSCSettings>>(VRCOSCSettings::VT_OSC_SETTINGS, None)}
  }
  #[inline]
  pub fn trackers(&self) -> Option<OSCTrackersSetting<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<OSCTrackersSetting>>(VRCOSCSettings::VT_TRACKERS, None)}
  }
  #[inline]
  pub fn oscquery_enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(VRCOSCSettings::VT_OSCQUERY_ENABLED, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for VRCOSCSettings<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<OSCSettings>>("osc_settings", Self::VT_OSC_SETTINGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<OSCTrackersSetting>>("trackers", Self::VT_TRACKERS, false)?
     .visit_field::<bool>("oscquery_enabled", Self::VT_OSCQUERY_ENABLED, false)?
     .finish();
    Ok(())
  }
}
pub struct VRCOSCSettingsArgs<'a> {
    pub osc_settings: Option<flatbuffers::WIPOffset<OSCSettings<'a>>>,
    pub trackers: Option<flatbuffers::WIPOffset<OSCTrackersSetting<'a>>>,
    pub oscquery_enabled: bool,
}
impl<'a> Default for VRCOSCSettingsArgs<'a> {
  #[inline]
  fn default() -> Self {
    VRCOSCSettingsArgs {
      osc_settings: None,
      trackers: None,
      oscquery_enabled: false,
    }
  }
}

pub struct VRCOSCSettingsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VRCOSCSettingsBuilder<'a, 'b> {
  #[inline]
  pub fn add_osc_settings(&mut self, osc_settings: flatbuffers::WIPOffset<OSCSettings<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<OSCSettings>>(VRCOSCSettings::VT_OSC_SETTINGS, osc_settings);
  }
  #[inline]
  pub fn add_trackers(&mut self, trackers: flatbuffers::WIPOffset<OSCTrackersSetting<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<OSCTrackersSetting>>(VRCOSCSettings::VT_TRACKERS, trackers);
  }
  #[inline]
  pub fn add_oscquery_enabled(&mut self, oscquery_enabled: bool) {
    self.fbb_.push_slot::<bool>(VRCOSCSettings::VT_OSCQUERY_ENABLED, oscquery_enabled, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VRCOSCSettingsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VRCOSCSettingsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VRCOSCSettings<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VRCOSCSettings<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VRCOSCSettings");
      ds.field("osc_settings", &self.osc_settings());
      ds.field("trackers", &self.trackers());
      ds.field("oscquery_enabled", &self.oscquery_enabled());
      ds.finish()
  }
}
