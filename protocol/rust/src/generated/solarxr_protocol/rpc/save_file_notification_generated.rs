// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SaveFileNotificationOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Used for the server to save a file and have it prompt in the user side
pub struct SaveFileNotification<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SaveFileNotification<'a> {
  type Inner = SaveFileNotification<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SaveFileNotification<'a> {
  pub const VT_DATA: flatbuffers::VOffsetT = 4;
  pub const VT_MIME_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_FILE_EXTENSION: flatbuffers::VOffsetT = 8;
  pub const VT_EXPECTED_DIR: flatbuffers::VOffsetT = 10;
  pub const VT_EXPECTED_FILENAME: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SaveFileNotification { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SaveFileNotificationArgs<'args>
  ) -> flatbuffers::WIPOffset<SaveFileNotification<'bldr>> {
    let mut builder = SaveFileNotificationBuilder::new(_fbb);
    if let Some(x) = args.expected_filename { builder.add_expected_filename(x); }
    if let Some(x) = args.file_extension { builder.add_file_extension(x); }
    if let Some(x) = args.mime_type { builder.add_mime_type(x); }
    if let Some(x) = args.data { builder.add_data(x); }
    if let Some(x) = args.expected_dir { builder.add_expected_dir(x); }
    builder.finish()
  }


  /// Binary data of the file
  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(SaveFileNotification::VT_DATA, None)}
  }
  /// MIME type of file if one exists, use `file_extension` otherwise
  #[inline]
  pub fn mime_type(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SaveFileNotification::VT_MIME_TYPE, None)}
  }
  /// Use MIME type preferably if one exists
  #[inline]
  pub fn file_extension(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SaveFileNotification::VT_FILE_EXTENSION, None)}
  }
  /// Directory recommended to save the file on
  #[inline]
  pub fn expected_dir(&self) -> Option<ComputerDirectory> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ComputerDirectory>(SaveFileNotification::VT_EXPECTED_DIR, None)}
  }
  /// Recommended filename
  #[inline]
  pub fn expected_filename(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SaveFileNotification::VT_EXPECTED_FILENAME, None)}
  }
}

impl flatbuffers::Verifiable for SaveFileNotification<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("data", Self::VT_DATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("mime_type", Self::VT_MIME_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("file_extension", Self::VT_FILE_EXTENSION, false)?
     .visit_field::<ComputerDirectory>("expected_dir", Self::VT_EXPECTED_DIR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("expected_filename", Self::VT_EXPECTED_FILENAME, false)?
     .finish();
    Ok(())
  }
}
pub struct SaveFileNotificationArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub mime_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub file_extension: Option<flatbuffers::WIPOffset<&'a str>>,
    pub expected_dir: Option<ComputerDirectory>,
    pub expected_filename: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SaveFileNotificationArgs<'a> {
  #[inline]
  fn default() -> Self {
    SaveFileNotificationArgs {
      data: None,
      mime_type: None,
      file_extension: None,
      expected_dir: None,
      expected_filename: None,
    }
  }
}

pub struct SaveFileNotificationBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SaveFileNotificationBuilder<'a, 'b> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SaveFileNotification::VT_DATA, data);
  }
  #[inline]
  pub fn add_mime_type(&mut self, mime_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SaveFileNotification::VT_MIME_TYPE, mime_type);
  }
  #[inline]
  pub fn add_file_extension(&mut self, file_extension: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SaveFileNotification::VT_FILE_EXTENSION, file_extension);
  }
  #[inline]
  pub fn add_expected_dir(&mut self, expected_dir: ComputerDirectory) {
    self.fbb_.push_slot_always::<ComputerDirectory>(SaveFileNotification::VT_EXPECTED_DIR, expected_dir);
  }
  #[inline]
  pub fn add_expected_filename(&mut self, expected_filename: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SaveFileNotification::VT_EXPECTED_FILENAME, expected_filename);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SaveFileNotificationBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SaveFileNotificationBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SaveFileNotification<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SaveFileNotification<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SaveFileNotification");
      ds.field("data", &self.data());
      ds.field("mime_type", &self.mime_type());
      ds.field("file_extension", &self.file_extension());
      ds.field("expected_dir", &self.expected_dir());
      ds.field("expected_filename", &self.expected_filename());
      ds.finish()
  }
}
