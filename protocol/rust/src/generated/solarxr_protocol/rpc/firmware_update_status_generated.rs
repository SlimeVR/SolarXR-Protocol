// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_FIRMWARE_UPDATE_STATUS: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_FIRMWARE_UPDATE_STATUS: u8 = 15;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_FIRMWARE_UPDATE_STATUS: [FirmwareUpdateStatus; 16] = [
  FirmwareUpdateStatus::DOWNLOADING,
  FirmwareUpdateStatus::NEED_MANUAL_REBOOT,
  FirmwareUpdateStatus::AUTHENTICATING,
  FirmwareUpdateStatus::UPLOADING,
  FirmwareUpdateStatus::SYNCING_WITH_MCU,
  FirmwareUpdateStatus::REBOOTING,
  FirmwareUpdateStatus::PROVISIONING,
  FirmwareUpdateStatus::DONE,
  FirmwareUpdateStatus::ERROR_DEVICE_NOT_FOUND,
  FirmwareUpdateStatus::ERROR_TIMEOUT,
  FirmwareUpdateStatus::ERROR_DOWNLOAD_FAILED,
  FirmwareUpdateStatus::ERROR_AUTHENTICATION_FAILED,
  FirmwareUpdateStatus::ERROR_UPLOAD_FAILED,
  FirmwareUpdateStatus::ERROR_PROVISIONING_FAILED,
  FirmwareUpdateStatus::ERROR_UNSUPPORTED_METHOD,
  FirmwareUpdateStatus::ERROR_UNKNOWN,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct FirmwareUpdateStatus(pub u8);
#[allow(non_upper_case_globals)]
impl FirmwareUpdateStatus {
  /// The server is downloading the firmware
  pub const DOWNLOADING: Self = Self(0);
  /// The server is waiting for the tracker to be rebooted by the user
  /// Note that is is not the same as REBOOTING
  pub const NEED_MANUAL_REBOOT: Self = Self(1);
  /// The server tries to authenticate with the MCU
  pub const AUTHENTICATING: Self = Self(2);
  /// The server is uploading the firmware to the Device
  pub const UPLOADING: Self = Self(3);
  /// The serial flasher tries to sync with the MCU
  /// You can use this event to prompt the user to press the boot btn
  pub const SYNCING_WITH_MCU: Self = Self(4);
  /// The MCU is rebooting
  pub const REBOOTING: Self = Self(5);
  /// The server is provisioning the tracker
  pub const PROVISIONING: Self = Self(6);
  pub const DONE: Self = Self(7);
  /// Could not find the device
  pub const ERROR_DEVICE_NOT_FOUND: Self = Self(8);
  /// The operation timed out, > 1min
  pub const ERROR_TIMEOUT: Self = Self(9);
  /// The firmware download failed
  pub const ERROR_DOWNLOAD_FAILED: Self = Self(10);
  /// The server could not authenticate with the MCU
  pub const ERROR_AUTHENTICATION_FAILED: Self = Self(11);
  /// Could not upload the firmware to the MUC
  pub const ERROR_UPLOAD_FAILED: Self = Self(12);
  /// The provision of the tracker failed, usually wifi credentials
  pub const ERROR_PROVISIONING_FAILED: Self = Self(13);
  /// An unsupported Flashing method was used
  pub const ERROR_UNSUPPORTED_METHOD: Self = Self(14);
  pub const ERROR_UNKNOWN: Self = Self(15);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 15;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::DOWNLOADING,
    Self::NEED_MANUAL_REBOOT,
    Self::AUTHENTICATING,
    Self::UPLOADING,
    Self::SYNCING_WITH_MCU,
    Self::REBOOTING,
    Self::PROVISIONING,
    Self::DONE,
    Self::ERROR_DEVICE_NOT_FOUND,
    Self::ERROR_TIMEOUT,
    Self::ERROR_DOWNLOAD_FAILED,
    Self::ERROR_AUTHENTICATION_FAILED,
    Self::ERROR_UPLOAD_FAILED,
    Self::ERROR_PROVISIONING_FAILED,
    Self::ERROR_UNSUPPORTED_METHOD,
    Self::ERROR_UNKNOWN,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::DOWNLOADING => Some("DOWNLOADING"),
      Self::NEED_MANUAL_REBOOT => Some("NEED_MANUAL_REBOOT"),
      Self::AUTHENTICATING => Some("AUTHENTICATING"),
      Self::UPLOADING => Some("UPLOADING"),
      Self::SYNCING_WITH_MCU => Some("SYNCING_WITH_MCU"),
      Self::REBOOTING => Some("REBOOTING"),
      Self::PROVISIONING => Some("PROVISIONING"),
      Self::DONE => Some("DONE"),
      Self::ERROR_DEVICE_NOT_FOUND => Some("ERROR_DEVICE_NOT_FOUND"),
      Self::ERROR_TIMEOUT => Some("ERROR_TIMEOUT"),
      Self::ERROR_DOWNLOAD_FAILED => Some("ERROR_DOWNLOAD_FAILED"),
      Self::ERROR_AUTHENTICATION_FAILED => Some("ERROR_AUTHENTICATION_FAILED"),
      Self::ERROR_UPLOAD_FAILED => Some("ERROR_UPLOAD_FAILED"),
      Self::ERROR_PROVISIONING_FAILED => Some("ERROR_PROVISIONING_FAILED"),
      Self::ERROR_UNSUPPORTED_METHOD => Some("ERROR_UNSUPPORTED_METHOD"),
      Self::ERROR_UNKNOWN => Some("ERROR_UNKNOWN"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for FirmwareUpdateStatus {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for FirmwareUpdateStatus {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for FirmwareUpdateStatus {
    type Output = FirmwareUpdateStatus;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for FirmwareUpdateStatus {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for FirmwareUpdateStatus {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for FirmwareUpdateStatus {}
