// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StatusUnassignedHMDOffset {}
#[derive(Copy, Clone, PartialEq)]

/// There is an available HMD tracker and it's not assigned to head
pub struct StatusUnassignedHMD<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StatusUnassignedHMD<'a> {
  type Inner = StatusUnassignedHMD<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StatusUnassignedHMD<'a> {

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StatusUnassignedHMD { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    _args: &'args StatusUnassignedHMDArgs
  ) -> flatbuffers::WIPOffset<StatusUnassignedHMD<'bldr>> {
    let mut builder = StatusUnassignedHMDBuilder::new(_fbb);
    builder.finish()
  }

}

impl flatbuffers::Verifiable for StatusUnassignedHMD<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct StatusUnassignedHMDArgs {
}
impl<'a> Default for StatusUnassignedHMDArgs {
  #[inline]
  fn default() -> Self {
    StatusUnassignedHMDArgs {
    }
  }
}

pub struct StatusUnassignedHMDBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StatusUnassignedHMDBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StatusUnassignedHMDBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StatusUnassignedHMDBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StatusUnassignedHMD<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StatusUnassignedHMD<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StatusUnassignedHMD");
      ds.finish()
  }
}
