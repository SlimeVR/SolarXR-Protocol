// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AutoBoneProcessStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AutoBoneProcessStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AutoBoneProcessStatus<'a> {
  type Inner = AutoBoneProcessStatus<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> AutoBoneProcessStatus<'a> {
  pub const VT_PROCESS_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_MESSAGE: flatbuffers::VOffsetT = 6;
  pub const VT_COMPLETED: flatbuffers::VOffsetT = 8;
  pub const VT_SUCCESS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AutoBoneProcessStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AutoBoneProcessStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<AutoBoneProcessStatus<'bldr>> {
    let mut builder = AutoBoneProcessStatusBuilder::new(_fbb);
    if let Some(x) = args.message { builder.add_message(x); }
    builder.add_success(args.success);
    builder.add_completed(args.completed);
    builder.add_process_type(args.process_type);
    builder.finish()
  }


  #[inline]
  pub fn process_type(&self) -> AutoBoneProcessType {
    self._tab.get::<AutoBoneProcessType>(AutoBoneProcessStatus::VT_PROCESS_TYPE, Some(AutoBoneProcessType::NONE)).unwrap()
  }
  #[inline]
  pub fn message(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AutoBoneProcessStatus::VT_MESSAGE, None)
  }
  #[inline]
  pub fn completed(&self) -> bool {
    self._tab.get::<bool>(AutoBoneProcessStatus::VT_COMPLETED, Some(false)).unwrap()
  }
  #[inline]
  pub fn success(&self) -> bool {
    self._tab.get::<bool>(AutoBoneProcessStatus::VT_SUCCESS, Some(false)).unwrap()
  }
}

impl flatbuffers::Verifiable for AutoBoneProcessStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<AutoBoneProcessType>("process_type", Self::VT_PROCESS_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("message", Self::VT_MESSAGE, false)?
     .visit_field::<bool>("completed", Self::VT_COMPLETED, false)?
     .visit_field::<bool>("success", Self::VT_SUCCESS, false)?
     .finish();
    Ok(())
  }
}
pub struct AutoBoneProcessStatusArgs<'a> {
    pub process_type: AutoBoneProcessType,
    pub message: Option<flatbuffers::WIPOffset<&'a str>>,
    pub completed: bool,
    pub success: bool,
}
impl<'a> Default for AutoBoneProcessStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    AutoBoneProcessStatusArgs {
      process_type: AutoBoneProcessType::NONE,
      message: None,
      completed: false,
      success: false,
    }
  }
}

pub struct AutoBoneProcessStatusBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AutoBoneProcessStatusBuilder<'a, 'b> {
  #[inline]
  pub fn add_process_type(&mut self, process_type: AutoBoneProcessType) {
    self.fbb_.push_slot::<AutoBoneProcessType>(AutoBoneProcessStatus::VT_PROCESS_TYPE, process_type, AutoBoneProcessType::NONE);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AutoBoneProcessStatus::VT_MESSAGE, message);
  }
  #[inline]
  pub fn add_completed(&mut self, completed: bool) {
    self.fbb_.push_slot::<bool>(AutoBoneProcessStatus::VT_COMPLETED, completed, false);
  }
  #[inline]
  pub fn add_success(&mut self, success: bool) {
    self.fbb_.push_slot::<bool>(AutoBoneProcessStatus::VT_SUCCESS, success, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AutoBoneProcessStatusBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AutoBoneProcessStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AutoBoneProcessStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for AutoBoneProcessStatus<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("AutoBoneProcessStatus");
      ds.field("process_type", &self.process_type());
      ds.field("message", &self.message());
      ds.field("completed", &self.completed());
      ds.field("success", &self.success());
      ds.finish()
  }
}
