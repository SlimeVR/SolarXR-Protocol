// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ResetRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ResetRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ResetRequest<'a> {
  type Inner = ResetRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ResetRequest<'a> {
  pub const VT_RESET_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_BODY_PARTS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ResetRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ResetRequestArgs<'args>
  ) -> flatbuffers::WIPOffset<ResetRequest<'bldr>> {
    let mut builder = ResetRequestBuilder::new(_fbb);
    if let Some(x) = args.body_parts { builder.add_body_parts(x); }
    builder.add_reset_type(args.reset_type);
    builder.finish()
  }


  #[inline]
  pub fn reset_type(&self) -> ResetType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ResetType>(ResetRequest::VT_RESET_TYPE, Some(ResetType::Yaw)).unwrap()}
  }
  /// Which body parts to reset. Server handles it if empty (usually all)
  #[inline]
  pub fn body_parts(&self) -> Option<flatbuffers::Vector<'a, super::datatypes::BodyPart>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, super::datatypes::BodyPart>>>(ResetRequest::VT_BODY_PARTS, None)}
  }
}

impl flatbuffers::Verifiable for ResetRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ResetType>("reset_type", Self::VT_RESET_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, super::datatypes::BodyPart>>>("body_parts", Self::VT_BODY_PARTS, false)?
     .finish();
    Ok(())
  }
}
pub struct ResetRequestArgs<'a> {
    pub reset_type: ResetType,
    pub body_parts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, super::datatypes::BodyPart>>>,
}
impl<'a> Default for ResetRequestArgs<'a> {
  #[inline]
  fn default() -> Self {
    ResetRequestArgs {
      reset_type: ResetType::Yaw,
      body_parts: None,
    }
  }
}

pub struct ResetRequestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ResetRequestBuilder<'a, 'b> {
  #[inline]
  pub fn add_reset_type(&mut self, reset_type: ResetType) {
    self.fbb_.push_slot::<ResetType>(ResetRequest::VT_RESET_TYPE, reset_type, ResetType::Yaw);
  }
  #[inline]
  pub fn add_body_parts(&mut self, body_parts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , super::datatypes::BodyPart>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ResetRequest::VT_BODY_PARTS, body_parts);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ResetRequestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ResetRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ResetRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ResetRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ResetRequest");
      ds.field("reset_type", &self.reset_type());
      ds.field("body_parts", &self.body_parts());
      ds.finish()
  }
}
