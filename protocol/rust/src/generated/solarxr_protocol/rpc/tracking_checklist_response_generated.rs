// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TrackingChecklistResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TrackingChecklistResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TrackingChecklistResponse<'a> {
  type Inner = TrackingChecklistResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TrackingChecklistResponse<'a> {
  pub const VT_STEPS: flatbuffers::VOffsetT = 4;
  pub const VT_IGNORED_STEPS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TrackingChecklistResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TrackingChecklistResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<TrackingChecklistResponse<'bldr>> {
    let mut builder = TrackingChecklistResponseBuilder::new(_fbb);
    if let Some(x) = args.ignored_steps { builder.add_ignored_steps(x); }
    if let Some(x) = args.steps { builder.add_steps(x); }
    builder.finish()
  }


  #[inline]
  pub fn steps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TrackingChecklistStep<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TrackingChecklistStep>>>>(TrackingChecklistResponse::VT_STEPS, None)}
  }
  #[inline]
  pub fn ignored_steps(&self) -> Option<flatbuffers::Vector<'a, TrackingChecklistStepId>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, TrackingChecklistStepId>>>(TrackingChecklistResponse::VT_IGNORED_STEPS, None)}
  }
}

impl flatbuffers::Verifiable for TrackingChecklistResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<TrackingChecklistStep>>>>("steps", Self::VT_STEPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, TrackingChecklistStepId>>>("ignored_steps", Self::VT_IGNORED_STEPS, false)?
     .finish();
    Ok(())
  }
}
pub struct TrackingChecklistResponseArgs<'a> {
    pub steps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TrackingChecklistStep<'a>>>>>,
    pub ignored_steps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, TrackingChecklistStepId>>>,
}
impl<'a> Default for TrackingChecklistResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    TrackingChecklistResponseArgs {
      steps: None,
      ignored_steps: None,
    }
  }
}

pub struct TrackingChecklistResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TrackingChecklistResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_steps(&mut self, steps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<TrackingChecklistStep<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackingChecklistResponse::VT_STEPS, steps);
  }
  #[inline]
  pub fn add_ignored_steps(&mut self, ignored_steps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , TrackingChecklistStepId>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackingChecklistResponse::VT_IGNORED_STEPS, ignored_steps);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TrackingChecklistResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TrackingChecklistResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TrackingChecklistResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TrackingChecklistResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TrackingChecklistResponse");
      ds.field("steps", &self.steps());
      ds.field("ignored_steps", &self.ignored_steps());
      ds.finish()
  }
}
