// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TapDetectionSettingsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TapDetectionSettings<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TapDetectionSettings<'a> {
  type Inner = TapDetectionSettings<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TapDetectionSettings<'a> {
  pub const VT_FULL_RESET_DELAY: flatbuffers::VOffsetT = 4;
  pub const VT_FULL_RESET_ENABLED: flatbuffers::VOffsetT = 6;
  pub const VT_FULL_RESET_TAPS: flatbuffers::VOffsetT = 8;
  pub const VT_YAW_RESET_DELAY: flatbuffers::VOffsetT = 10;
  pub const VT_YAW_RESET_ENABLED: flatbuffers::VOffsetT = 12;
  pub const VT_YAW_RESET_TAPS: flatbuffers::VOffsetT = 14;
  pub const VT_MOUNTING_RESET_DELAY: flatbuffers::VOffsetT = 16;
  pub const VT_MOUNTING_RESET_ENABLED: flatbuffers::VOffsetT = 18;
  pub const VT_MOUNTING_RESET_TAPS: flatbuffers::VOffsetT = 20;
  pub const VT_SETUP_MODE: flatbuffers::VOffsetT = 22;
  pub const VT_NUMBER_TRACKERS_OVER_THRESHOLD: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TapDetectionSettings { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TapDetectionSettingsArgs
  ) -> flatbuffers::WIPOffset<TapDetectionSettings<'bldr>> {
    let mut builder = TapDetectionSettingsBuilder::new(_fbb);
    if let Some(x) = args.mounting_reset_delay { builder.add_mounting_reset_delay(x); }
    if let Some(x) = args.yaw_reset_delay { builder.add_yaw_reset_delay(x); }
    if let Some(x) = args.full_reset_delay { builder.add_full_reset_delay(x); }
    if let Some(x) = args.number_trackers_over_threshold { builder.add_number_trackers_over_threshold(x); }
    if let Some(x) = args.setup_mode { builder.add_setup_mode(x); }
    if let Some(x) = args.mounting_reset_taps { builder.add_mounting_reset_taps(x); }
    if let Some(x) = args.mounting_reset_enabled { builder.add_mounting_reset_enabled(x); }
    if let Some(x) = args.yaw_reset_taps { builder.add_yaw_reset_taps(x); }
    if let Some(x) = args.yaw_reset_enabled { builder.add_yaw_reset_enabled(x); }
    if let Some(x) = args.full_reset_taps { builder.add_full_reset_taps(x); }
    if let Some(x) = args.full_reset_enabled { builder.add_full_reset_enabled(x); }
    builder.finish()
  }


  #[inline]
  pub fn full_reset_delay(&self) -> Option<f32> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TapDetectionSettings::VT_FULL_RESET_DELAY, None)}
  }
  #[inline]
  pub fn full_reset_enabled(&self) -> Option<bool> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TapDetectionSettings::VT_FULL_RESET_ENABLED, None)}
  }
  #[inline]
  pub fn full_reset_taps(&self) -> Option<u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(TapDetectionSettings::VT_FULL_RESET_TAPS, None)}
  }
  #[inline]
  pub fn yaw_reset_delay(&self) -> Option<f32> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TapDetectionSettings::VT_YAW_RESET_DELAY, None)}
  }
  #[inline]
  pub fn yaw_reset_enabled(&self) -> Option<bool> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TapDetectionSettings::VT_YAW_RESET_ENABLED, None)}
  }
  #[inline]
  pub fn yaw_reset_taps(&self) -> Option<u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(TapDetectionSettings::VT_YAW_RESET_TAPS, None)}
  }
  #[inline]
  pub fn mounting_reset_delay(&self) -> Option<f32> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TapDetectionSettings::VT_MOUNTING_RESET_DELAY, None)}
  }
  #[inline]
  pub fn mounting_reset_enabled(&self) -> Option<bool> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TapDetectionSettings::VT_MOUNTING_RESET_ENABLED, None)}
  }
  #[inline]
  pub fn mounting_reset_taps(&self) -> Option<u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(TapDetectionSettings::VT_MOUNTING_RESET_TAPS, None)}
  }
  /// If true, disables reset behavior of tap detection and sends a
  /// TapDetectionSetupNotification, each time 2 taps are detected on any tracker
  #[inline]
  pub fn setup_mode(&self) -> Option<bool> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TapDetectionSettings::VT_SETUP_MODE, None)}
  }
  #[inline]
  pub fn number_trackers_over_threshold(&self) -> Option<u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(TapDetectionSettings::VT_NUMBER_TRACKERS_OVER_THRESHOLD, None)}
  }
}

impl flatbuffers::Verifiable for TapDetectionSettings<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("full_reset_delay", Self::VT_FULL_RESET_DELAY, false)?
     .visit_field::<bool>("full_reset_enabled", Self::VT_FULL_RESET_ENABLED, false)?
     .visit_field::<u8>("full_reset_taps", Self::VT_FULL_RESET_TAPS, false)?
     .visit_field::<f32>("yaw_reset_delay", Self::VT_YAW_RESET_DELAY, false)?
     .visit_field::<bool>("yaw_reset_enabled", Self::VT_YAW_RESET_ENABLED, false)?
     .visit_field::<u8>("yaw_reset_taps", Self::VT_YAW_RESET_TAPS, false)?
     .visit_field::<f32>("mounting_reset_delay", Self::VT_MOUNTING_RESET_DELAY, false)?
     .visit_field::<bool>("mounting_reset_enabled", Self::VT_MOUNTING_RESET_ENABLED, false)?
     .visit_field::<u8>("mounting_reset_taps", Self::VT_MOUNTING_RESET_TAPS, false)?
     .visit_field::<bool>("setup_mode", Self::VT_SETUP_MODE, false)?
     .visit_field::<u8>("number_trackers_over_threshold", Self::VT_NUMBER_TRACKERS_OVER_THRESHOLD, false)?
     .finish();
    Ok(())
  }
}
pub struct TapDetectionSettingsArgs {
    pub full_reset_delay: Option<f32>,
    pub full_reset_enabled: Option<bool>,
    pub full_reset_taps: Option<u8>,
    pub yaw_reset_delay: Option<f32>,
    pub yaw_reset_enabled: Option<bool>,
    pub yaw_reset_taps: Option<u8>,
    pub mounting_reset_delay: Option<f32>,
    pub mounting_reset_enabled: Option<bool>,
    pub mounting_reset_taps: Option<u8>,
    pub setup_mode: Option<bool>,
    pub number_trackers_over_threshold: Option<u8>,
}
impl<'a> Default for TapDetectionSettingsArgs {
  #[inline]
  fn default() -> Self {
    TapDetectionSettingsArgs {
      full_reset_delay: None,
      full_reset_enabled: None,
      full_reset_taps: None,
      yaw_reset_delay: None,
      yaw_reset_enabled: None,
      yaw_reset_taps: None,
      mounting_reset_delay: None,
      mounting_reset_enabled: None,
      mounting_reset_taps: None,
      setup_mode: None,
      number_trackers_over_threshold: None,
    }
  }
}

pub struct TapDetectionSettingsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TapDetectionSettingsBuilder<'a, 'b> {
  #[inline]
  pub fn add_full_reset_delay(&mut self, full_reset_delay: f32) {
    self.fbb_.push_slot_always::<f32>(TapDetectionSettings::VT_FULL_RESET_DELAY, full_reset_delay);
  }
  #[inline]
  pub fn add_full_reset_enabled(&mut self, full_reset_enabled: bool) {
    self.fbb_.push_slot_always::<bool>(TapDetectionSettings::VT_FULL_RESET_ENABLED, full_reset_enabled);
  }
  #[inline]
  pub fn add_full_reset_taps(&mut self, full_reset_taps: u8) {
    self.fbb_.push_slot_always::<u8>(TapDetectionSettings::VT_FULL_RESET_TAPS, full_reset_taps);
  }
  #[inline]
  pub fn add_yaw_reset_delay(&mut self, yaw_reset_delay: f32) {
    self.fbb_.push_slot_always::<f32>(TapDetectionSettings::VT_YAW_RESET_DELAY, yaw_reset_delay);
  }
  #[inline]
  pub fn add_yaw_reset_enabled(&mut self, yaw_reset_enabled: bool) {
    self.fbb_.push_slot_always::<bool>(TapDetectionSettings::VT_YAW_RESET_ENABLED, yaw_reset_enabled);
  }
  #[inline]
  pub fn add_yaw_reset_taps(&mut self, yaw_reset_taps: u8) {
    self.fbb_.push_slot_always::<u8>(TapDetectionSettings::VT_YAW_RESET_TAPS, yaw_reset_taps);
  }
  #[inline]
  pub fn add_mounting_reset_delay(&mut self, mounting_reset_delay: f32) {
    self.fbb_.push_slot_always::<f32>(TapDetectionSettings::VT_MOUNTING_RESET_DELAY, mounting_reset_delay);
  }
  #[inline]
  pub fn add_mounting_reset_enabled(&mut self, mounting_reset_enabled: bool) {
    self.fbb_.push_slot_always::<bool>(TapDetectionSettings::VT_MOUNTING_RESET_ENABLED, mounting_reset_enabled);
  }
  #[inline]
  pub fn add_mounting_reset_taps(&mut self, mounting_reset_taps: u8) {
    self.fbb_.push_slot_always::<u8>(TapDetectionSettings::VT_MOUNTING_RESET_TAPS, mounting_reset_taps);
  }
  #[inline]
  pub fn add_setup_mode(&mut self, setup_mode: bool) {
    self.fbb_.push_slot_always::<bool>(TapDetectionSettings::VT_SETUP_MODE, setup_mode);
  }
  #[inline]
  pub fn add_number_trackers_over_threshold(&mut self, number_trackers_over_threshold: u8) {
    self.fbb_.push_slot_always::<u8>(TapDetectionSettings::VT_NUMBER_TRACKERS_OVER_THRESHOLD, number_trackers_over_threshold);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TapDetectionSettingsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TapDetectionSettingsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TapDetectionSettings<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TapDetectionSettings<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TapDetectionSettings");
      ds.field("full_reset_delay", &self.full_reset_delay());
      ds.field("full_reset_enabled", &self.full_reset_enabled());
      ds.field("full_reset_taps", &self.full_reset_taps());
      ds.field("yaw_reset_delay", &self.yaw_reset_delay());
      ds.field("yaw_reset_enabled", &self.yaw_reset_enabled());
      ds.field("yaw_reset_taps", &self.yaw_reset_taps());
      ds.field("mounting_reset_delay", &self.mounting_reset_delay());
      ds.field("mounting_reset_enabled", &self.mounting_reset_enabled());
      ds.field("mounting_reset_taps", &self.mounting_reset_taps());
      ds.field("setup_mode", &self.setup_mode());
      ds.field("number_trackers_over_threshold", &self.number_trackers_over_threshold());
      ds.finish()
  }
}
