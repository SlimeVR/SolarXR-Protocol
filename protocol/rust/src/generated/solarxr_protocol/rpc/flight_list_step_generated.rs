// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FlightListStepOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FlightListStep<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FlightListStep<'a> {
  type Inner = FlightListStep<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FlightListStep<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_VALID: flatbuffers::VOffsetT = 6;
  pub const VT_VISIBILITY: flatbuffers::VOffsetT = 8;
  pub const VT_OPTIONAL: flatbuffers::VOffsetT = 10;
  pub const VT_IGNORABLE: flatbuffers::VOffsetT = 12;
  pub const VT_EXTRA_DATA_TYPE: flatbuffers::VOffsetT = 14;
  pub const VT_EXTRA_DATA: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FlightListStep { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FlightListStepArgs
  ) -> flatbuffers::WIPOffset<FlightListStep<'bldr>> {
    let mut builder = FlightListStepBuilder::new(_fbb);
    if let Some(x) = args.extra_data { builder.add_extra_data(x); }
    builder.add_extra_data_type(args.extra_data_type);
    builder.add_ignorable(args.ignorable);
    builder.add_optional(args.optional);
    builder.add_visibility(args.visibility);
    builder.add_valid(args.valid);
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> FlightListStepId {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FlightListStepId>(FlightListStep::VT_ID, Some(FlightListStepId::UNKNOWN)).unwrap()}
  }
  #[inline]
  pub fn valid(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FlightListStep::VT_VALID, Some(false)).unwrap()}
  }
  #[inline]
  pub fn visibility(&self) -> FlightListStepVisibility {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FlightListStepVisibility>(FlightListStep::VT_VISIBILITY, Some(FlightListStepVisibility::ALWAYS)).unwrap()}
  }
  #[inline]
  pub fn optional(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FlightListStep::VT_OPTIONAL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ignorable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FlightListStep::VT_IGNORABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn extra_data_type(&self) -> FlightListExtraData {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FlightListExtraData>(FlightListStep::VT_EXTRA_DATA_TYPE, Some(FlightListExtraData::NONE)).unwrap()}
  }
  #[inline]
  pub fn extra_data(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(FlightListStep::VT_EXTRA_DATA, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_status_tracker_reset(&self) -> Option<StatusTrackerReset<'a>> {
    if self.extra_data_type() == FlightListExtraData::StatusTrackerReset {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { StatusTrackerReset::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_status_tracker_error(&self) -> Option<StatusTrackerError<'a>> {
    if self.extra_data_type() == FlightListExtraData::StatusTrackerError {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { StatusTrackerError::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_status_steam_vrdisconnected(&self) -> Option<StatusSteamVRDisconnected<'a>> {
    if self.extra_data_type() == FlightListExtraData::StatusSteamVRDisconnected {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { StatusSteamVRDisconnected::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_status_unassigned_hmd(&self) -> Option<StatusUnassignedHMD<'a>> {
    if self.extra_data_type() == FlightListExtraData::StatusUnassignedHMD {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { StatusUnassignedHMD::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_flight_list_need_calibration(&self) -> Option<FlightListNeedCalibration<'a>> {
    if self.extra_data_type() == FlightListExtraData::FlightListNeedCalibration {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { FlightListNeedCalibration::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for FlightListStep<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<FlightListStepId>("id", Self::VT_ID, false)?
     .visit_field::<bool>("valid", Self::VT_VALID, false)?
     .visit_field::<FlightListStepVisibility>("visibility", Self::VT_VISIBILITY, false)?
     .visit_field::<bool>("optional", Self::VT_OPTIONAL, false)?
     .visit_field::<bool>("ignorable", Self::VT_IGNORABLE, false)?
     .visit_union::<FlightListExtraData, _>("extra_data_type", Self::VT_EXTRA_DATA_TYPE, "extra_data", Self::VT_EXTRA_DATA, false, |key, v, pos| {
        match key {
          FlightListExtraData::StatusTrackerReset => v.verify_union_variant::<flatbuffers::ForwardsUOffset<StatusTrackerReset>>("FlightListExtraData::StatusTrackerReset", pos),
          FlightListExtraData::StatusTrackerError => v.verify_union_variant::<flatbuffers::ForwardsUOffset<StatusTrackerError>>("FlightListExtraData::StatusTrackerError", pos),
          FlightListExtraData::StatusSteamVRDisconnected => v.verify_union_variant::<flatbuffers::ForwardsUOffset<StatusSteamVRDisconnected>>("FlightListExtraData::StatusSteamVRDisconnected", pos),
          FlightListExtraData::StatusUnassignedHMD => v.verify_union_variant::<flatbuffers::ForwardsUOffset<StatusUnassignedHMD>>("FlightListExtraData::StatusUnassignedHMD", pos),
          FlightListExtraData::FlightListNeedCalibration => v.verify_union_variant::<flatbuffers::ForwardsUOffset<FlightListNeedCalibration>>("FlightListExtraData::FlightListNeedCalibration", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct FlightListStepArgs {
    pub id: FlightListStepId,
    pub valid: bool,
    pub visibility: FlightListStepVisibility,
    pub optional: bool,
    pub ignorable: bool,
    pub extra_data_type: FlightListExtraData,
    pub extra_data: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for FlightListStepArgs {
  #[inline]
  fn default() -> Self {
    FlightListStepArgs {
      id: FlightListStepId::UNKNOWN,
      valid: false,
      visibility: FlightListStepVisibility::ALWAYS,
      optional: false,
      ignorable: false,
      extra_data_type: FlightListExtraData::NONE,
      extra_data: None,
    }
  }
}

pub struct FlightListStepBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FlightListStepBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: FlightListStepId) {
    self.fbb_.push_slot::<FlightListStepId>(FlightListStep::VT_ID, id, FlightListStepId::UNKNOWN);
  }
  #[inline]
  pub fn add_valid(&mut self, valid: bool) {
    self.fbb_.push_slot::<bool>(FlightListStep::VT_VALID, valid, false);
  }
  #[inline]
  pub fn add_visibility(&mut self, visibility: FlightListStepVisibility) {
    self.fbb_.push_slot::<FlightListStepVisibility>(FlightListStep::VT_VISIBILITY, visibility, FlightListStepVisibility::ALWAYS);
  }
  #[inline]
  pub fn add_optional(&mut self, optional: bool) {
    self.fbb_.push_slot::<bool>(FlightListStep::VT_OPTIONAL, optional, false);
  }
  #[inline]
  pub fn add_ignorable(&mut self, ignorable: bool) {
    self.fbb_.push_slot::<bool>(FlightListStep::VT_IGNORABLE, ignorable, false);
  }
  #[inline]
  pub fn add_extra_data_type(&mut self, extra_data_type: FlightListExtraData) {
    self.fbb_.push_slot::<FlightListExtraData>(FlightListStep::VT_EXTRA_DATA_TYPE, extra_data_type, FlightListExtraData::NONE);
  }
  #[inline]
  pub fn add_extra_data(&mut self, extra_data: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightListStep::VT_EXTRA_DATA, extra_data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FlightListStepBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FlightListStepBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FlightListStep<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FlightListStep<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FlightListStep");
      ds.field("id", &self.id());
      ds.field("valid", &self.valid());
      ds.field("visibility", &self.visibility());
      ds.field("optional", &self.optional());
      ds.field("ignorable", &self.ignorable());
      ds.field("extra_data_type", &self.extra_data_type());
      match self.extra_data_type() {
        FlightListExtraData::StatusTrackerReset => {
          if let Some(x) = self.extra_data_as_status_tracker_reset() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        FlightListExtraData::StatusTrackerError => {
          if let Some(x) = self.extra_data_as_status_tracker_error() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        FlightListExtraData::StatusSteamVRDisconnected => {
          if let Some(x) = self.extra_data_as_status_steam_vrdisconnected() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        FlightListExtraData::StatusUnassignedHMD => {
          if let Some(x) = self.extra_data_as_status_unassigned_hmd() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        FlightListExtraData::FlightListNeedCalibration => {
          if let Some(x) = self.extra_data_as_flight_list_need_calibration() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("extra_data", &x)
        },
      };
      ds.finish()
  }
}
