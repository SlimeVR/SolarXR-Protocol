// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ResetsSettingsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ResetsSettings<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ResetsSettings<'a> {
  type Inner = ResetsSettings<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ResetsSettings<'a> {
  pub const VT_RESET_MOUNTING_FEET: flatbuffers::VOffsetT = 4;
  pub const VT_ARMS_MOUNTING_RESET_MODE: flatbuffers::VOffsetT = 6;
  pub const VT_YAW_RESET_SMOOTH_TIME: flatbuffers::VOffsetT = 8;
  pub const VT_SAVE_MOUNTING_RESET: flatbuffers::VOffsetT = 10;
  pub const VT_RESET_HMD_PITCH: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ResetsSettings { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ResetsSettingsArgs
  ) -> flatbuffers::WIPOffset<ResetsSettings<'bldr>> {
    let mut builder = ResetsSettingsBuilder::new(_fbb);
    builder.add_yaw_reset_smooth_time(args.yaw_reset_smooth_time);
    builder.add_reset_hmd_pitch(args.reset_hmd_pitch);
    builder.add_save_mounting_reset(args.save_mounting_reset);
    builder.add_arms_mounting_reset_mode(args.arms_mounting_reset_mode);
    builder.add_reset_mounting_feet(args.reset_mounting_feet);
    builder.finish()
  }


  #[inline]
  pub fn reset_mounting_feet(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ResetsSettings::VT_RESET_MOUNTING_FEET, Some(false)).unwrap()}
  }
  #[inline]
  pub fn arms_mounting_reset_mode(&self) -> ArmsMountingResetMode {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ArmsMountingResetMode>(ResetsSettings::VT_ARMS_MOUNTING_RESET_MODE, Some(ArmsMountingResetMode::BACK)).unwrap()}
  }
  #[inline]
  pub fn yaw_reset_smooth_time(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ResetsSettings::VT_YAW_RESET_SMOOTH_TIME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn save_mounting_reset(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ResetsSettings::VT_SAVE_MOUNTING_RESET, Some(false)).unwrap()}
  }
  #[inline]
  pub fn reset_hmd_pitch(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ResetsSettings::VT_RESET_HMD_PITCH, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ResetsSettings<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("reset_mounting_feet", Self::VT_RESET_MOUNTING_FEET, false)?
     .visit_field::<ArmsMountingResetMode>("arms_mounting_reset_mode", Self::VT_ARMS_MOUNTING_RESET_MODE, false)?
     .visit_field::<f32>("yaw_reset_smooth_time", Self::VT_YAW_RESET_SMOOTH_TIME, false)?
     .visit_field::<bool>("save_mounting_reset", Self::VT_SAVE_MOUNTING_RESET, false)?
     .visit_field::<bool>("reset_hmd_pitch", Self::VT_RESET_HMD_PITCH, false)?
     .finish();
    Ok(())
  }
}
pub struct ResetsSettingsArgs {
    pub reset_mounting_feet: bool,
    pub arms_mounting_reset_mode: ArmsMountingResetMode,
    pub yaw_reset_smooth_time: f32,
    pub save_mounting_reset: bool,
    pub reset_hmd_pitch: bool,
}
impl<'a> Default for ResetsSettingsArgs {
  #[inline]
  fn default() -> Self {
    ResetsSettingsArgs {
      reset_mounting_feet: false,
      arms_mounting_reset_mode: ArmsMountingResetMode::BACK,
      yaw_reset_smooth_time: 0.0,
      save_mounting_reset: false,
      reset_hmd_pitch: false,
    }
  }
}

pub struct ResetsSettingsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ResetsSettingsBuilder<'a, 'b> {
  #[inline]
  pub fn add_reset_mounting_feet(&mut self, reset_mounting_feet: bool) {
    self.fbb_.push_slot::<bool>(ResetsSettings::VT_RESET_MOUNTING_FEET, reset_mounting_feet, false);
  }
  #[inline]
  pub fn add_arms_mounting_reset_mode(&mut self, arms_mounting_reset_mode: ArmsMountingResetMode) {
    self.fbb_.push_slot::<ArmsMountingResetMode>(ResetsSettings::VT_ARMS_MOUNTING_RESET_MODE, arms_mounting_reset_mode, ArmsMountingResetMode::BACK);
  }
  #[inline]
  pub fn add_yaw_reset_smooth_time(&mut self, yaw_reset_smooth_time: f32) {
    self.fbb_.push_slot::<f32>(ResetsSettings::VT_YAW_RESET_SMOOTH_TIME, yaw_reset_smooth_time, 0.0);
  }
  #[inline]
  pub fn add_save_mounting_reset(&mut self, save_mounting_reset: bool) {
    self.fbb_.push_slot::<bool>(ResetsSettings::VT_SAVE_MOUNTING_RESET, save_mounting_reset, false);
  }
  #[inline]
  pub fn add_reset_hmd_pitch(&mut self, reset_hmd_pitch: bool) {
    self.fbb_.push_slot::<bool>(ResetsSettings::VT_RESET_HMD_PITCH, reset_hmd_pitch, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ResetsSettingsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ResetsSettingsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ResetsSettings<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ResetsSettings<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ResetsSettings");
      ds.field("reset_mounting_feet", &self.reset_mounting_feet());
      ds.field("arms_mounting_reset_mode", &self.arms_mounting_reset_mode());
      ds.field("yaw_reset_smooth_time", &self.yaw_reset_smooth_time());
      ds.field("save_mounting_reset", &self.save_mounting_reset());
      ds.field("reset_hmd_pitch", &self.reset_hmd_pitch());
      ds.finish()
  }
}
