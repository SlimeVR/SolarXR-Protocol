// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LegTweaksTmpClearOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Clears the legtweaks temporary state back to what the config has.
/// Setting a field to `true` will reset that field.
pub struct LegTweaksTmpClear<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LegTweaksTmpClear<'a> {
  type Inner = LegTweaksTmpClear<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LegTweaksTmpClear<'a> {
  pub const VT_FLOOR_CLIP: flatbuffers::VOffsetT = 4;
  pub const VT_SKATING_CORRECTION: flatbuffers::VOffsetT = 6;
  pub const VT_TOE_SNAP: flatbuffers::VOffsetT = 8;
  pub const VT_FOOT_PLANT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LegTweaksTmpClear { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args LegTweaksTmpClearArgs
  ) -> flatbuffers::WIPOffset<LegTweaksTmpClear<'bldr>> {
    let mut builder = LegTweaksTmpClearBuilder::new(_fbb);
    builder.add_foot_plant(args.foot_plant);
    builder.add_toe_snap(args.toe_snap);
    builder.add_skating_correction(args.skating_correction);
    builder.add_floor_clip(args.floor_clip);
    builder.finish()
  }


  #[inline]
  pub fn floor_clip(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LegTweaksTmpClear::VT_FLOOR_CLIP, Some(false)).unwrap()}
  }
  #[inline]
  pub fn skating_correction(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LegTweaksTmpClear::VT_SKATING_CORRECTION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn toe_snap(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LegTweaksTmpClear::VT_TOE_SNAP, Some(false)).unwrap()}
  }
  #[inline]
  pub fn foot_plant(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LegTweaksTmpClear::VT_FOOT_PLANT, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for LegTweaksTmpClear<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("floor_clip", Self::VT_FLOOR_CLIP, false)?
     .visit_field::<bool>("skating_correction", Self::VT_SKATING_CORRECTION, false)?
     .visit_field::<bool>("toe_snap", Self::VT_TOE_SNAP, false)?
     .visit_field::<bool>("foot_plant", Self::VT_FOOT_PLANT, false)?
     .finish();
    Ok(())
  }
}
pub struct LegTweaksTmpClearArgs {
    pub floor_clip: bool,
    pub skating_correction: bool,
    pub toe_snap: bool,
    pub foot_plant: bool,
}
impl<'a> Default for LegTweaksTmpClearArgs {
  #[inline]
  fn default() -> Self {
    LegTweaksTmpClearArgs {
      floor_clip: false,
      skating_correction: false,
      toe_snap: false,
      foot_plant: false,
    }
  }
}

pub struct LegTweaksTmpClearBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LegTweaksTmpClearBuilder<'a, 'b> {
  #[inline]
  pub fn add_floor_clip(&mut self, floor_clip: bool) {
    self.fbb_.push_slot::<bool>(LegTweaksTmpClear::VT_FLOOR_CLIP, floor_clip, false);
  }
  #[inline]
  pub fn add_skating_correction(&mut self, skating_correction: bool) {
    self.fbb_.push_slot::<bool>(LegTweaksTmpClear::VT_SKATING_CORRECTION, skating_correction, false);
  }
  #[inline]
  pub fn add_toe_snap(&mut self, toe_snap: bool) {
    self.fbb_.push_slot::<bool>(LegTweaksTmpClear::VT_TOE_SNAP, toe_snap, false);
  }
  #[inline]
  pub fn add_foot_plant(&mut self, foot_plant: bool) {
    self.fbb_.push_slot::<bool>(LegTweaksTmpClear::VT_FOOT_PLANT, foot_plant, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LegTweaksTmpClearBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LegTweaksTmpClearBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LegTweaksTmpClear<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LegTweaksTmpClear<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LegTweaksTmpClear");
      ds.field("floor_clip", &self.floor_clip());
      ds.field("skating_correction", &self.skating_correction());
      ds.field("toe_snap", &self.toe_snap());
      ds.field("foot_plant", &self.foot_plant());
      ds.finish()
  }
}
