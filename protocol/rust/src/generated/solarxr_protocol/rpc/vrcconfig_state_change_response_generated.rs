// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VRCConfigStateChangeResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Sent every time the vrchat config state gets updated
/// used to display vrchat missconfig settings to the user
pub struct VRCConfigStateChangeResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VRCConfigStateChangeResponse<'a> {
  type Inner = VRCConfigStateChangeResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VRCConfigStateChangeResponse<'a> {
  pub const VT_IS_SUPPORTED: flatbuffers::VOffsetT = 4;
  pub const VT_VALIDITY: flatbuffers::VOffsetT = 6;
  pub const VT_STATE: flatbuffers::VOffsetT = 8;
  pub const VT_RECOMMENDED: flatbuffers::VOffsetT = 10;
  pub const VT_MUTED: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VRCConfigStateChangeResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args VRCConfigStateChangeResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<VRCConfigStateChangeResponse<'bldr>> {
    let mut builder = VRCConfigStateChangeResponseBuilder::new(_fbb);
    if let Some(x) = args.muted { builder.add_muted(x); }
    if let Some(x) = args.recommended { builder.add_recommended(x); }
    if let Some(x) = args.state { builder.add_state(x); }
    if let Some(x) = args.validity { builder.add_validity(x); }
    builder.add_is_supported(args.is_supported);
    builder.finish()
  }


  #[inline]
  pub fn is_supported(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(VRCConfigStateChangeResponse::VT_IS_SUPPORTED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn validity(&self) -> Option<VRCConfigValidity<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<VRCConfigValidity>>(VRCConfigStateChangeResponse::VT_VALIDITY, None)}
  }
  #[inline]
  pub fn state(&self) -> Option<VRCConfigValues<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<VRCConfigValues>>(VRCConfigStateChangeResponse::VT_STATE, None)}
  }
  #[inline]
  pub fn recommended(&self) -> Option<VRCConfigRecommendedValues<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<VRCConfigRecommendedValues>>(VRCConfigStateChangeResponse::VT_RECOMMENDED, None)}
  }
  #[inline]
  pub fn muted(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(VRCConfigStateChangeResponse::VT_MUTED, None)}
  }
}

impl flatbuffers::Verifiable for VRCConfigStateChangeResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("is_supported", Self::VT_IS_SUPPORTED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VRCConfigValidity>>("validity", Self::VT_VALIDITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VRCConfigValues>>("state", Self::VT_STATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VRCConfigRecommendedValues>>("recommended", Self::VT_RECOMMENDED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("muted", Self::VT_MUTED, false)?
     .finish();
    Ok(())
  }
}
pub struct VRCConfigStateChangeResponseArgs<'a> {
    pub is_supported: bool,
    pub validity: Option<flatbuffers::WIPOffset<VRCConfigValidity<'a>>>,
    pub state: Option<flatbuffers::WIPOffset<VRCConfigValues<'a>>>,
    pub recommended: Option<flatbuffers::WIPOffset<VRCConfigRecommendedValues<'a>>>,
    pub muted: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for VRCConfigStateChangeResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    VRCConfigStateChangeResponseArgs {
      is_supported: false,
      validity: None,
      state: None,
      recommended: None,
      muted: None,
    }
  }
}

pub struct VRCConfigStateChangeResponseBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> VRCConfigStateChangeResponseBuilder<'a, 'b> {
  #[inline]
  pub fn add_is_supported(&mut self, is_supported: bool) {
    self.fbb_.push_slot::<bool>(VRCConfigStateChangeResponse::VT_IS_SUPPORTED, is_supported, false);
  }
  #[inline]
  pub fn add_validity(&mut self, validity: flatbuffers::WIPOffset<VRCConfigValidity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VRCConfigValidity>>(VRCConfigStateChangeResponse::VT_VALIDITY, validity);
  }
  #[inline]
  pub fn add_state(&mut self, state: flatbuffers::WIPOffset<VRCConfigValues<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VRCConfigValues>>(VRCConfigStateChangeResponse::VT_STATE, state);
  }
  #[inline]
  pub fn add_recommended(&mut self, recommended: flatbuffers::WIPOffset<VRCConfigRecommendedValues<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VRCConfigRecommendedValues>>(VRCConfigStateChangeResponse::VT_RECOMMENDED, recommended);
  }
  #[inline]
  pub fn add_muted(&mut self, muted: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VRCConfigStateChangeResponse::VT_MUTED, muted);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> VRCConfigStateChangeResponseBuilder<'a, 'b> {
    let start = _fbb.start_table();
    VRCConfigStateChangeResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VRCConfigStateChangeResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VRCConfigStateChangeResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VRCConfigStateChangeResponse");
      ds.field("is_supported", &self.is_supported());
      ds.field("validity", &self.validity());
      ds.field("state", &self.state());
      ds.field("recommended", &self.recommended());
      ds.field("muted", &self.muted());
      ds.finish()
  }
}
