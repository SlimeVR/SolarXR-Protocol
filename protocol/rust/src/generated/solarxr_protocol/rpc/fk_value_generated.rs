// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_FK_VALUE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_FK_VALUE: u8 = 6;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_FK_VALUE: [FkValue; 7] = [
  FkValue::NONE,
  FkValue::WAIST_SPINE_AVERAGE,
  FkValue::WAIST_PELVIS_AVERAGE,
  FkValue::HIP_PELVIS_AVERAGE,
  FkValue::PELVIS_HIP_AVERAGE,
  FkValue::WAIST_TRACKER_PELVIS_AVERAGE,
  FkValue::KNEE_TRACKER_ANKLE_AVERAGE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct FkValue(pub u8);
#[allow(non_upper_case_globals)]
impl FkValue {
  pub const NONE: Self = Self(0);
  pub const WAIST_SPINE_AVERAGE: Self = Self(1);
  pub const WAIST_PELVIS_AVERAGE: Self = Self(2);
  pub const HIP_PELVIS_AVERAGE: Self = Self(3);
  pub const PELVIS_HIP_AVERAGE: Self = Self(4);
  pub const WAIST_TRACKER_PELVIS_AVERAGE: Self = Self(5);
  pub const KNEE_TRACKER_ANKLE_AVERAGE: Self = Self(6);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 6;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::WAIST_SPINE_AVERAGE,
    Self::WAIST_PELVIS_AVERAGE,
    Self::HIP_PELVIS_AVERAGE,
    Self::PELVIS_HIP_AVERAGE,
    Self::WAIST_TRACKER_PELVIS_AVERAGE,
    Self::KNEE_TRACKER_ANKLE_AVERAGE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::WAIST_SPINE_AVERAGE => Some("WAIST_SPINE_AVERAGE"),
      Self::WAIST_PELVIS_AVERAGE => Some("WAIST_PELVIS_AVERAGE"),
      Self::HIP_PELVIS_AVERAGE => Some("HIP_PELVIS_AVERAGE"),
      Self::PELVIS_HIP_AVERAGE => Some("PELVIS_HIP_AVERAGE"),
      Self::WAIST_TRACKER_PELVIS_AVERAGE => Some("WAIST_TRACKER_PELVIS_AVERAGE"),
      Self::KNEE_TRACKER_ANKLE_AVERAGE => Some("KNEE_TRACKER_ANKLE_AVERAGE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for FkValue {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for FkValue {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for FkValue {
    type Output = FkValue;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for FkValue {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for FkValue {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for FkValue {}
