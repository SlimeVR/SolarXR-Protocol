// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum OTAFirmwareUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OTAFirmwareUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OTAFirmwareUpdate<'a> {
  type Inner = OTAFirmwareUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OTAFirmwareUpdate<'a> {
  pub const VT_DEVICE_ID: flatbuffers::VOffsetT = 4;
  pub const VT_FIRMWARE_PART: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OTAFirmwareUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args OTAFirmwareUpdateArgs<'args>
  ) -> flatbuffers::WIPOffset<OTAFirmwareUpdate<'bldr>> {
    let mut builder = OTAFirmwareUpdateBuilder::new(_fbb);
    if let Some(x) = args.firmware_part { builder.add_firmware_part(x); }
    if let Some(x) = args.device_id { builder.add_device_id(x); }
    builder.finish()
  }


  /// id of the device, this refer to the actual DeviceId from the protocol
  #[inline]
  pub fn device_id(&self) -> Option<&'a super::datatypes::DeviceId> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::datatypes::DeviceId>(OTAFirmwareUpdate::VT_DEVICE_ID, None)}
  }
  /// A table containing the url and offset of the firmware bin file
  #[inline]
  pub fn firmware_part(&self) -> Option<FirmwarePart<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FirmwarePart>>(OTAFirmwareUpdate::VT_FIRMWARE_PART, None)}
  }
}

impl flatbuffers::Verifiable for OTAFirmwareUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<super::datatypes::DeviceId>("device_id", Self::VT_DEVICE_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<FirmwarePart>>("firmware_part", Self::VT_FIRMWARE_PART, false)?
     .finish();
    Ok(())
  }
}
pub struct OTAFirmwareUpdateArgs<'a> {
    pub device_id: Option<&'a super::datatypes::DeviceId>,
    pub firmware_part: Option<flatbuffers::WIPOffset<FirmwarePart<'a>>>,
}
impl<'a> Default for OTAFirmwareUpdateArgs<'a> {
  #[inline]
  fn default() -> Self {
    OTAFirmwareUpdateArgs {
      device_id: None,
      firmware_part: None,
    }
  }
}

pub struct OTAFirmwareUpdateBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> OTAFirmwareUpdateBuilder<'a, 'b> {
  #[inline]
  pub fn add_device_id(&mut self, device_id: &super::datatypes::DeviceId) {
    self.fbb_.push_slot_always::<&super::datatypes::DeviceId>(OTAFirmwareUpdate::VT_DEVICE_ID, device_id);
  }
  #[inline]
  pub fn add_firmware_part(&mut self, firmware_part: flatbuffers::WIPOffset<FirmwarePart<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FirmwarePart>>(OTAFirmwareUpdate::VT_FIRMWARE_PART, firmware_part);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> OTAFirmwareUpdateBuilder<'a, 'b> {
    let start = _fbb.start_table();
    OTAFirmwareUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OTAFirmwareUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OTAFirmwareUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OTAFirmwareUpdate");
      ds.field("device_id", &self.device_id());
      ds.field("firmware_part", &self.firmware_part());
      ds.finish()
  }
}
