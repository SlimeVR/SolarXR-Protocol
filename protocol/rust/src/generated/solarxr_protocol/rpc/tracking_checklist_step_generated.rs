// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TrackingChecklistStepOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TrackingChecklistStep<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TrackingChecklistStep<'a> {
  type Inner = TrackingChecklistStep<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TrackingChecklistStep<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_VALID: flatbuffers::VOffsetT = 6;
  pub const VT_ENABLED: flatbuffers::VOffsetT = 8;
  pub const VT_VISIBILITY: flatbuffers::VOffsetT = 10;
  pub const VT_OPTIONAL: flatbuffers::VOffsetT = 12;
  pub const VT_IGNORABLE: flatbuffers::VOffsetT = 14;
  pub const VT_EXTRA_DATA_TYPE: flatbuffers::VOffsetT = 16;
  pub const VT_EXTRA_DATA: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TrackingChecklistStep { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TrackingChecklistStepArgs
  ) -> flatbuffers::WIPOffset<TrackingChecklistStep<'bldr>> {
    let mut builder = TrackingChecklistStepBuilder::new(_fbb);
    if let Some(x) = args.extra_data { builder.add_extra_data(x); }
    builder.add_extra_data_type(args.extra_data_type);
    builder.add_ignorable(args.ignorable);
    builder.add_optional(args.optional);
    builder.add_visibility(args.visibility);
    builder.add_enabled(args.enabled);
    builder.add_valid(args.valid);
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> TrackingChecklistStepId {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TrackingChecklistStepId>(TrackingChecklistStep::VT_ID, Some(TrackingChecklistStepId::UNKNOWN)).unwrap()}
  }
  #[inline]
  pub fn valid(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TrackingChecklistStep::VT_VALID, Some(false)).unwrap()}
  }
  #[inline]
  pub fn enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TrackingChecklistStep::VT_ENABLED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn visibility(&self) -> TrackingChecklistStepVisibility {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TrackingChecklistStepVisibility>(TrackingChecklistStep::VT_VISIBILITY, Some(TrackingChecklistStepVisibility::ALWAYS)).unwrap()}
  }
  #[inline]
  pub fn optional(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TrackingChecklistStep::VT_OPTIONAL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ignorable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TrackingChecklistStep::VT_IGNORABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn extra_data_type(&self) -> TrackingChecklistExtraData {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TrackingChecklistExtraData>(TrackingChecklistStep::VT_EXTRA_DATA_TYPE, Some(TrackingChecklistExtraData::NONE)).unwrap()}
  }
  #[inline]
  pub fn extra_data(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(TrackingChecklistStep::VT_EXTRA_DATA, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_tracking_checklist_tracker_reset(&self) -> Option<TrackingChecklistTrackerReset<'a>> {
    if self.extra_data_type() == TrackingChecklistExtraData::TrackingChecklistTrackerReset {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TrackingChecklistTrackerReset::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_tracking_checklist_tracker_error(&self) -> Option<TrackingChecklistTrackerError<'a>> {
    if self.extra_data_type() == TrackingChecklistExtraData::TrackingChecklistTrackerError {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TrackingChecklistTrackerError::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_tracking_checklist_steam_vrdisconnected(&self) -> Option<TrackingChecklistSteamVRDisconnected<'a>> {
    if self.extra_data_type() == TrackingChecklistExtraData::TrackingChecklistSteamVRDisconnected {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TrackingChecklistSteamVRDisconnected::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_tracking_checklist_unassigned_hmd(&self) -> Option<TrackingChecklistUnassignedHMD<'a>> {
    if self.extra_data_type() == TrackingChecklistExtraData::TrackingChecklistUnassignedHMD {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TrackingChecklistUnassignedHMD::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_tracking_checklist_need_calibration(&self) -> Option<TrackingChecklistNeedCalibration<'a>> {
    if self.extra_data_type() == TrackingChecklistExtraData::TrackingChecklistNeedCalibration {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TrackingChecklistNeedCalibration::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn extra_data_as_tracking_checklist_public_networks(&self) -> Option<TrackingChecklistPublicNetworks<'a>> {
    if self.extra_data_type() == TrackingChecklistExtraData::TrackingChecklistPublicNetworks {
      self.extra_data().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TrackingChecklistPublicNetworks::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for TrackingChecklistStep<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<TrackingChecklistStepId>("id", Self::VT_ID, false)?
     .visit_field::<bool>("valid", Self::VT_VALID, false)?
     .visit_field::<bool>("enabled", Self::VT_ENABLED, false)?
     .visit_field::<TrackingChecklistStepVisibility>("visibility", Self::VT_VISIBILITY, false)?
     .visit_field::<bool>("optional", Self::VT_OPTIONAL, false)?
     .visit_field::<bool>("ignorable", Self::VT_IGNORABLE, false)?
     .visit_union::<TrackingChecklistExtraData, _>("extra_data_type", Self::VT_EXTRA_DATA_TYPE, "extra_data", Self::VT_EXTRA_DATA, false, |key, v, pos| {
        match key {
          TrackingChecklistExtraData::TrackingChecklistTrackerReset => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TrackingChecklistTrackerReset>>("TrackingChecklistExtraData::TrackingChecklistTrackerReset", pos),
          TrackingChecklistExtraData::TrackingChecklistTrackerError => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TrackingChecklistTrackerError>>("TrackingChecklistExtraData::TrackingChecklistTrackerError", pos),
          TrackingChecklistExtraData::TrackingChecklistSteamVRDisconnected => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TrackingChecklistSteamVRDisconnected>>("TrackingChecklistExtraData::TrackingChecklistSteamVRDisconnected", pos),
          TrackingChecklistExtraData::TrackingChecklistUnassignedHMD => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TrackingChecklistUnassignedHMD>>("TrackingChecklistExtraData::TrackingChecklistUnassignedHMD", pos),
          TrackingChecklistExtraData::TrackingChecklistNeedCalibration => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TrackingChecklistNeedCalibration>>("TrackingChecklistExtraData::TrackingChecklistNeedCalibration", pos),
          TrackingChecklistExtraData::TrackingChecklistPublicNetworks => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TrackingChecklistPublicNetworks>>("TrackingChecklistExtraData::TrackingChecklistPublicNetworks", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct TrackingChecklistStepArgs {
    pub id: TrackingChecklistStepId,
    pub valid: bool,
    pub enabled: bool,
    pub visibility: TrackingChecklistStepVisibility,
    pub optional: bool,
    pub ignorable: bool,
    pub extra_data_type: TrackingChecklistExtraData,
    pub extra_data: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for TrackingChecklistStepArgs {
  #[inline]
  fn default() -> Self {
    TrackingChecklistStepArgs {
      id: TrackingChecklistStepId::UNKNOWN,
      valid: false,
      enabled: false,
      visibility: TrackingChecklistStepVisibility::ALWAYS,
      optional: false,
      ignorable: false,
      extra_data_type: TrackingChecklistExtraData::NONE,
      extra_data: None,
    }
  }
}

pub struct TrackingChecklistStepBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TrackingChecklistStepBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: TrackingChecklistStepId) {
    self.fbb_.push_slot::<TrackingChecklistStepId>(TrackingChecklistStep::VT_ID, id, TrackingChecklistStepId::UNKNOWN);
  }
  #[inline]
  pub fn add_valid(&mut self, valid: bool) {
    self.fbb_.push_slot::<bool>(TrackingChecklistStep::VT_VALID, valid, false);
  }
  #[inline]
  pub fn add_enabled(&mut self, enabled: bool) {
    self.fbb_.push_slot::<bool>(TrackingChecklistStep::VT_ENABLED, enabled, false);
  }
  #[inline]
  pub fn add_visibility(&mut self, visibility: TrackingChecklistStepVisibility) {
    self.fbb_.push_slot::<TrackingChecklistStepVisibility>(TrackingChecklistStep::VT_VISIBILITY, visibility, TrackingChecklistStepVisibility::ALWAYS);
  }
  #[inline]
  pub fn add_optional(&mut self, optional: bool) {
    self.fbb_.push_slot::<bool>(TrackingChecklistStep::VT_OPTIONAL, optional, false);
  }
  #[inline]
  pub fn add_ignorable(&mut self, ignorable: bool) {
    self.fbb_.push_slot::<bool>(TrackingChecklistStep::VT_IGNORABLE, ignorable, false);
  }
  #[inline]
  pub fn add_extra_data_type(&mut self, extra_data_type: TrackingChecklistExtraData) {
    self.fbb_.push_slot::<TrackingChecklistExtraData>(TrackingChecklistStep::VT_EXTRA_DATA_TYPE, extra_data_type, TrackingChecklistExtraData::NONE);
  }
  #[inline]
  pub fn add_extra_data(&mut self, extra_data: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackingChecklistStep::VT_EXTRA_DATA, extra_data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TrackingChecklistStepBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TrackingChecklistStepBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TrackingChecklistStep<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TrackingChecklistStep<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TrackingChecklistStep");
      ds.field("id", &self.id());
      ds.field("valid", &self.valid());
      ds.field("enabled", &self.enabled());
      ds.field("visibility", &self.visibility());
      ds.field("optional", &self.optional());
      ds.field("ignorable", &self.ignorable());
      ds.field("extra_data_type", &self.extra_data_type());
      match self.extra_data_type() {
        TrackingChecklistExtraData::TrackingChecklistTrackerReset => {
          if let Some(x) = self.extra_data_as_tracking_checklist_tracker_reset() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TrackingChecklistExtraData::TrackingChecklistTrackerError => {
          if let Some(x) = self.extra_data_as_tracking_checklist_tracker_error() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TrackingChecklistExtraData::TrackingChecklistSteamVRDisconnected => {
          if let Some(x) = self.extra_data_as_tracking_checklist_steam_vrdisconnected() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TrackingChecklistExtraData::TrackingChecklistUnassignedHMD => {
          if let Some(x) = self.extra_data_as_tracking_checklist_unassigned_hmd() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TrackingChecklistExtraData::TrackingChecklistNeedCalibration => {
          if let Some(x) = self.extra_data_as_tracking_checklist_need_calibration() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        TrackingChecklistExtraData::TrackingChecklistPublicNetworks => {
          if let Some(x) = self.extra_data_as_tracking_checklist_public_networks() {
            ds.field("extra_data", &x)
          } else {
            ds.field("extra_data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("extra_data", &x)
        },
      };
      ds.finish()
  }
}
