// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FirmwarePartOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FirmwarePart<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FirmwarePart<'a> {
  type Inner = FirmwarePart<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FirmwarePart<'a> {
  pub const VT_URL: flatbuffers::VOffsetT = 4;
  pub const VT_OFFSET: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FirmwarePart { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FirmwarePartArgs<'args>
  ) -> flatbuffers::WIPOffset<FirmwarePart<'bldr>> {
    let mut builder = FirmwarePartBuilder::new(_fbb);
    builder.add_offset(args.offset);
    if let Some(x) = args.url { builder.add_url(x); }
    builder.finish()
  }


  /// Url of the firmware bin to download
  #[inline]
  pub fn url(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FirmwarePart::VT_URL, None)}
  }
  /// Offset of the firmware, used when flashing to the mcu, it indicates where to write this file in memory
  /// Will be ignored in the case of OTA flashing
  #[inline]
  pub fn offset(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FirmwarePart::VT_OFFSET, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FirmwarePart<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("url", Self::VT_URL, false)?
     .visit_field::<u32>("offset", Self::VT_OFFSET, false)?
     .finish();
    Ok(())
  }
}
pub struct FirmwarePartArgs<'a> {
    pub url: Option<flatbuffers::WIPOffset<&'a str>>,
    pub offset: u32,
}
impl<'a> Default for FirmwarePartArgs<'a> {
  #[inline]
  fn default() -> Self {
    FirmwarePartArgs {
      url: None,
      offset: 0,
    }
  }
}

pub struct FirmwarePartBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FirmwarePartBuilder<'a, 'b> {
  #[inline]
  pub fn add_url(&mut self, url: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FirmwarePart::VT_URL, url);
  }
  #[inline]
  pub fn add_offset(&mut self, offset: u32) {
    self.fbb_.push_slot::<u32>(FirmwarePart::VT_OFFSET, offset, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FirmwarePartBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FirmwarePartBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FirmwarePart<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FirmwarePart<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FirmwarePart");
      ds.field("url", &self.url());
      ds.field("offset", &self.offset());
      ds.finish()
  }
}
