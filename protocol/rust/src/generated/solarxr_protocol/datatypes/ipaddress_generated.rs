// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
// struct IPAddress, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct IPAddress(pub [u8; 4]);
impl Default for IPAddress { 
  fn default() -> Self { 
    Self([0; 4])
  }
}
impl core::fmt::Debug for IPAddress {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("IPAddress")
      .field("addr", &self.addr())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for IPAddress {}
impl flatbuffers::SafeSliceAccess for IPAddress {}
impl<'a> flatbuffers::Follow<'a> for IPAddress {
  type Inner = &'a IPAddress;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a IPAddress>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a IPAddress {
  type Inner = &'a IPAddress;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<IPAddress>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for IPAddress {
    type Output = IPAddress;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::core::slice::from_raw_parts(self as *const IPAddress as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b IPAddress {
    type Output = IPAddress;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::core::slice::from_raw_parts(*self as *const IPAddress as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for IPAddress {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> IPAddress {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    addr: u32,
  ) -> Self {
    let mut s = Self([0; 4]);
    s.set_addr(addr);
    s
  }

  pub fn addr(&self) -> u32 {
    let mut mem = core::mem::MaybeUninit::<u32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<u32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_addr(&mut self, x: u32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const u32 as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<u32>(),
      );
    }
  }

}

