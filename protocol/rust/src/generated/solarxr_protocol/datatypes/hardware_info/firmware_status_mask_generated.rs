// automatically generated by the FlatBuffers compiler, do not modify
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FirmwareStatusMaskOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A mask of the data in `FirmwareStatus`
pub struct FirmwareStatusMask<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FirmwareStatusMask<'a> {
  type Inner = FirmwareStatusMask<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> FirmwareStatusMask<'a> {
  pub const VT_ERROR_STATUS: flatbuffers::VOffsetT = 4;
  pub const VT_TPS: flatbuffers::VOffsetT = 6;
  pub const VT_PING: flatbuffers::VOffsetT = 8;
  pub const VT_RSSI: flatbuffers::VOffsetT = 10;
  pub const VT_MCU_TEMP: flatbuffers::VOffsetT = 12;
  pub const VT_BATTERY_VOLTAGE: flatbuffers::VOffsetT = 14;
  pub const VT_BATTERY_PCT_ESTIMATE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FirmwareStatusMask { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FirmwareStatusMaskArgs
  ) -> flatbuffers::WIPOffset<FirmwareStatusMask<'bldr>> {
    let mut builder = FirmwareStatusMaskBuilder::new(_fbb);
    builder.add_battery_pct_estimate(args.battery_pct_estimate);
    builder.add_battery_voltage(args.battery_voltage);
    builder.add_mcu_temp(args.mcu_temp);
    builder.add_rssi(args.rssi);
    builder.add_ping(args.ping);
    builder.add_tps(args.tps);
    builder.add_error_status(args.error_status);
    builder.finish()
  }


  #[inline]
  pub fn error_status(&self) -> bool {
    self._tab.get::<bool>(FirmwareStatusMask::VT_ERROR_STATUS, Some(false)).unwrap()
  }
  #[inline]
  pub fn tps(&self) -> bool {
    self._tab.get::<bool>(FirmwareStatusMask::VT_TPS, Some(false)).unwrap()
  }
  #[inline]
  pub fn ping(&self) -> bool {
    self._tab.get::<bool>(FirmwareStatusMask::VT_PING, Some(false)).unwrap()
  }
  #[inline]
  pub fn rssi(&self) -> bool {
    self._tab.get::<bool>(FirmwareStatusMask::VT_RSSI, Some(false)).unwrap()
  }
  #[inline]
  pub fn mcu_temp(&self) -> bool {
    self._tab.get::<bool>(FirmwareStatusMask::VT_MCU_TEMP, Some(false)).unwrap()
  }
  #[inline]
  pub fn battery_voltage(&self) -> bool {
    self._tab.get::<bool>(FirmwareStatusMask::VT_BATTERY_VOLTAGE, Some(false)).unwrap()
  }
  #[inline]
  pub fn battery_pct_estimate(&self) -> bool {
    self._tab.get::<bool>(FirmwareStatusMask::VT_BATTERY_PCT_ESTIMATE, Some(false)).unwrap()
  }
}

impl flatbuffers::Verifiable for FirmwareStatusMask<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("error_status", Self::VT_ERROR_STATUS, false)?
     .visit_field::<bool>("tps", Self::VT_TPS, false)?
     .visit_field::<bool>("ping", Self::VT_PING, false)?
     .visit_field::<bool>("rssi", Self::VT_RSSI, false)?
     .visit_field::<bool>("mcu_temp", Self::VT_MCU_TEMP, false)?
     .visit_field::<bool>("battery_voltage", Self::VT_BATTERY_VOLTAGE, false)?
     .visit_field::<bool>("battery_pct_estimate", Self::VT_BATTERY_PCT_ESTIMATE, false)?
     .finish();
    Ok(())
  }
}
pub struct FirmwareStatusMaskArgs {
    pub error_status: bool,
    pub tps: bool,
    pub ping: bool,
    pub rssi: bool,
    pub mcu_temp: bool,
    pub battery_voltage: bool,
    pub battery_pct_estimate: bool,
}
impl<'a> Default for FirmwareStatusMaskArgs {
  #[inline]
  fn default() -> Self {
    FirmwareStatusMaskArgs {
      error_status: false,
      tps: false,
      ping: false,
      rssi: false,
      mcu_temp: false,
      battery_voltage: false,
      battery_pct_estimate: false,
    }
  }
}

pub struct FirmwareStatusMaskBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FirmwareStatusMaskBuilder<'a, 'b> {
  #[inline]
  pub fn add_error_status(&mut self, error_status: bool) {
    self.fbb_.push_slot::<bool>(FirmwareStatusMask::VT_ERROR_STATUS, error_status, false);
  }
  #[inline]
  pub fn add_tps(&mut self, tps: bool) {
    self.fbb_.push_slot::<bool>(FirmwareStatusMask::VT_TPS, tps, false);
  }
  #[inline]
  pub fn add_ping(&mut self, ping: bool) {
    self.fbb_.push_slot::<bool>(FirmwareStatusMask::VT_PING, ping, false);
  }
  #[inline]
  pub fn add_rssi(&mut self, rssi: bool) {
    self.fbb_.push_slot::<bool>(FirmwareStatusMask::VT_RSSI, rssi, false);
  }
  #[inline]
  pub fn add_mcu_temp(&mut self, mcu_temp: bool) {
    self.fbb_.push_slot::<bool>(FirmwareStatusMask::VT_MCU_TEMP, mcu_temp, false);
  }
  #[inline]
  pub fn add_battery_voltage(&mut self, battery_voltage: bool) {
    self.fbb_.push_slot::<bool>(FirmwareStatusMask::VT_BATTERY_VOLTAGE, battery_voltage, false);
  }
  #[inline]
  pub fn add_battery_pct_estimate(&mut self, battery_pct_estimate: bool) {
    self.fbb_.push_slot::<bool>(FirmwareStatusMask::VT_BATTERY_PCT_ESTIMATE, battery_pct_estimate, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FirmwareStatusMaskBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FirmwareStatusMaskBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FirmwareStatusMask<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FirmwareStatusMask<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FirmwareStatusMask");
      ds.field("error_status", &self.error_status());
      ds.field("tps", &self.tps());
      ds.field("ping", &self.ping());
      ds.field("rssi", &self.rssi());
      ds.field("mcu_temp", &self.mcu_temp());
      ds.field("battery_voltage", &self.battery_voltage());
      ds.field("battery_pct_estimate", &self.battery_pct_estimate());
      ds.finish()
  }
}
