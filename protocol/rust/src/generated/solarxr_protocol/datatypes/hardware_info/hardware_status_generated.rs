// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum HardwareStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

/// Mostly-dynamic status info about a tracked device's firmware
pub struct HardwareStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HardwareStatus<'a> {
  type Inner = HardwareStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> HardwareStatus<'a> {
  pub const VT_ERROR_STATUS: flatbuffers::VOffsetT = 4;
  pub const VT_TPS: flatbuffers::VOffsetT = 6;
  pub const VT_PING: flatbuffers::VOffsetT = 8;
  pub const VT_RSSI: flatbuffers::VOffsetT = 10;
  pub const VT_MCU_TEMP: flatbuffers::VOffsetT = 12;
  pub const VT_BATTERY_VOLTAGE: flatbuffers::VOffsetT = 14;
  pub const VT_BATTERY_PCT_ESTIMATE: flatbuffers::VOffsetT = 16;
  pub const VT_LOG_DATA: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HardwareStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args HardwareStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<HardwareStatus<'bldr>> {
    let mut builder = HardwareStatusBuilder::new(_fbb);
    if let Some(x) = args.log_data { builder.add_log_data(x); }
    if let Some(x) = args.battery_voltage { builder.add_battery_voltage(x); }
    if let Some(x) = args.mcu_temp { builder.add_mcu_temp(x); }
    if let Some(x) = args.rssi { builder.add_rssi(x); }
    if let Some(x) = args.ping { builder.add_ping(x); }
    if let Some(x) = args.battery_pct_estimate { builder.add_battery_pct_estimate(x); }
    if let Some(x) = args.tps { builder.add_tps(x); }
    if let Some(x) = args.error_status { builder.add_error_status(x); }
    builder.finish()
  }


  #[inline]
  pub fn error_status(&self) -> Option<super::FirmwareErrorCode> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::FirmwareErrorCode>(HardwareStatus::VT_ERROR_STATUS, None)}
  }
  #[inline]
  pub fn tps(&self) -> Option<u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(HardwareStatus::VT_TPS, None)}
  }
  #[inline]
  pub fn ping(&self) -> Option<u16> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(HardwareStatus::VT_PING, None)}
  }
  /// â€œReceived Signal Strength Indicator" between device and wifi adapter in dBm
  #[inline]
  pub fn rssi(&self) -> Option<i16> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i16>(HardwareStatus::VT_RSSI, None)}
  }
  /// Temperature in degrees celsius
  #[inline]
  pub fn mcu_temp(&self) -> Option<f32> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(HardwareStatus::VT_MCU_TEMP, None)}
  }
  #[inline]
  pub fn battery_voltage(&self) -> Option<f32> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(HardwareStatus::VT_BATTERY_VOLTAGE, None)}
  }
  #[inline]
  pub fn battery_pct_estimate(&self) -> Option<u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(HardwareStatus::VT_BATTERY_PCT_ESTIMATE, None)}
  }
  #[inline]
  pub fn log_data(&self) -> Option<super::LogData<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::LogData>>(HardwareStatus::VT_LOG_DATA, None)}
  }
}

impl flatbuffers::Verifiable for HardwareStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<super::FirmwareErrorCode>("error_status", Self::VT_ERROR_STATUS, false)?
     .visit_field::<u8>("tps", Self::VT_TPS, false)?
     .visit_field::<u16>("ping", Self::VT_PING, false)?
     .visit_field::<i16>("rssi", Self::VT_RSSI, false)?
     .visit_field::<f32>("mcu_temp", Self::VT_MCU_TEMP, false)?
     .visit_field::<f32>("battery_voltage", Self::VT_BATTERY_VOLTAGE, false)?
     .visit_field::<u8>("battery_pct_estimate", Self::VT_BATTERY_PCT_ESTIMATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::LogData>>("log_data", Self::VT_LOG_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct HardwareStatusArgs<'a> {
    pub error_status: Option<super::FirmwareErrorCode>,
    pub tps: Option<u8>,
    pub ping: Option<u16>,
    pub rssi: Option<i16>,
    pub mcu_temp: Option<f32>,
    pub battery_voltage: Option<f32>,
    pub battery_pct_estimate: Option<u8>,
    pub log_data: Option<flatbuffers::WIPOffset<super::LogData<'a>>>,
}
impl<'a> Default for HardwareStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    HardwareStatusArgs {
      error_status: None,
      tps: None,
      ping: None,
      rssi: None,
      mcu_temp: None,
      battery_voltage: None,
      battery_pct_estimate: None,
      log_data: None,
    }
  }
}

pub struct HardwareStatusBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HardwareStatusBuilder<'a, 'b> {
  #[inline]
  pub fn add_error_status(&mut self, error_status: super::FirmwareErrorCode) {
    self.fbb_.push_slot_always::<super::FirmwareErrorCode>(HardwareStatus::VT_ERROR_STATUS, error_status);
  }
  #[inline]
  pub fn add_tps(&mut self, tps: u8) {
    self.fbb_.push_slot_always::<u8>(HardwareStatus::VT_TPS, tps);
  }
  #[inline]
  pub fn add_ping(&mut self, ping: u16) {
    self.fbb_.push_slot_always::<u16>(HardwareStatus::VT_PING, ping);
  }
  #[inline]
  pub fn add_rssi(&mut self, rssi: i16) {
    self.fbb_.push_slot_always::<i16>(HardwareStatus::VT_RSSI, rssi);
  }
  #[inline]
  pub fn add_mcu_temp(&mut self, mcu_temp: f32) {
    self.fbb_.push_slot_always::<f32>(HardwareStatus::VT_MCU_TEMP, mcu_temp);
  }
  #[inline]
  pub fn add_battery_voltage(&mut self, battery_voltage: f32) {
    self.fbb_.push_slot_always::<f32>(HardwareStatus::VT_BATTERY_VOLTAGE, battery_voltage);
  }
  #[inline]
  pub fn add_battery_pct_estimate(&mut self, battery_pct_estimate: u8) {
    self.fbb_.push_slot_always::<u8>(HardwareStatus::VT_BATTERY_PCT_ESTIMATE, battery_pct_estimate);
  }
  #[inline]
  pub fn add_log_data(&mut self, log_data: flatbuffers::WIPOffset<super::LogData<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::LogData>>(HardwareStatus::VT_LOG_DATA, log_data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HardwareStatusBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HardwareStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HardwareStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HardwareStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HardwareStatus");
      ds.field("error_status", &self.error_status());
      ds.field("tps", &self.tps());
      ds.field("ping", &self.ping());
      ds.field("rssi", &self.rssi());
      ds.field("mcu_temp", &self.mcu_temp());
      ds.field("battery_voltage", &self.battery_voltage());
      ds.field("battery_pct_estimate", &self.battery_pct_estimate());
      ds.field("log_data", &self.log_data());
      ds.finish()
  }
}
