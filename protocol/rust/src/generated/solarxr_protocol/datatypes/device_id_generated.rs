// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
/// A unique ID for the device. IDs are not guaranteed to be the same after
/// the connection is terminated.
// struct DeviceId, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct DeviceId(pub [u8; 1]);
impl Default for DeviceId { 
  fn default() -> Self { 
    Self([0; 1])
  }
}
impl core::fmt::Debug for DeviceId {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("DeviceId")
      .field("id", &self.id())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for DeviceId {}
impl<'a> flatbuffers::Follow<'a> for DeviceId {
  type Inner = &'a DeviceId;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a DeviceId>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a DeviceId {
  type Inner = &'a DeviceId;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<DeviceId>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for DeviceId {
    type Output = DeviceId;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const DeviceId as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for DeviceId {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> DeviceId {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    id: u8,
  ) -> Self {
    let mut s = Self([0; 1]);
    s.set_id(id);
    s
  }

  pub fn id(&self) -> u8 {
    let mut mem = core::mem::MaybeUninit::<<u8 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_id(&mut self, x: u8) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u8 as EndianScalar>::Scalar>(),
      );
    }
  }

}

