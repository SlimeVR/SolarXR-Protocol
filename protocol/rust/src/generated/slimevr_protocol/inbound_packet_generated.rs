// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum InboundPacketOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct InboundPacket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for InboundPacket<'a> {
  type Inner = InboundPacket<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> InboundPacket<'a> {
  pub const VT_ACKNOWLEDGE_ME: flatbuffers::VOffsetT = 4;
  pub const VT_PACKET_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_PACKET: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    InboundPacket { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args InboundPacketArgs
  ) -> flatbuffers::WIPOffset<InboundPacket<'bldr>> {
    let mut builder = InboundPacketBuilder::new(_fbb);
    if let Some(x) = args.packet { builder.add_packet(x); }
    builder.add_packet_type(args.packet_type);
    builder.add_acknowledge_me(args.acknowledge_me);
    builder.finish()
  }


  #[inline]
  pub fn acknowledge_me(&self) -> bool {
    self._tab.get::<bool>(InboundPacket::VT_ACKNOWLEDGE_ME, Some(false)).unwrap()
  }
  #[inline]
  pub fn packet_type(&self) -> InboundUnion {
    self._tab.get::<InboundUnion>(InboundPacket::VT_PACKET_TYPE, Some(InboundUnion::NONE)).unwrap()
  }
  #[inline]
  pub fn packet(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(InboundPacket::VT_PACKET, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn packet_as_slimevr_protocol_rpc_heartbeat_request(&self) -> Option<rpc::HeartbeatRequest<'a>> {
    if self.packet_type() == InboundUnion::slimevr_protocol_rpc_HeartbeatRequest {
      self.packet().map(rpc::HeartbeatRequest::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn packet_as_slimevr_protocol_rpc_reset_request(&self) -> Option<rpc::ResetRequest<'a>> {
    if self.packet_type() == InboundUnion::slimevr_protocol_rpc_ResetRequest {
      self.packet().map(rpc::ResetRequest::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn packet_as_slimevr_protocol_rpc_assign_tracker_request(&self) -> Option<rpc::AssignTrackerRequest<'a>> {
    if self.packet_type() == InboundUnion::slimevr_protocol_rpc_AssignTrackerRequest {
      self.packet().map(rpc::AssignTrackerRequest::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn packet_as_slimevr_protocol_rpc_settings_request(&self) -> Option<rpc::SettingsRequest<'a>> {
    if self.packet_type() == InboundUnion::slimevr_protocol_rpc_SettingsRequest {
      self.packet().map(rpc::SettingsRequest::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn packet_as_slimevr_protocol_rpc_change_settings_request(&self) -> Option<rpc::ChangeSettingsRequest<'a>> {
    if self.packet_type() == InboundUnion::slimevr_protocol_rpc_ChangeSettingsRequest {
      self.packet().map(rpc::ChangeSettingsRequest::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn packet_as_slimevr_protocol_data_feed_poll_data_feed(&self) -> Option<data_feed::PollDataFeed<'a>> {
    if self.packet_type() == InboundUnion::slimevr_protocol_data_feed_PollDataFeed {
      self.packet().map(data_feed::PollDataFeed::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn packet_as_slimevr_protocol_data_feed_data_feed_request(&self) -> Option<data_feed::DataFeedRequest<'a>> {
    if self.packet_type() == InboundUnion::slimevr_protocol_data_feed_DataFeedRequest {
      self.packet().map(data_feed::DataFeedRequest::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn packet_as_slimevr_protocol_data_feed_data_feed_update(&self) -> Option<data_feed::DataFeedUpdate<'a>> {
    if self.packet_type() == InboundUnion::slimevr_protocol_data_feed_DataFeedUpdate {
      self.packet().map(data_feed::DataFeedUpdate::init_from_table)
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for InboundPacket<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("acknowledge_me", Self::VT_ACKNOWLEDGE_ME, false)?
     .visit_union::<InboundUnion, _>("packet_type", Self::VT_PACKET_TYPE, "packet", Self::VT_PACKET, false, |key, v, pos| {
        match key {
          InboundUnion::slimevr_protocol_rpc_HeartbeatRequest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<rpc::HeartbeatRequest>>("InboundUnion::slimevr_protocol_rpc_HeartbeatRequest", pos),
          InboundUnion::slimevr_protocol_rpc_ResetRequest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<rpc::ResetRequest>>("InboundUnion::slimevr_protocol_rpc_ResetRequest", pos),
          InboundUnion::slimevr_protocol_rpc_AssignTrackerRequest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<rpc::AssignTrackerRequest>>("InboundUnion::slimevr_protocol_rpc_AssignTrackerRequest", pos),
          InboundUnion::slimevr_protocol_rpc_SettingsRequest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<rpc::SettingsRequest>>("InboundUnion::slimevr_protocol_rpc_SettingsRequest", pos),
          InboundUnion::slimevr_protocol_rpc_ChangeSettingsRequest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<rpc::ChangeSettingsRequest>>("InboundUnion::slimevr_protocol_rpc_ChangeSettingsRequest", pos),
          InboundUnion::slimevr_protocol_data_feed_PollDataFeed => v.verify_union_variant::<flatbuffers::ForwardsUOffset<data_feed::PollDataFeed>>("InboundUnion::slimevr_protocol_data_feed_PollDataFeed", pos),
          InboundUnion::slimevr_protocol_data_feed_DataFeedRequest => v.verify_union_variant::<flatbuffers::ForwardsUOffset<data_feed::DataFeedRequest>>("InboundUnion::slimevr_protocol_data_feed_DataFeedRequest", pos),
          InboundUnion::slimevr_protocol_data_feed_DataFeedUpdate => v.verify_union_variant::<flatbuffers::ForwardsUOffset<data_feed::DataFeedUpdate>>("InboundUnion::slimevr_protocol_data_feed_DataFeedUpdate", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct InboundPacketArgs {
    pub acknowledge_me: bool,
    pub packet_type: InboundUnion,
    pub packet: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for InboundPacketArgs {
  #[inline]
  fn default() -> Self {
    InboundPacketArgs {
      acknowledge_me: false,
      packet_type: InboundUnion::NONE,
      packet: None,
    }
  }
}

pub struct InboundPacketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> InboundPacketBuilder<'a, 'b> {
  #[inline]
  pub fn add_acknowledge_me(&mut self, acknowledge_me: bool) {
    self.fbb_.push_slot::<bool>(InboundPacket::VT_ACKNOWLEDGE_ME, acknowledge_me, false);
  }
  #[inline]
  pub fn add_packet_type(&mut self, packet_type: InboundUnion) {
    self.fbb_.push_slot::<InboundUnion>(InboundPacket::VT_PACKET_TYPE, packet_type, InboundUnion::NONE);
  }
  #[inline]
  pub fn add_packet(&mut self, packet: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(InboundPacket::VT_PACKET, packet);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> InboundPacketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    InboundPacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<InboundPacket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for InboundPacket<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("InboundPacket");
      ds.field("acknowledge_me", &self.acknowledge_me());
      ds.field("packet_type", &self.packet_type());
      match self.packet_type() {
        InboundUnion::slimevr_protocol_rpc_HeartbeatRequest => {
          if let Some(x) = self.packet_as_slimevr_protocol_rpc_heartbeat_request() {
            ds.field("packet", &x)
          } else {
            ds.field("packet", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        InboundUnion::slimevr_protocol_rpc_ResetRequest => {
          if let Some(x) = self.packet_as_slimevr_protocol_rpc_reset_request() {
            ds.field("packet", &x)
          } else {
            ds.field("packet", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        InboundUnion::slimevr_protocol_rpc_AssignTrackerRequest => {
          if let Some(x) = self.packet_as_slimevr_protocol_rpc_assign_tracker_request() {
            ds.field("packet", &x)
          } else {
            ds.field("packet", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        InboundUnion::slimevr_protocol_rpc_SettingsRequest => {
          if let Some(x) = self.packet_as_slimevr_protocol_rpc_settings_request() {
            ds.field("packet", &x)
          } else {
            ds.field("packet", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        InboundUnion::slimevr_protocol_rpc_ChangeSettingsRequest => {
          if let Some(x) = self.packet_as_slimevr_protocol_rpc_change_settings_request() {
            ds.field("packet", &x)
          } else {
            ds.field("packet", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        InboundUnion::slimevr_protocol_data_feed_PollDataFeed => {
          if let Some(x) = self.packet_as_slimevr_protocol_data_feed_poll_data_feed() {
            ds.field("packet", &x)
          } else {
            ds.field("packet", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        InboundUnion::slimevr_protocol_data_feed_DataFeedRequest => {
          if let Some(x) = self.packet_as_slimevr_protocol_data_feed_data_feed_request() {
            ds.field("packet", &x)
          } else {
            ds.field("packet", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        InboundUnion::slimevr_protocol_data_feed_DataFeedUpdate => {
          if let Some(x) = self.packet_as_slimevr_protocol_data_feed_data_feed_update() {
            ds.field("packet", &x)
          } else {
            ds.field("packet", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("packet", &x)
        },
      };
      ds.finish()
  }
}
