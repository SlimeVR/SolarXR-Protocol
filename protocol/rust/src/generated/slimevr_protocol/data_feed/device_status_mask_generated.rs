// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DeviceStatusMaskOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A mask of values to be reported in subsequent DeviceStatus. Values set to `false`
/// or `null` will not reported. By default, all fields are false/null.
///
/// If you set a value to `true`, it is not guaranteed that the sender actually has
/// such a value to send. In this case, they will probably send `null`, and the receiver
/// has the choice to disconnect due to missing data.
pub struct DeviceStatusMask<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeviceStatusMask<'a> {
  type Inner = DeviceStatusMask<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> DeviceStatusMask<'a> {
  pub const VT_CUSTOM_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_FIRMWARE_INFO: flatbuffers::VOffsetT = 6;
  pub const VT_FIRMWARE_STATUS: flatbuffers::VOffsetT = 8;
  pub const VT_TRACKER_STATUSES: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DeviceStatusMask { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DeviceStatusMaskArgs<'args>
  ) -> flatbuffers::WIPOffset<DeviceStatusMask<'bldr>> {
    let mut builder = DeviceStatusMaskBuilder::new(_fbb);
    if let Some(x) = args.tracker_statuses { builder.add_tracker_statuses(x); }
    if let Some(x) = args.firmware_status { builder.add_firmware_status(x); }
    if let Some(x) = args.firmware_info { builder.add_firmware_info(x); }
    builder.add_custom_name(args.custom_name);
    builder.finish()
  }


  #[inline]
  pub fn custom_name(&self) -> bool {
    self._tab.get::<bool>(DeviceStatusMask::VT_CUSTOM_NAME, Some(false)).unwrap()
  }
  #[inline]
  pub fn firmware_info(&self) -> Option<super::datatypes::hardware_info::FirmwareInfoMask<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<super::datatypes::hardware_info::FirmwareInfoMask>>(DeviceStatusMask::VT_FIRMWARE_INFO, None)
  }
  #[inline]
  pub fn firmware_status(&self) -> Option<super::datatypes::hardware_info::FirmwareStatusMask<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<super::datatypes::hardware_info::FirmwareStatusMask>>(DeviceStatusMask::VT_FIRMWARE_STATUS, None)
  }
  #[inline]
  pub fn tracker_statuses(&self) -> Option<super::datatypes::tracker::TrackerStatusMask<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<super::datatypes::tracker::TrackerStatusMask>>(DeviceStatusMask::VT_TRACKER_STATUSES, None)
  }
}

impl flatbuffers::Verifiable for DeviceStatusMask<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("custom_name", Self::VT_CUSTOM_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::datatypes::hardware_info::FirmwareInfoMask>>("firmware_info", Self::VT_FIRMWARE_INFO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::datatypes::hardware_info::FirmwareStatusMask>>("firmware_status", Self::VT_FIRMWARE_STATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::datatypes::tracker::TrackerStatusMask>>("tracker_statuses", Self::VT_TRACKER_STATUSES, false)?
     .finish();
    Ok(())
  }
}
pub struct DeviceStatusMaskArgs<'a> {
    pub custom_name: bool,
    pub firmware_info: Option<flatbuffers::WIPOffset<super::datatypes::hardware_info::FirmwareInfoMask<'a>>>,
    pub firmware_status: Option<flatbuffers::WIPOffset<super::datatypes::hardware_info::FirmwareStatusMask<'a>>>,
    pub tracker_statuses: Option<flatbuffers::WIPOffset<super::datatypes::tracker::TrackerStatusMask<'a>>>,
}
impl<'a> Default for DeviceStatusMaskArgs<'a> {
  #[inline]
  fn default() -> Self {
    DeviceStatusMaskArgs {
      custom_name: false,
      firmware_info: None,
      firmware_status: None,
      tracker_statuses: None,
    }
  }
}

pub struct DeviceStatusMaskBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeviceStatusMaskBuilder<'a, 'b> {
  #[inline]
  pub fn add_custom_name(&mut self, custom_name: bool) {
    self.fbb_.push_slot::<bool>(DeviceStatusMask::VT_CUSTOM_NAME, custom_name, false);
  }
  #[inline]
  pub fn add_firmware_info(&mut self, firmware_info: flatbuffers::WIPOffset<super::datatypes::hardware_info::FirmwareInfoMask<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::datatypes::hardware_info::FirmwareInfoMask>>(DeviceStatusMask::VT_FIRMWARE_INFO, firmware_info);
  }
  #[inline]
  pub fn add_firmware_status(&mut self, firmware_status: flatbuffers::WIPOffset<super::datatypes::hardware_info::FirmwareStatusMask<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::datatypes::hardware_info::FirmwareStatusMask>>(DeviceStatusMask::VT_FIRMWARE_STATUS, firmware_status);
  }
  #[inline]
  pub fn add_tracker_statuses(&mut self, tracker_statuses: flatbuffers::WIPOffset<super::datatypes::tracker::TrackerStatusMask<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::datatypes::tracker::TrackerStatusMask>>(DeviceStatusMask::VT_TRACKER_STATUSES, tracker_statuses);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DeviceStatusMaskBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DeviceStatusMaskBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeviceStatusMask<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for DeviceStatusMask<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("DeviceStatusMask");
      ds.field("custom_name", &self.custom_name());
      ds.field("firmware_info", &self.firmware_info());
      ds.field("firmware_status", &self.firmware_status());
      ds.field("tracker_statuses", &self.tracker_statuses());
      ds.finish()
  }
}
