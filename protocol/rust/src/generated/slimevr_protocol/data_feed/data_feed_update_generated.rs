// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DataFeedUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

/// A single update of the `DeviceStatus` updates.
///
/// A data feed might send data only when it changes/updates, and we should make no
/// assumptions that the data is actually delivered. If you want to guarantee
/// delivery and avoid dropped observations of data (such as a user-initiated
/// button press), it is better to use the RPC system.
pub struct DataFeedUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataFeedUpdate<'a> {
  type Inner = DataFeedUpdate<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> DataFeedUpdate<'a> {
  pub const VT_DEVICES: flatbuffers::VOffsetT = 4;
  pub const VT_SYNTHETIC_TRACKERS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataFeedUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DataFeedUpdateArgs<'args>
  ) -> flatbuffers::WIPOffset<DataFeedUpdate<'bldr>> {
    let mut builder = DataFeedUpdateBuilder::new(_fbb);
    if let Some(x) = args.synthetic_trackers { builder.add_synthetic_trackers(x); }
    if let Some(x) = args.devices { builder.add_devices(x); }
    builder.finish()
  }


  #[inline]
  pub fn devices(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeviceStatus<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeviceStatus>>>>(DataFeedUpdate::VT_DEVICES, None)
  }
  #[inline]
  pub fn synthetic_trackers(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::datatypes::tracker::TrackerStatus<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::datatypes::tracker::TrackerStatus>>>>(DataFeedUpdate::VT_SYNTHETIC_TRACKERS, None)
  }
}

impl flatbuffers::Verifiable for DataFeedUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<DeviceStatus>>>>("devices", Self::VT_DEVICES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::datatypes::tracker::TrackerStatus>>>>("synthetic_trackers", Self::VT_SYNTHETIC_TRACKERS, false)?
     .finish();
    Ok(())
  }
}
pub struct DataFeedUpdateArgs<'a> {
    pub devices: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DeviceStatus<'a>>>>>,
    pub synthetic_trackers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::datatypes::tracker::TrackerStatus<'a>>>>>,
}
impl<'a> Default for DataFeedUpdateArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataFeedUpdateArgs {
      devices: None,
      synthetic_trackers: None,
    }
  }
}

pub struct DataFeedUpdateBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DataFeedUpdateBuilder<'a, 'b> {
  #[inline]
  pub fn add_devices(&mut self, devices: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<DeviceStatus<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataFeedUpdate::VT_DEVICES, devices);
  }
  #[inline]
  pub fn add_synthetic_trackers(&mut self, synthetic_trackers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::datatypes::tracker::TrackerStatus<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataFeedUpdate::VT_SYNTHETIC_TRACKERS, synthetic_trackers);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DataFeedUpdateBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DataFeedUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataFeedUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for DataFeedUpdate<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("DataFeedUpdate");
      ds.field("devices", &self.devices());
      ds.field("synthetic_trackers", &self.synthetic_trackers());
      ds.finish()
  }
}
