// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DataFeedConfigOffset {}
#[derive(Copy, Clone, PartialEq)]

/// All information related to the configuration of a data feed. This may be sent
/// as part of a `DataFeedRequest` or a `DataFeedNotify`.
pub struct DataFeedConfig<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataFeedConfig<'a> {
  type Inner = DataFeedConfig<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> DataFeedConfig<'a> {
  pub const VT_MIN_INTERVAL: flatbuffers::VOffsetT = 4;
  pub const VT_DATA_MASK: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataFeedConfig { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DataFeedConfigArgs<'args>
  ) -> flatbuffers::WIPOffset<DataFeedConfig<'bldr>> {
    let mut builder = DataFeedConfigBuilder::new(_fbb);
    if let Some(x) = args.data_mask { builder.add_data_mask(x); }
    builder.add_min_interval(args.min_interval);
    builder.finish()
  }


  /// Minimum delay in milliseconds between new data updates.
  #[inline]
  pub fn min_interval(&self) -> u16 {
    self._tab.get::<u16>(DataFeedConfig::VT_MIN_INTERVAL, Some(0)).unwrap()
  }
  #[inline]
  pub fn data_mask(&self) -> Option<DeviceStatusMask<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<DeviceStatusMask>>(DataFeedConfig::VT_DATA_MASK, None)
  }
}

impl flatbuffers::Verifiable for DataFeedConfig<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u16>("min_interval", Self::VT_MIN_INTERVAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<DeviceStatusMask>>("data_mask", Self::VT_DATA_MASK, false)?
     .finish();
    Ok(())
  }
}
pub struct DataFeedConfigArgs<'a> {
    pub min_interval: u16,
    pub data_mask: Option<flatbuffers::WIPOffset<DeviceStatusMask<'a>>>,
}
impl<'a> Default for DataFeedConfigArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataFeedConfigArgs {
      min_interval: 0,
      data_mask: None,
    }
  }
}

pub struct DataFeedConfigBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DataFeedConfigBuilder<'a, 'b> {
  #[inline]
  pub fn add_min_interval(&mut self, min_interval: u16) {
    self.fbb_.push_slot::<u16>(DataFeedConfig::VT_MIN_INTERVAL, min_interval, 0);
  }
  #[inline]
  pub fn add_data_mask(&mut self, data_mask: flatbuffers::WIPOffset<DeviceStatusMask<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<DeviceStatusMask>>(DataFeedConfig::VT_DATA_MASK, data_mask);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DataFeedConfigBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DataFeedConfigBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataFeedConfig<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for DataFeedConfig<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("DataFeedConfig");
      ds.field("min_interval", &self.min_interval());
      ds.field("data_mask", &self.data_mask());
      ds.finish()
  }
}
