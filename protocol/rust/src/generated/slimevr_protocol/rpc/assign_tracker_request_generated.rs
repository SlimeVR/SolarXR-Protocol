// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AssignTrackerRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AssignTrackerRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AssignTrackerRequest<'a> {
  type Inner = AssignTrackerRequest<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> AssignTrackerRequest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ROLE: flatbuffers::VOffsetT = 6;
  pub const VT_MOUNTING_ROTATION: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AssignTrackerRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AssignTrackerRequestArgs
  ) -> flatbuffers::WIPOffset<AssignTrackerRequest<'bldr>> {
    let mut builder = AssignTrackerRequestBuilder::new(_fbb);
    builder.add_mounting_rotation(args.mounting_rotation);
    builder.add_role(args.role);
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u8 {
    self._tab.get::<u8>(AssignTrackerRequest::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn role(&self) -> super::datatypes::TrackerRole {
    self._tab.get::<super::datatypes::TrackerRole>(AssignTrackerRequest::VT_ROLE, Some(super::datatypes::TrackerRole::NONE)).unwrap()
  }
  #[inline]
  pub fn mounting_rotation(&self) -> u16 {
    self._tab.get::<u16>(AssignTrackerRequest::VT_MOUNTING_ROTATION, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for AssignTrackerRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("id", Self::VT_ID, false)?
     .visit_field::<super::datatypes::TrackerRole>("role", Self::VT_ROLE, false)?
     .visit_field::<u16>("mounting_rotation", Self::VT_MOUNTING_ROTATION, false)?
     .finish();
    Ok(())
  }
}
pub struct AssignTrackerRequestArgs {
    pub id: u8,
    pub role: super::datatypes::TrackerRole,
    pub mounting_rotation: u16,
}
impl<'a> Default for AssignTrackerRequestArgs {
  #[inline]
  fn default() -> Self {
    AssignTrackerRequestArgs {
      id: 0,
      role: super::datatypes::TrackerRole::NONE,
      mounting_rotation: 0,
    }
  }
}

pub struct AssignTrackerRequestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AssignTrackerRequestBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u8) {
    self.fbb_.push_slot::<u8>(AssignTrackerRequest::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_role(&mut self, role: super::datatypes::TrackerRole) {
    self.fbb_.push_slot::<super::datatypes::TrackerRole>(AssignTrackerRequest::VT_ROLE, role, super::datatypes::TrackerRole::NONE);
  }
  #[inline]
  pub fn add_mounting_rotation(&mut self, mounting_rotation: u16) {
    self.fbb_.push_slot::<u16>(AssignTrackerRequest::VT_MOUNTING_ROTATION, mounting_rotation, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AssignTrackerRequestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AssignTrackerRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AssignTrackerRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for AssignTrackerRequest<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("AssignTrackerRequest");
      ds.field("id", &self.id());
      ds.field("role", &self.role());
      ds.field("mounting_rotation", &self.mounting_rotation());
      ds.finish()
  }
}
