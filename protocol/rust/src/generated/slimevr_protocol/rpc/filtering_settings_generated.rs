// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FilteringSettingsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FilteringSettings<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FilteringSettings<'a> {
  type Inner = FilteringSettings<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> FilteringSettings<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_INTENSITY: flatbuffers::VOffsetT = 6;
  pub const VT_TICKS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FilteringSettings { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FilteringSettingsArgs
  ) -> flatbuffers::WIPOffset<FilteringSettings<'bldr>> {
    let mut builder = FilteringSettingsBuilder::new(_fbb);
    builder.add_ticks(args.ticks);
    builder.add_intensity(args.intensity);
    builder.add_type_(args.type_);
    builder.finish()
  }


  #[inline]
  pub fn type_(&self) -> super::datatypes::FilteringType {
    self._tab.get::<super::datatypes::FilteringType>(FilteringSettings::VT_TYPE_, Some(super::datatypes::FilteringType::NONE)).unwrap()
  }
  #[inline]
  pub fn intensity(&self) -> u8 {
    self._tab.get::<u8>(FilteringSettings::VT_INTENSITY, Some(0)).unwrap()
  }
  #[inline]
  pub fn ticks(&self) -> u8 {
    self._tab.get::<u8>(FilteringSettings::VT_TICKS, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for FilteringSettings<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<super::datatypes::FilteringType>("type_", Self::VT_TYPE_, false)?
     .visit_field::<u8>("intensity", Self::VT_INTENSITY, false)?
     .visit_field::<u8>("ticks", Self::VT_TICKS, false)?
     .finish();
    Ok(())
  }
}
pub struct FilteringSettingsArgs {
    pub type_: super::datatypes::FilteringType,
    pub intensity: u8,
    pub ticks: u8,
}
impl<'a> Default for FilteringSettingsArgs {
  #[inline]
  fn default() -> Self {
    FilteringSettingsArgs {
      type_: super::datatypes::FilteringType::NONE,
      intensity: 0,
      ticks: 0,
    }
  }
}

pub struct FilteringSettingsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FilteringSettingsBuilder<'a, 'b> {
  #[inline]
  pub fn add_type_(&mut self, type_: super::datatypes::FilteringType) {
    self.fbb_.push_slot::<super::datatypes::FilteringType>(FilteringSettings::VT_TYPE_, type_, super::datatypes::FilteringType::NONE);
  }
  #[inline]
  pub fn add_intensity(&mut self, intensity: u8) {
    self.fbb_.push_slot::<u8>(FilteringSettings::VT_INTENSITY, intensity, 0);
  }
  #[inline]
  pub fn add_ticks(&mut self, ticks: u8) {
    self.fbb_.push_slot::<u8>(FilteringSettings::VT_TICKS, ticks, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FilteringSettingsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FilteringSettingsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FilteringSettings<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for FilteringSettings<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("FilteringSettings");
      ds.field("type_", &self.type_());
      ds.field("intensity", &self.intensity());
      ds.field("ticks", &self.ticks());
      ds.finish()
  }
}
