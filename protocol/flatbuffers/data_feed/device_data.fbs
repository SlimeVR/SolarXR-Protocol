include "data_feed/tracker.fbs";
include "datatypes/datatypes.fbs";
include "datatypes/hardware_info.fbs";

namespace solarxr_protocol.data_feed.device_data;


/// A mask of values to be reported in subsequent DeviceStatus. Values set to `false`
/// or `null` will not reported. By default, all fields are false/null.
///
/// If you set a value to `true`, it is not guaranteed that the sender actually has
/// such a value to send. In this case, they will probably send `null`, and the receiver
/// has the choice to disconnect due to missing data.
table DeviceDataMask {
    /// Which tracker data should be sent in this data feed
    tracker_data: solarxr_protocol.data_feed.tracker.TrackerDataMask;
    /// true if device data should be sent in this data feed
    device_data: bool;
}

/// Describes all possible information about a hardware device. For example, a
/// vive tracker is a  single hardware device, and a slime tracker with two
/// extensions is a single hardware device but two trackers.
table DeviceData {
    // We could technically treat the ID as another component, but I feel like it
    // should be required to be here.
    id: solarxr_protocol.datatypes.DeviceId;
    // Everything here is optional and controlled by the device itself

    /// The dynamically changeable name of the device. This might be set by the
    /// user to help them remember which tracker is which.
    custom_name: string;

    /// Mostly-static info about the device hardware
    hardware_info: solarxr_protocol.datatypes.hardware_info.HardwareInfo;
    /// General info about the status of the device
    hardware_status: solarxr_protocol.datatypes.hardware_info.HardwareStatus;

    /// Info about all trackers attached to this device
    trackers: [solarxr_protocol.data_feed.tracker.TrackerData];
}
