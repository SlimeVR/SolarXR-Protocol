include "datatypes/math.fbs";
include "datatypes/datatypes.fbs";

namespace solarxr_protocol.data_feed.tracker;

/// Describes all possible information about a tracker. A tracker is anything that
/// provides kinematic data about a particular body part.
///
/// Trackers may be synthetic/computed or instead part of an actual hardware device.
/// There can be multiple trackers per hardware device.
table TrackerData {
   	tracker_id: solarxr_protocol.datatypes.TrackerId;

	info: TrackerInfo;

	status: solarxr_protocol.datatypes.TrackerStatus;

	// Everything here is optional and controlled by `TrackerDataMask`
	rotation: solarxr_protocol.datatypes.math.Quat;
	/// Position, in meters
	// TODO: With respect to what space?
	position: solarxr_protocol.datatypes.math.Vec3f;
	/// Raw rotational velocity, in euler angles
	raw_rot_vel: solarxr_protocol.datatypes.math.Vec3f;
	/// Raw translational acceleration, in m/s^2
	raw_trans_accel: solarxr_protocol.datatypes.math.Vec3f; // trans? BASED
	/// Temperature in degrees celsius
	temp: solarxr_protocol.datatypes.Temperature;
}

/// A mask of the different components in `TrackerComponent`
table TrackerDataMask {
	info: bool;
	status: bool;
    rotation: bool;
    position: bool;
    raw_rot_vel: bool;
    raw_trans_accel: bool;
    temp: bool;
}

/// Static description of a tracker
table TrackerInfo {
    imu_type: solarxr_protocol.datatypes.hardware_info.ImuType;
    /// The user-assigned role of the tracker.
    body_part: solarxr_protocol.datatypes.BodyPart;
    /// average samples per second
    poll_rate: solarxr_protocol.datatypes.HzF32;
    /// The orientation of the tracker when mounted on the body
    mounting_orientation: solarxr_protocol.datatypes.math.Quat;

    editable: bool;

    computed: bool;

    /// A human-friendly name to display as the name of the tracker.
    display_name: string;

    /// name to display as the name of the tracker set by the user
    custom_name: string;
}
