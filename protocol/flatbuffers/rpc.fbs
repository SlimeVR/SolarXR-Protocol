/// This file contains all messages related to the RPC system. Unlike the data feed
/// system, the RPC system is focused on providing a reliable RPC communication pattern.
///
/// It can be used either for sending commands to mutate state, or reliably sending
/// evented updates of data that should be guaranteed to be observed, such as a user
/// initiated button push.

include "datatypes/datatypes.fbs";

namespace solarxr_protocol.rpc;


union RpcMessage {
    HeartbeatRequest,
    HeartbeatResponse,
    ResetRequest,
    AssignTrackerRequest,
    SettingsRequest,
    SettingsResponse,
    ChangeSettingsRequest,
    RecordBVHRequest,
    RecordBVHStatus,
 	SkeletonConfigRequest,
	ChangeSkeletonConfigRequest,
	SkeletonResetAllRequest,
	SkeletonConfigResponse,
	OpenSerialRequest,
	CloseSerialRequest,
	SetWifiRequest,
	SerialUpdateResponse
}

table RpcMessageHeader {
    /// For a request, this identifies the request. For a response, this corresponds
    /// to the request that it is responding to.
    tx_id: solarxr_protocol.datatypes.TransactionId;
    message: RpcMessage;
}


table HeartbeatRequest {}

table HeartbeatResponse {}


enum ResetType: uint8 {
    Quick,
    Full,
    Recalibrate,
}


table ResetRequest {
    reset_type: ResetType;
}
table ResetResponse {}


table AssignTrackerRequest {
    tracker_id: solarxr_protocol.datatypes.TrackerId;
    body_position: solarxr_protocol.datatypes.BodyPart;
    mounting_rotation: solarxr_protocol.datatypes.math.Quat;
}

// ---- Settings ----

table SettingsRequest {}

table SettingsResponse {
	steam_vr_trackers: SteamVRTrackersSetting;
	filtering: FilteringSettings;
}

table ChangeSettingsRequest {
    steam_vr_trackers: SteamVRTrackersSetting;
    filtering: FilteringSettings;
}

table SteamVRTrackersSetting {
    waist: bool;
    chest: bool;
    legs: bool;
    knees: bool;
    elbows: bool;
}

table FilteringSettings {
	type: solarxr_protocol.datatypes.FilteringType;
	intensity: uint8;
	ticks: uint8;
}

table RecordBVHRequest {
	stop: bool;
}

table RecordBVHStatus {
	recording: bool;
}


enum SkeletonBone: uint8 {
	NONE = 0,
	HEAD = 1,
	NECK = 3,
	TORSO = 4,
	CHEST = 5,
	WAIST = 6,
	HIP_OFFSET = 7,
	HIPS_WIDTH = 8,
	LEGS_LENGTH = 9,
	KNEE_HEIGHT = 10,
	FOOT_LENGTH = 11,
	FOOT_OFFSET = 12,
	SKELETON_OFFSET = 13,
	CONTROLLER_DISTANCE_Z = 14,
	CONTROLLER_DISTANCE_Y = 15,
	FOREARM_LENGTH = 16,
	SHOULDERS_DISTANCE = 17,
	SHOULDERS_WIDTH = 18,
	UPPER_ARM_LENGTH = 19,
	ELBOW_OFFSET = 20
}

table SkeletonPart {
	bone: SkeletonBone;
	value: float;
}

table SkeletonConfigRequest {}
table SkeletonConfigResponse {
	skeleton_parts: [SkeletonPart];
}

table SkeletonResetAllRequest {}

table ChangeSkeletonConfigRequest {
   	bone: SkeletonBone;
   	value: float;
}

table OpenSerialRequest {}
table CloseSerialRequest {}
table SetWifiRequest {
	ssid: string;
	password: string;
}
table SerialUpdateResponse {
	log: string;
	closed: bool;
}

