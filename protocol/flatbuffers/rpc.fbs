/// This file contains all messages related to the RPC system. Unlike the data feed
/// system, the RPC system is focused on providing a reliable RPC communication pattern.
///
/// It can be used either for sending commands to mutate state, or reliably sending
/// evented updates of data that should be guaranteed to be observed, such as a user
/// initiated button push.

include "datatypes/datatypes.fbs";

namespace slimevr_protocol.rpc;


union RpcMessage {
    HeartbeatRequest,
    HeartbeatResponse,
    ResetRequest,
    AssignTrackerRequest,
    SettingsRequest,
    SettingsResponse,
    ChangeSettingsRequest,
}

table RpcMessageHeader {
    /// For a request, this identifies the request. For a response, this corresponds
    /// to the request that it is responding to.
    tx_id: slimevr_protocol.datatypes.TransactionId;
    mesage: RpcMessage;
}


table HeartbeatRequest {}

table HeartbeatResponse {}


enum ResetType: uint8 {
    Quick,
    Full,
    Recalibrate,
}


table ResetRequest {
    reset_type: ResetType;
}
table ResetResponse {}


table AssignTrackerRequest {
    tracker_id: slimevr_protocol.datatypes.TrackerId;
    body_position: slimevr_protocol.datatypes.BodyPart;
    mounting_rotation: slimevr_protocol.datatypes.math.Quat;
}

// ---- Settings ----

table SettingsRequest {}

table SettingsResponse {
	steam_vr_trackers: SteamVRTrackersSetting;
	filtering: FilteringSettings;
}

table ChangeSettingsRequest {
    steam_vr_trackers: SteamVRTrackersSetting;
    filtering: FilteringSettings;
}

table SteamVRTrackersSetting {
    waist: bool;
    chest: bool;
    legs: bool;
    knees: bool;
    elbows: bool;
}

table FilteringSettings {
	type: slimevr_protocol.datatypes.FilteringType;
	intensity: uint8;
	ticks: uint8;
}
