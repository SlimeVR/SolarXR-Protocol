// automatically generated by the FlatBuffers compiler, do not modify

import { AssignTrackerRequest, AssignTrackerRequestT } from '../../slimevr-protocol/rpc/assign-tracker-request';
import { ChangeSettingsRequest, ChangeSettingsRequestT } from '../../slimevr-protocol/rpc/change-settings-request';
import { HeartbeatRequest, HeartbeatRequestT } from '../../slimevr-protocol/rpc/heartbeat-request';
import { HeartbeatResponse, HeartbeatResponseT } from '../../slimevr-protocol/rpc/heartbeat-response';
import { ResetRequest, ResetRequestT } from '../../slimevr-protocol/rpc/reset-request';
import { SettingsRequest, SettingsRequestT } from '../../slimevr-protocol/rpc/settings-request';
import { SettingsResponse, SettingsResponseT } from '../../slimevr-protocol/rpc/settings-response';


export enum RpcMessage{
  NONE = 0,
  HeartbeatRequest = 1,
  HeartbeatResponse = 2,
  ResetRequest = 3,
  AssignTrackerRequest = 4,
  SettingsRequest = 5,
  SettingsResponse = 6,
  ChangeSettingsRequest = 7
}

export function unionToRpcMessage(
  type: RpcMessage,
  accessor: (obj:AssignTrackerRequest|ChangeSettingsRequest|HeartbeatRequest|HeartbeatResponse|ResetRequest|SettingsRequest|SettingsResponse) => AssignTrackerRequest|ChangeSettingsRequest|HeartbeatRequest|HeartbeatResponse|ResetRequest|SettingsRequest|SettingsResponse|null
): AssignTrackerRequest|ChangeSettingsRequest|HeartbeatRequest|HeartbeatResponse|ResetRequest|SettingsRequest|SettingsResponse|null {
  switch(RpcMessage[type]) {
    case 'NONE': return null; 
    case 'HeartbeatRequest': return accessor(new HeartbeatRequest())! as HeartbeatRequest;
    case 'HeartbeatResponse': return accessor(new HeartbeatResponse())! as HeartbeatResponse;
    case 'ResetRequest': return accessor(new ResetRequest())! as ResetRequest;
    case 'AssignTrackerRequest': return accessor(new AssignTrackerRequest())! as AssignTrackerRequest;
    case 'SettingsRequest': return accessor(new SettingsRequest())! as SettingsRequest;
    case 'SettingsResponse': return accessor(new SettingsResponse())! as SettingsResponse;
    case 'ChangeSettingsRequest': return accessor(new ChangeSettingsRequest())! as ChangeSettingsRequest;
    default: return null;
  }
}

export function unionListToRpcMessage(
  type: RpcMessage, 
  accessor: (index: number, obj:AssignTrackerRequest|ChangeSettingsRequest|HeartbeatRequest|HeartbeatResponse|ResetRequest|SettingsRequest|SettingsResponse) => AssignTrackerRequest|ChangeSettingsRequest|HeartbeatRequest|HeartbeatResponse|ResetRequest|SettingsRequest|SettingsResponse|null, 
  index: number
): AssignTrackerRequest|ChangeSettingsRequest|HeartbeatRequest|HeartbeatResponse|ResetRequest|SettingsRequest|SettingsResponse|null {
  switch(RpcMessage[type]) {
    case 'NONE': return null; 
    case 'HeartbeatRequest': return accessor(index, new HeartbeatRequest())! as HeartbeatRequest;
    case 'HeartbeatResponse': return accessor(index, new HeartbeatResponse())! as HeartbeatResponse;
    case 'ResetRequest': return accessor(index, new ResetRequest())! as ResetRequest;
    case 'AssignTrackerRequest': return accessor(index, new AssignTrackerRequest())! as AssignTrackerRequest;
    case 'SettingsRequest': return accessor(index, new SettingsRequest())! as SettingsRequest;
    case 'SettingsResponse': return accessor(index, new SettingsResponse())! as SettingsResponse;
    case 'ChangeSettingsRequest': return accessor(index, new ChangeSettingsRequest())! as ChangeSettingsRequest;
    default: return null;
  }
}

