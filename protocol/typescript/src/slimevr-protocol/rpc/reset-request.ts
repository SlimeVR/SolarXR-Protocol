// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ResetRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ResetRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResetRequest(bb:flatbuffers.ByteBuffer, obj?:ResetRequest):ResetRequest {
  return (obj || new ResetRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResetRequest(bb:flatbuffers.ByteBuffer, obj?:ResetRequest):ResetRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResetRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

quick():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startResetRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addQuick(builder:flatbuffers.Builder, quick:boolean) {
  builder.addFieldInt8(0, +quick, +false);
}

static endResetRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResetRequest(builder:flatbuffers.Builder, quick:boolean):flatbuffers.Offset {
  ResetRequest.startResetRequest(builder);
  ResetRequest.addQuick(builder, quick);
  return ResetRequest.endResetRequest(builder);
}

unpack(): ResetRequestT {
  return new ResetRequestT(
    this.quick()
  );
}


unpackTo(_o: ResetRequestT): void {
  _o.quick = this.quick();
}
}

export class ResetRequestT {
constructor(
  public quick: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ResetRequest.createResetRequest(builder,
    this.quick
  );
}
}
