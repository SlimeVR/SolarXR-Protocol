// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Acknowledgement {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Acknowledgement {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAcknowledgement(bb:flatbuffers.ByteBuffer, obj?:Acknowledgement):Acknowledgement {
  return (obj || new Acknowledgement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAcknowledgement(bb:flatbuffers.ByteBuffer, obj?:Acknowledgement):Acknowledgement {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Acknowledgement()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

packetId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startAcknowledgement(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPacketId(builder:flatbuffers.Builder, packetId:bigint) {
  builder.addFieldInt64(0, packetId, BigInt('0'));
}

static endAcknowledgement(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAcknowledgement(builder:flatbuffers.Builder, packetId:bigint):flatbuffers.Offset {
  Acknowledgement.startAcknowledgement(builder);
  Acknowledgement.addPacketId(builder, packetId);
  return Acknowledgement.endAcknowledgement(builder);
}

unpack(): AcknowledgementT {
  return new AcknowledgementT(
    this.packetId()
  );
}


unpackTo(_o: AcknowledgementT): void {
  _o.packetId = this.packetId();
}
}

export class AcknowledgementT {
constructor(
  public packetId: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Acknowledgement.createAcknowledgement(builder,
    this.packetId
  );
}
}
