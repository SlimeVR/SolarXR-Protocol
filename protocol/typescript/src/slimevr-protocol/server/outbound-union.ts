// automatically generated by the FlatBuffers compiler, do not modify

import { Acknowledgement, AcknowledgementT } from '../../slimevr-protocol/misc/acknowledgement';
import { SettingsResponse, SettingsResponseT } from '../../slimevr-protocol/server/settings-response';
import { TrackersList, TrackersListT } from '../../slimevr-protocol/server/trackers-list';


export enum OutboundUnion{
  NONE = 0,
  TrackersList = 1,
  SettingsResponse = 2,
  slimevr_protocol_misc_Acknowledgement = 3
}

export function unionToOutboundUnion(
  type: OutboundUnion,
  accessor: (obj:Acknowledgement|SettingsResponse|TrackersList) => Acknowledgement|SettingsResponse|TrackersList|null
): Acknowledgement|SettingsResponse|TrackersList|null {
  switch(OutboundUnion[type]) {
    case 'NONE': return null; 
    case 'TrackersList': return accessor(new TrackersList())! as TrackersList;
    case 'SettingsResponse': return accessor(new SettingsResponse())! as SettingsResponse;
    case 'slimevr_protocol_misc_Acknowledgement': return accessor(new Acknowledgement())! as Acknowledgement;
    default: return null;
  }
}

export function unionListToOutboundUnion(
  type: OutboundUnion, 
  accessor: (index: number, obj:Acknowledgement|SettingsResponse|TrackersList) => Acknowledgement|SettingsResponse|TrackersList|null, 
  index: number
): Acknowledgement|SettingsResponse|TrackersList|null {
  switch(OutboundUnion[type]) {
    case 'NONE': return null; 
    case 'TrackersList': return accessor(index, new TrackersList())! as TrackersList;
    case 'SettingsResponse': return accessor(index, new SettingsResponse())! as SettingsResponse;
    case 'slimevr_protocol_misc_Acknowledgement': return accessor(index, new Acknowledgement())! as Acknowledgement;
    default: return null;
  }
}

