// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ApplicationType } from '../../slimevr-protocol/server/application-type';


export class HandshakeRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):HandshakeRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHandshakeRequest(bb:flatbuffers.ByteBuffer, obj?:HandshakeRequest):HandshakeRequest {
  return (obj || new HandshakeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHandshakeRequest(bb:flatbuffers.ByteBuffer, obj?:HandshakeRequest):HandshakeRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HandshakeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

applicationType():ApplicationType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ApplicationType.Other;
}

static startHandshakeRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addApplicationType(builder:flatbuffers.Builder, applicationType:ApplicationType) {
  builder.addFieldInt8(0, applicationType, ApplicationType.Other);
}

static endHandshakeRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHandshakeRequest(builder:flatbuffers.Builder, applicationType:ApplicationType):flatbuffers.Offset {
  HandshakeRequest.startHandshakeRequest(builder);
  HandshakeRequest.addApplicationType(builder, applicationType);
  return HandshakeRequest.endHandshakeRequest(builder);
}

unpack(): HandshakeRequestT {
  return new HandshakeRequestT(
    this.applicationType()
  );
}


unpackTo(_o: HandshakeRequestT): void {
  _o.applicationType = this.applicationType();
}
}

export class HandshakeRequestT {
constructor(
  public applicationType: ApplicationType = ApplicationType.Other
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return HandshakeRequest.createHandshakeRequest(builder,
    this.applicationType
  );
}
}
