// automatically generated by the FlatBuffers compiler, do not modify

import { Acknowledgement, AcknowledgementT } from '../../slimevr-protocol/misc/acknowledgement';
import { HandshakeRequest, HandshakeRequestT } from '../../slimevr-protocol/server/handshake-request';


export enum InboundUnion{
  NONE = 0,
  HandshakeRequest = 1,
  slimevr_protocol_misc_Acknowledgement = 2
}

export function unionToInboundUnion(
  type: InboundUnion,
  accessor: (obj:Acknowledgement|HandshakeRequest) => Acknowledgement|HandshakeRequest|null
): Acknowledgement|HandshakeRequest|null {
  switch(InboundUnion[type]) {
    case 'NONE': return null; 
    case 'HandshakeRequest': return accessor(new HandshakeRequest())! as HandshakeRequest;
    case 'slimevr_protocol_misc_Acknowledgement': return accessor(new Acknowledgement())! as Acknowledgement;
    default: return null;
  }
}

export function unionListToInboundUnion(
  type: InboundUnion, 
  accessor: (index: number, obj:Acknowledgement|HandshakeRequest) => Acknowledgement|HandshakeRequest|null, 
  index: number
): Acknowledgement|HandshakeRequest|null {
  switch(InboundUnion[type]) {
    case 'NONE': return null; 
    case 'HandshakeRequest': return accessor(index, new HandshakeRequest())! as HandshakeRequest;
    case 'slimevr_protocol_misc_Acknowledgement': return accessor(index, new Acknowledgement())! as Acknowledgement;
    default: return null;
  }
}

