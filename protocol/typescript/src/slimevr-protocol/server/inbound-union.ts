// automatically generated by the FlatBuffers compiler, do not modify

import { Acknowledgement, AcknowledgementT } from '../../slimevr-protocol/misc/acknowledgement';
import { AssignTrackerRequest, AssignTrackerRequestT } from '../../slimevr-protocol/server/assign-tracker-request';
import { ChangeSettingsRequest, ChangeSettingsRequestT } from '../../slimevr-protocol/server/change-settings-request';
import { ConnectionRequest, ConnectionRequestT } from '../../slimevr-protocol/server/connection-request';
import { ResetRequest, ResetRequestT } from '../../slimevr-protocol/server/reset-request';
import { SettingsRequest, SettingsRequestT } from '../../slimevr-protocol/server/settings-request';


export enum InboundUnion{
  NONE = 0,
  ConnectionRequest = 1,
  ResetRequest = 2,
  AssignTrackerRequest = 3,
  ChangeSettingsRequest = 4,
  SettingsRequest = 5,
  slimevr_protocol_misc_Acknowledgement = 6
}

export function unionToInboundUnion(
  type: InboundUnion,
  accessor: (obj:Acknowledgement|AssignTrackerRequest|ChangeSettingsRequest|ConnectionRequest|ResetRequest|SettingsRequest) => Acknowledgement|AssignTrackerRequest|ChangeSettingsRequest|ConnectionRequest|ResetRequest|SettingsRequest|null
): Acknowledgement|AssignTrackerRequest|ChangeSettingsRequest|ConnectionRequest|ResetRequest|SettingsRequest|null {
  switch(InboundUnion[type]) {
    case 'NONE': return null; 
    case 'ConnectionRequest': return accessor(new ConnectionRequest())! as ConnectionRequest;
    case 'ResetRequest': return accessor(new ResetRequest())! as ResetRequest;
    case 'AssignTrackerRequest': return accessor(new AssignTrackerRequest())! as AssignTrackerRequest;
    case 'ChangeSettingsRequest': return accessor(new ChangeSettingsRequest())! as ChangeSettingsRequest;
    case 'SettingsRequest': return accessor(new SettingsRequest())! as SettingsRequest;
    case 'slimevr_protocol_misc_Acknowledgement': return accessor(new Acknowledgement())! as Acknowledgement;
    default: return null;
  }
}

export function unionListToInboundUnion(
  type: InboundUnion, 
  accessor: (index: number, obj:Acknowledgement|AssignTrackerRequest|ChangeSettingsRequest|ConnectionRequest|ResetRequest|SettingsRequest) => Acknowledgement|AssignTrackerRequest|ChangeSettingsRequest|ConnectionRequest|ResetRequest|SettingsRequest|null, 
  index: number
): Acknowledgement|AssignTrackerRequest|ChangeSettingsRequest|ConnectionRequest|ResetRequest|SettingsRequest|null {
  switch(InboundUnion[type]) {
    case 'NONE': return null; 
    case 'ConnectionRequest': return accessor(index, new ConnectionRequest())! as ConnectionRequest;
    case 'ResetRequest': return accessor(index, new ResetRequest())! as ResetRequest;
    case 'AssignTrackerRequest': return accessor(index, new AssignTrackerRequest())! as AssignTrackerRequest;
    case 'ChangeSettingsRequest': return accessor(index, new ChangeSettingsRequest())! as ChangeSettingsRequest;
    case 'SettingsRequest': return accessor(index, new SettingsRequest())! as SettingsRequest;
    case 'slimevr_protocol_misc_Acknowledgement': return accessor(index, new Acknowledgement())! as Acknowledgement;
    default: return null;
  }
}

