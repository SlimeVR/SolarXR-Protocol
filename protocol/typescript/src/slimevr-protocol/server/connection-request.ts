// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ApplicationType } from '../../slimevr-protocol/server/application-type';
import { TrackerListFeatures, TrackerListFeaturesT } from '../../slimevr-protocol/server/tracker-list-features';


export class ConnectionRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ConnectionRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConnectionRequest(bb:flatbuffers.ByteBuffer, obj?:ConnectionRequest):ConnectionRequest {
  return (obj || new ConnectionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConnectionRequest(bb:flatbuffers.ByteBuffer, obj?:ConnectionRequest):ConnectionRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConnectionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

applicationType():ApplicationType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ApplicationType.Other;
}

trackerList(index: number, obj?:TrackerListFeatures):TrackerListFeatures|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TrackerListFeatures()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

trackerListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startConnectionRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addApplicationType(builder:flatbuffers.Builder, applicationType:ApplicationType) {
  builder.addFieldInt8(0, applicationType, ApplicationType.Other);
}

static addTrackerList(builder:flatbuffers.Builder, trackerListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, trackerListOffset, 0);
}

static createTrackerListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrackerListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endConnectionRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConnectionRequest(builder:flatbuffers.Builder, applicationType:ApplicationType, trackerListOffset:flatbuffers.Offset):flatbuffers.Offset {
  ConnectionRequest.startConnectionRequest(builder);
  ConnectionRequest.addApplicationType(builder, applicationType);
  ConnectionRequest.addTrackerList(builder, trackerListOffset);
  return ConnectionRequest.endConnectionRequest(builder);
}

unpack(): ConnectionRequestT {
  return new ConnectionRequestT(
    this.applicationType(),
    this.bb!.createObjList(this.trackerList.bind(this), this.trackerListLength())
  );
}


unpackTo(_o: ConnectionRequestT): void {
  _o.applicationType = this.applicationType();
  _o.trackerList = this.bb!.createObjList(this.trackerList.bind(this), this.trackerListLength());
}
}

export class ConnectionRequestT {
constructor(
  public applicationType: ApplicationType = ApplicationType.Other,
  public trackerList: (TrackerListFeaturesT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const trackerList = ConnectionRequest.createTrackerListVector(builder, builder.createObjectOffsetList(this.trackerList));

  return ConnectionRequest.createConnectionRequest(builder,
    this.applicationType,
    trackerList
  );
}
}
