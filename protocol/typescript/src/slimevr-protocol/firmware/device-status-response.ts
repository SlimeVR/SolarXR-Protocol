// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ImuStatus, ImuStatusT } from '../../slimevr-protocol/hardware-info/imu-status';
import { McuStatus, McuStatusT } from '../../slimevr-protocol/hardware-info/mcu-status';


export class DeviceStatusResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DeviceStatusResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeviceStatusResponse(bb:flatbuffers.ByteBuffer, obj?:DeviceStatusResponse):DeviceStatusResponse {
  return (obj || new DeviceStatusResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeviceStatusResponse(bb:flatbuffers.ByteBuffer, obj?:DeviceStatusResponse):DeviceStatusResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeviceStatusResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rssi():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

imuStatus(index: number, obj?:ImuStatus):ImuStatus|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ImuStatus()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

imuStatusLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mcuStatus(obj?:McuStatus):McuStatus|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new McuStatus()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

batteryVoltage():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

batteryPctEstimate():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startDeviceStatusResponse(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addRssi(builder:flatbuffers.Builder, rssi:bigint) {
  builder.addFieldInt64(0, rssi, BigInt('0'));
}

static addImuStatus(builder:flatbuffers.Builder, imuStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, imuStatusOffset, 0);
}

static createImuStatusVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startImuStatusVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMcuStatus(builder:flatbuffers.Builder, mcuStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, mcuStatusOffset, 0);
}

static addBatteryVoltage(builder:flatbuffers.Builder, batteryVoltage:number) {
  builder.addFieldFloat32(3, batteryVoltage, 0.0);
}

static addBatteryPctEstimate(builder:flatbuffers.Builder, batteryPctEstimate:number) {
  builder.addFieldFloat32(4, batteryPctEstimate, 0.0);
}

static endDeviceStatusResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): DeviceStatusResponseT {
  return new DeviceStatusResponseT(
    this.rssi(),
    this.bb!.createObjList(this.imuStatus.bind(this), this.imuStatusLength()),
    (this.mcuStatus() !== null ? this.mcuStatus()!.unpack() : null),
    this.batteryVoltage(),
    this.batteryPctEstimate()
  );
}


unpackTo(_o: DeviceStatusResponseT): void {
  _o.rssi = this.rssi();
  _o.imuStatus = this.bb!.createObjList(this.imuStatus.bind(this), this.imuStatusLength());
  _o.mcuStatus = (this.mcuStatus() !== null ? this.mcuStatus()!.unpack() : null);
  _o.batteryVoltage = this.batteryVoltage();
  _o.batteryPctEstimate = this.batteryPctEstimate();
}
}

export class DeviceStatusResponseT {
constructor(
  public rssi: bigint = BigInt('0'),
  public imuStatus: (ImuStatusT)[] = [],
  public mcuStatus: McuStatusT|null = null,
  public batteryVoltage: number = 0.0,
  public batteryPctEstimate: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const imuStatus = DeviceStatusResponse.createImuStatusVector(builder, builder.createObjectOffsetList(this.imuStatus));
  const mcuStatus = (this.mcuStatus !== null ? this.mcuStatus!.pack(builder) : 0);

  DeviceStatusResponse.startDeviceStatusResponse(builder);
  DeviceStatusResponse.addRssi(builder, this.rssi);
  DeviceStatusResponse.addImuStatus(builder, imuStatus);
  DeviceStatusResponse.addMcuStatus(builder, mcuStatus);
  DeviceStatusResponse.addBatteryVoltage(builder, this.batteryVoltage);
  DeviceStatusResponse.addBatteryPctEstimate(builder, this.batteryPctEstimate);

  return DeviceStatusResponse.endDeviceStatusResponse(builder);
}
}
