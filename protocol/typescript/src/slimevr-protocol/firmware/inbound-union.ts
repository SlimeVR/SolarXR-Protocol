// automatically generated by the FlatBuffers compiler, do not modify

import { DeviceStatusResponse, DeviceStatusResponseT } from '../../slimevr-protocol/firmware/device-status-response';
import { HandshakeRequest, HandshakeRequestT } from '../../slimevr-protocol/firmware/handshake-request';
import { HeartbeatRequest, HeartbeatRequestT } from '../../slimevr-protocol/firmware/heartbeat-request';
import { LogData, LogDataT } from '../../slimevr-protocol/firmware/log-data';
import { SensorReport, SensorReportT } from '../../slimevr-protocol/firmware/sensor-report';
import { DeviceInfo, DeviceInfoT } from '../../slimevr-protocol/hardware-info/device-info';
import { Acknowledgement, AcknowledgementT } from '../../slimevr-protocol/misc/acknowledgement';


export enum InboundUnion{
  NONE = 0,
  LogData = 1,
  SensorReport = 2,
  slimevr_protocol_misc_Acknowledgement = 3,
  HeartbeatRequest = 4,
  HandshakeRequest = 5,
  slimevr_protocol_hardware_info_DeviceInfo = 6,
  DeviceStatusResponse = 7
}

export function unionToInboundUnion(
  type: InboundUnion,
  accessor: (obj:Acknowledgement|DeviceInfo|DeviceStatusResponse|HandshakeRequest|HeartbeatRequest|LogData|SensorReport) => Acknowledgement|DeviceInfo|DeviceStatusResponse|HandshakeRequest|HeartbeatRequest|LogData|SensorReport|null
): Acknowledgement|DeviceInfo|DeviceStatusResponse|HandshakeRequest|HeartbeatRequest|LogData|SensorReport|null {
  switch(InboundUnion[type]) {
    case 'NONE': return null; 
    case 'LogData': return accessor(new LogData())! as LogData;
    case 'SensorReport': return accessor(new SensorReport())! as SensorReport;
    case 'slimevr_protocol_misc_Acknowledgement': return accessor(new Acknowledgement())! as Acknowledgement;
    case 'HeartbeatRequest': return accessor(new HeartbeatRequest())! as HeartbeatRequest;
    case 'HandshakeRequest': return accessor(new HandshakeRequest())! as HandshakeRequest;
    case 'slimevr_protocol_hardware_info_DeviceInfo': return accessor(new DeviceInfo())! as DeviceInfo;
    case 'DeviceStatusResponse': return accessor(new DeviceStatusResponse())! as DeviceStatusResponse;
    default: return null;
  }
}

export function unionListToInboundUnion(
  type: InboundUnion, 
  accessor: (index: number, obj:Acknowledgement|DeviceInfo|DeviceStatusResponse|HandshakeRequest|HeartbeatRequest|LogData|SensorReport) => Acknowledgement|DeviceInfo|DeviceStatusResponse|HandshakeRequest|HeartbeatRequest|LogData|SensorReport|null, 
  index: number
): Acknowledgement|DeviceInfo|DeviceStatusResponse|HandshakeRequest|HeartbeatRequest|LogData|SensorReport|null {
  switch(InboundUnion[type]) {
    case 'NONE': return null; 
    case 'LogData': return accessor(index, new LogData())! as LogData;
    case 'SensorReport': return accessor(index, new SensorReport())! as SensorReport;
    case 'slimevr_protocol_misc_Acknowledgement': return accessor(index, new Acknowledgement())! as Acknowledgement;
    case 'HeartbeatRequest': return accessor(index, new HeartbeatRequest())! as HeartbeatRequest;
    case 'HandshakeRequest': return accessor(index, new HandshakeRequest())! as HandshakeRequest;
    case 'slimevr_protocol_hardware_info_DeviceInfo': return accessor(index, new DeviceInfo())! as DeviceInfo;
    case 'DeviceStatusResponse': return accessor(index, new DeviceStatusResponse())! as DeviceStatusResponse;
    default: return null;
  }
}

