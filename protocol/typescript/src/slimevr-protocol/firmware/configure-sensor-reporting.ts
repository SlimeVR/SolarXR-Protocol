// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ConfigureSensorReporting {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ConfigureSensorReporting {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConfigureSensorReporting(bb:flatbuffers.ByteBuffer, obj?:ConfigureSensorReporting):ConfigureSensorReporting {
  return (obj || new ConfigureSensorReporting()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConfigureSensorReporting(bb:flatbuffers.ByteBuffer, obj?:ConfigureSensorReporting):ConfigureSensorReporting {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConfigureSensorReporting()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

orientation():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rawTransAccel():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rawRotVel():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startConfigureSensorReporting(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addOrientation(builder:flatbuffers.Builder, orientation:boolean) {
  builder.addFieldInt8(0, +orientation, +false);
}

static addRawTransAccel(builder:flatbuffers.Builder, rawTransAccel:boolean) {
  builder.addFieldInt8(1, +rawTransAccel, +false);
}

static addRawRotVel(builder:flatbuffers.Builder, rawRotVel:boolean) {
  builder.addFieldInt8(2, +rawRotVel, +false);
}

static endConfigureSensorReporting(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConfigureSensorReporting(builder:flatbuffers.Builder, orientation:boolean, rawTransAccel:boolean, rawRotVel:boolean):flatbuffers.Offset {
  ConfigureSensorReporting.startConfigureSensorReporting(builder);
  ConfigureSensorReporting.addOrientation(builder, orientation);
  ConfigureSensorReporting.addRawTransAccel(builder, rawTransAccel);
  ConfigureSensorReporting.addRawRotVel(builder, rawRotVel);
  return ConfigureSensorReporting.endConfigureSensorReporting(builder);
}

unpack(): ConfigureSensorReportingT {
  return new ConfigureSensorReportingT(
    this.orientation(),
    this.rawTransAccel(),
    this.rawRotVel()
  );
}


unpackTo(_o: ConfigureSensorReportingT): void {
  _o.orientation = this.orientation();
  _o.rawTransAccel = this.rawTransAccel();
  _o.rawRotVel = this.rawRotVel();
}
}

export class ConfigureSensorReportingT {
constructor(
  public orientation: boolean = false,
  public rawTransAccel: boolean = false,
  public rawRotVel: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ConfigureSensorReporting.createConfigureSensorReporting(builder,
    this.orientation,
    this.rawTransAccel,
    this.rawRotVel
  );
}
}
