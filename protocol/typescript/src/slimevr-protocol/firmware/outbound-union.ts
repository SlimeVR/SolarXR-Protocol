// automatically generated by the FlatBuffers compiler, do not modify

import { ConfigureSensorReporting, ConfigureSensorReportingT } from '../../slimevr-protocol/firmware/configure-sensor-reporting';
import { DeviceInfoRequest, DeviceInfoRequestT } from '../../slimevr-protocol/firmware/device-info-request';
import { DeviceStatusRequest, DeviceStatusRequestT } from '../../slimevr-protocol/firmware/device-status-request';
import { HeartbeatRequest, HeartbeatRequestT } from '../../slimevr-protocol/firmware/heartbeat-request';
import { Acknowledgement, AcknowledgementT } from '../../slimevr-protocol/misc/acknowledgement';


export enum OutboundUnion{
  NONE = 0,
  ConfigureSensorReporting = 1,
  slimevr_protocol_misc_Acknowledgement = 2,
  HeartbeatRequest = 3,
  DeviceInfoRequest = 4,
  DeviceStatusRequest = 5
}

export function unionToOutboundUnion(
  type: OutboundUnion,
  accessor: (obj:Acknowledgement|ConfigureSensorReporting|DeviceInfoRequest|DeviceStatusRequest|HeartbeatRequest) => Acknowledgement|ConfigureSensorReporting|DeviceInfoRequest|DeviceStatusRequest|HeartbeatRequest|null
): Acknowledgement|ConfigureSensorReporting|DeviceInfoRequest|DeviceStatusRequest|HeartbeatRequest|null {
  switch(OutboundUnion[type]) {
    case 'NONE': return null; 
    case 'ConfigureSensorReporting': return accessor(new ConfigureSensorReporting())! as ConfigureSensorReporting;
    case 'slimevr_protocol_misc_Acknowledgement': return accessor(new Acknowledgement())! as Acknowledgement;
    case 'HeartbeatRequest': return accessor(new HeartbeatRequest())! as HeartbeatRequest;
    case 'DeviceInfoRequest': return accessor(new DeviceInfoRequest())! as DeviceInfoRequest;
    case 'DeviceStatusRequest': return accessor(new DeviceStatusRequest())! as DeviceStatusRequest;
    default: return null;
  }
}

export function unionListToOutboundUnion(
  type: OutboundUnion, 
  accessor: (index: number, obj:Acknowledgement|ConfigureSensorReporting|DeviceInfoRequest|DeviceStatusRequest|HeartbeatRequest) => Acknowledgement|ConfigureSensorReporting|DeviceInfoRequest|DeviceStatusRequest|HeartbeatRequest|null, 
  index: number
): Acknowledgement|ConfigureSensorReporting|DeviceInfoRequest|DeviceStatusRequest|HeartbeatRequest|null {
  switch(OutboundUnion[type]) {
    case 'NONE': return null; 
    case 'ConfigureSensorReporting': return accessor(index, new ConfigureSensorReporting())! as ConfigureSensorReporting;
    case 'slimevr_protocol_misc_Acknowledgement': return accessor(index, new Acknowledgement())! as Acknowledgement;
    case 'HeartbeatRequest': return accessor(index, new HeartbeatRequest())! as HeartbeatRequest;
    case 'DeviceInfoRequest': return accessor(index, new DeviceInfoRequest())! as DeviceInfoRequest;
    case 'DeviceStatusRequest': return accessor(index, new DeviceStatusRequest())! as DeviceStatusRequest;
    default: return null;
  }
}

