// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TrackerRole } from '../../../slimevr-protocol/datatypes/tracker-role';
import { Quat, QuatT } from '../../../slimevr-protocol/datatypes/math/quat';
import { Vec3f, Vec3fT } from '../../../slimevr-protocol/datatypes/math/vec3f';


/**
 * Contains all the relevant sensor data about a tracker. A tracker is anything that
 * provides kinematic data about a particular body part.
 *
 * Trackers may be synthetic/computed or instead part of an actual hardware device.
 */
export class TrackerStatus {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TrackerStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackerStatus(bb:flatbuffers.ByteBuffer, obj?:TrackerStatus):TrackerStatus {
  return (obj || new TrackerStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackerStatus(bb:flatbuffers.ByteBuffer, obj?:TrackerStatus):TrackerStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackerStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The user-assigned role of the tracker.
 */
role():TrackerRole|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

orientation(obj?:Quat):Quat|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Quat()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * Position, in meters
 */
position(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * Raw rotational velocity, in euler angles
 */
rawRotVel(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * Raw translational acceleration, in m/s^2
 */
rawTransAccel(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * Temperature in degrees celsius
 */
temp():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

/**
 * average samples per second
 */
pollRate():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

/**
 * The orientation of the tracker when mounted on the body
 */
mountingOrientation(obj?:Quat):Quat|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Quat()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startTrackerStatus(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addRole(builder:flatbuffers.Builder, role:TrackerRole) {
  builder.addFieldInt8(0, role, 0);
}

static addOrientation(builder:flatbuffers.Builder, orientationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, orientationOffset, 0);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, positionOffset, 0);
}

static addRawRotVel(builder:flatbuffers.Builder, rawRotVelOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, rawRotVelOffset, 0);
}

static addRawTransAccel(builder:flatbuffers.Builder, rawTransAccelOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, rawTransAccelOffset, 0);
}

static addTemp(builder:flatbuffers.Builder, temp:number) {
  builder.addFieldFloat32(5, temp, 0);
}

static addPollRate(builder:flatbuffers.Builder, pollRate:number) {
  builder.addFieldFloat32(6, pollRate, 0);
}

static addMountingOrientation(builder:flatbuffers.Builder, mountingOrientationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(7, mountingOrientationOffset, 0);
}

static endTrackerStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): TrackerStatusT {
  return new TrackerStatusT(
    this.role(),
    (this.orientation() !== null ? this.orientation()!.unpack() : null),
    (this.position() !== null ? this.position()!.unpack() : null),
    (this.rawRotVel() !== null ? this.rawRotVel()!.unpack() : null),
    (this.rawTransAccel() !== null ? this.rawTransAccel()!.unpack() : null),
    this.temp(),
    this.pollRate(),
    (this.mountingOrientation() !== null ? this.mountingOrientation()!.unpack() : null)
  );
}


unpackTo(_o: TrackerStatusT): void {
  _o.role = this.role();
  _o.orientation = (this.orientation() !== null ? this.orientation()!.unpack() : null);
  _o.position = (this.position() !== null ? this.position()!.unpack() : null);
  _o.rawRotVel = (this.rawRotVel() !== null ? this.rawRotVel()!.unpack() : null);
  _o.rawTransAccel = (this.rawTransAccel() !== null ? this.rawTransAccel()!.unpack() : null);
  _o.temp = this.temp();
  _o.pollRate = this.pollRate();
  _o.mountingOrientation = (this.mountingOrientation() !== null ? this.mountingOrientation()!.unpack() : null);
}
}

export class TrackerStatusT {
constructor(
  public role: TrackerRole|null = null,
  public orientation: QuatT|null = null,
  public position: Vec3fT|null = null,
  public rawRotVel: Vec3fT|null = null,
  public rawTransAccel: Vec3fT|null = null,
  public temp: number|null = null,
  public pollRate: number|null = null,
  public mountingOrientation: QuatT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  TrackerStatus.startTrackerStatus(builder);
  if (this.role !== null)
    TrackerStatus.addRole(builder, this.role);
  TrackerStatus.addOrientation(builder, (this.orientation !== null ? this.orientation!.pack(builder) : 0));
  TrackerStatus.addPosition(builder, (this.position !== null ? this.position!.pack(builder) : 0));
  TrackerStatus.addRawRotVel(builder, (this.rawRotVel !== null ? this.rawRotVel!.pack(builder) : 0));
  TrackerStatus.addRawTransAccel(builder, (this.rawTransAccel !== null ? this.rawTransAccel!.pack(builder) : 0));
  if (this.temp !== null)
    TrackerStatus.addTemp(builder, this.temp);
  if (this.pollRate !== null)
    TrackerStatus.addPollRate(builder, this.pollRate);
  TrackerStatus.addMountingOrientation(builder, (this.mountingOrientation !== null ? this.mountingOrientation!.pack(builder) : 0));

  return TrackerStatus.endTrackerStatus(builder);
}
}
