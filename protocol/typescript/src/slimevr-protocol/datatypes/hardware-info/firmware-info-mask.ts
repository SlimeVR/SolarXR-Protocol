// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * A mask of the info in `FirmwareInfo`
 */
export class FirmwareInfoMask {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FirmwareInfoMask {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFirmwareInfoMask(bb:flatbuffers.ByteBuffer, obj?:FirmwareInfoMask):FirmwareInfoMask {
  return (obj || new FirmwareInfoMask()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFirmwareInfoMask(bb:flatbuffers.ByteBuffer, obj?:FirmwareInfoMask):FirmwareInfoMask {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FirmwareInfoMask()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mcuId():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

imuIds():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

displayName():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

model():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

manufacturer():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

hardwareRevision():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

firmwareVersion():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

macAddress():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startFirmwareInfoMask(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addMcuId(builder:flatbuffers.Builder, mcuId:boolean) {
  builder.addFieldInt8(0, +mcuId, +false);
}

static addImuIds(builder:flatbuffers.Builder, imuIds:boolean) {
  builder.addFieldInt8(1, +imuIds, +false);
}

static addDisplayName(builder:flatbuffers.Builder, displayName:boolean) {
  builder.addFieldInt8(2, +displayName, +false);
}

static addModel(builder:flatbuffers.Builder, model:boolean) {
  builder.addFieldInt8(3, +model, +false);
}

static addManufacturer(builder:flatbuffers.Builder, manufacturer:boolean) {
  builder.addFieldInt8(4, +manufacturer, +false);
}

static addHardwareRevision(builder:flatbuffers.Builder, hardwareRevision:boolean) {
  builder.addFieldInt8(5, +hardwareRevision, +false);
}

static addFirmwareVersion(builder:flatbuffers.Builder, firmwareVersion:boolean) {
  builder.addFieldInt8(6, +firmwareVersion, +false);
}

static addMacAddress(builder:flatbuffers.Builder, macAddress:boolean) {
  builder.addFieldInt8(7, +macAddress, +false);
}

static endFirmwareInfoMask(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFirmwareInfoMask(builder:flatbuffers.Builder, mcuId:boolean, imuIds:boolean, displayName:boolean, model:boolean, manufacturer:boolean, hardwareRevision:boolean, firmwareVersion:boolean, macAddress:boolean):flatbuffers.Offset {
  FirmwareInfoMask.startFirmwareInfoMask(builder);
  FirmwareInfoMask.addMcuId(builder, mcuId);
  FirmwareInfoMask.addImuIds(builder, imuIds);
  FirmwareInfoMask.addDisplayName(builder, displayName);
  FirmwareInfoMask.addModel(builder, model);
  FirmwareInfoMask.addManufacturer(builder, manufacturer);
  FirmwareInfoMask.addHardwareRevision(builder, hardwareRevision);
  FirmwareInfoMask.addFirmwareVersion(builder, firmwareVersion);
  FirmwareInfoMask.addMacAddress(builder, macAddress);
  return FirmwareInfoMask.endFirmwareInfoMask(builder);
}

unpack(): FirmwareInfoMaskT {
  return new FirmwareInfoMaskT(
    this.mcuId(),
    this.imuIds(),
    this.displayName(),
    this.model(),
    this.manufacturer(),
    this.hardwareRevision(),
    this.firmwareVersion(),
    this.macAddress()
  );
}


unpackTo(_o: FirmwareInfoMaskT): void {
  _o.mcuId = this.mcuId();
  _o.imuIds = this.imuIds();
  _o.displayName = this.displayName();
  _o.model = this.model();
  _o.manufacturer = this.manufacturer();
  _o.hardwareRevision = this.hardwareRevision();
  _o.firmwareVersion = this.firmwareVersion();
  _o.macAddress = this.macAddress();
}
}

export class FirmwareInfoMaskT {
constructor(
  public mcuId: boolean = false,
  public imuIds: boolean = false,
  public displayName: boolean = false,
  public model: boolean = false,
  public manufacturer: boolean = false,
  public hardwareRevision: boolean = false,
  public firmwareVersion: boolean = false,
  public macAddress: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return FirmwareInfoMask.createFirmwareInfoMask(builder,
    this.mcuId,
    this.imuIds,
    this.displayName,
    this.model,
    this.manufacturer,
    this.hardwareRevision,
    this.firmwareVersion,
    this.macAddress
  );
}
}
