// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ImuStatus {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ImuStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsImuStatus(bb:flatbuffers.ByteBuffer, obj?:ImuStatus):ImuStatus {
  return (obj || new ImuStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsImuStatus(bb:flatbuffers.ByteBuffer, obj?:ImuStatus):ImuStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ImuStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

temp():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

pollRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startImuStatus(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTemp(builder:flatbuffers.Builder, temp:number) {
  builder.addFieldFloat32(0, temp, 0.0);
}

static addPollRate(builder:flatbuffers.Builder, pollRate:number) {
  builder.addFieldFloat32(1, pollRate, 0.0);
}

static endImuStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createImuStatus(builder:flatbuffers.Builder, temp:number, pollRate:number):flatbuffers.Offset {
  ImuStatus.startImuStatus(builder);
  ImuStatus.addTemp(builder, temp);
  ImuStatus.addPollRate(builder, pollRate);
  return ImuStatus.endImuStatus(builder);
}

unpack(): ImuStatusT {
  return new ImuStatusT(
    this.temp(),
    this.pollRate()
  );
}


unpackTo(_o: ImuStatusT): void {
  _o.temp = this.temp();
  _o.pollRate = this.pollRate();
}
}

export class ImuStatusT {
constructor(
  public temp: number = 0.0,
  public pollRate: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ImuStatus.createImuStatus(builder,
    this.temp,
    this.pollRate
  );
}
}
