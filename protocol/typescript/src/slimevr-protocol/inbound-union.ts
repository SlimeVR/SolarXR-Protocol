// automatically generated by the FlatBuffers compiler, do not modify

import { DataFeedRequest, DataFeedRequestT } from '../slimevr-protocol/data-feed/data-feed-request';
import { DataFeedUpdate, DataFeedUpdateT } from '../slimevr-protocol/data-feed/data-feed-update';
import { PollDataFeed, PollDataFeedT } from '../slimevr-protocol/data-feed/poll-data-feed';
import { AssignTrackerRequest, AssignTrackerRequestT } from '../slimevr-protocol/rpc/assign-tracker-request';
import { ChangeSettingsRequest, ChangeSettingsRequestT } from '../slimevr-protocol/rpc/change-settings-request';
import { HeartbeatRequest, HeartbeatRequestT } from '../slimevr-protocol/rpc/heartbeat-request';
import { ResetRequest, ResetRequestT } from '../slimevr-protocol/rpc/reset-request';
import { SettingsRequest, SettingsRequestT } from '../slimevr-protocol/rpc/settings-request';


export enum InboundUnion{
  NONE = 0,
  slimevr_protocol_rpc_HeartbeatRequest = 1,
  slimevr_protocol_rpc_ResetRequest = 2,
  slimevr_protocol_rpc_AssignTrackerRequest = 3,
  slimevr_protocol_rpc_SettingsRequest = 4,
  slimevr_protocol_rpc_ChangeSettingsRequest = 5,
  slimevr_protocol_data_feed_PollDataFeed = 6,
  slimevr_protocol_data_feed_DataFeedRequest = 7,
  slimevr_protocol_data_feed_DataFeedUpdate = 8
}

export function unionToInboundUnion(
  type: InboundUnion,
  accessor: (obj:AssignTrackerRequest|ChangeSettingsRequest|DataFeedRequest|DataFeedUpdate|HeartbeatRequest|PollDataFeed|ResetRequest|SettingsRequest) => AssignTrackerRequest|ChangeSettingsRequest|DataFeedRequest|DataFeedUpdate|HeartbeatRequest|PollDataFeed|ResetRequest|SettingsRequest|null
): AssignTrackerRequest|ChangeSettingsRequest|DataFeedRequest|DataFeedUpdate|HeartbeatRequest|PollDataFeed|ResetRequest|SettingsRequest|null {
  switch(InboundUnion[type]) {
    case 'NONE': return null; 
    case 'slimevr_protocol_rpc_HeartbeatRequest': return accessor(new HeartbeatRequest())! as HeartbeatRequest;
    case 'slimevr_protocol_rpc_ResetRequest': return accessor(new ResetRequest())! as ResetRequest;
    case 'slimevr_protocol_rpc_AssignTrackerRequest': return accessor(new AssignTrackerRequest())! as AssignTrackerRequest;
    case 'slimevr_protocol_rpc_SettingsRequest': return accessor(new SettingsRequest())! as SettingsRequest;
    case 'slimevr_protocol_rpc_ChangeSettingsRequest': return accessor(new ChangeSettingsRequest())! as ChangeSettingsRequest;
    case 'slimevr_protocol_data_feed_PollDataFeed': return accessor(new PollDataFeed())! as PollDataFeed;
    case 'slimevr_protocol_data_feed_DataFeedRequest': return accessor(new DataFeedRequest())! as DataFeedRequest;
    case 'slimevr_protocol_data_feed_DataFeedUpdate': return accessor(new DataFeedUpdate())! as DataFeedUpdate;
    default: return null;
  }
}

export function unionListToInboundUnion(
  type: InboundUnion, 
  accessor: (index: number, obj:AssignTrackerRequest|ChangeSettingsRequest|DataFeedRequest|DataFeedUpdate|HeartbeatRequest|PollDataFeed|ResetRequest|SettingsRequest) => AssignTrackerRequest|ChangeSettingsRequest|DataFeedRequest|DataFeedUpdate|HeartbeatRequest|PollDataFeed|ResetRequest|SettingsRequest|null, 
  index: number
): AssignTrackerRequest|ChangeSettingsRequest|DataFeedRequest|DataFeedUpdate|HeartbeatRequest|PollDataFeed|ResetRequest|SettingsRequest|null {
  switch(InboundUnion[type]) {
    case 'NONE': return null; 
    case 'slimevr_protocol_rpc_HeartbeatRequest': return accessor(index, new HeartbeatRequest())! as HeartbeatRequest;
    case 'slimevr_protocol_rpc_ResetRequest': return accessor(index, new ResetRequest())! as ResetRequest;
    case 'slimevr_protocol_rpc_AssignTrackerRequest': return accessor(index, new AssignTrackerRequest())! as AssignTrackerRequest;
    case 'slimevr_protocol_rpc_SettingsRequest': return accessor(index, new SettingsRequest())! as SettingsRequest;
    case 'slimevr_protocol_rpc_ChangeSettingsRequest': return accessor(index, new ChangeSettingsRequest())! as ChangeSettingsRequest;
    case 'slimevr_protocol_data_feed_PollDataFeed': return accessor(index, new PollDataFeed())! as PollDataFeed;
    case 'slimevr_protocol_data_feed_DataFeedRequest': return accessor(index, new DataFeedRequest())! as DataFeedRequest;
    case 'slimevr_protocol_data_feed_DataFeedUpdate': return accessor(index, new DataFeedUpdate())! as DataFeedUpdate;
    default: return null;
  }
}

