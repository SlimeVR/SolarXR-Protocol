// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * A mask of the different components in `TrackerComponent`
 */
export class TrackerDataMask {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TrackerDataMask {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackerDataMask(bb:flatbuffers.ByteBuffer, obj?:TrackerDataMask):TrackerDataMask {
  return (obj || new TrackerDataMask()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackerDataMask(bb:flatbuffers.ByteBuffer, obj?:TrackerDataMask):TrackerDataMask {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackerDataMask()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bodyPart():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

orientation():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

position():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rawRotVel():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rawTransAccel():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

temp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

pollRate():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mountingRotation():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startTrackerDataMask(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addBodyPart(builder:flatbuffers.Builder, bodyPart:boolean) {
  builder.addFieldInt8(0, +bodyPart, +false);
}

static addOrientation(builder:flatbuffers.Builder, orientation:boolean) {
  builder.addFieldInt8(1, +orientation, +false);
}

static addPosition(builder:flatbuffers.Builder, position:boolean) {
  builder.addFieldInt8(2, +position, +false);
}

static addRawRotVel(builder:flatbuffers.Builder, rawRotVel:boolean) {
  builder.addFieldInt8(3, +rawRotVel, +false);
}

static addRawTransAccel(builder:flatbuffers.Builder, rawTransAccel:boolean) {
  builder.addFieldInt8(4, +rawTransAccel, +false);
}

static addTemp(builder:flatbuffers.Builder, temp:boolean) {
  builder.addFieldInt8(5, +temp, +false);
}

static addPollRate(builder:flatbuffers.Builder, pollRate:boolean) {
  builder.addFieldInt8(6, +pollRate, +false);
}

static addMountingRotation(builder:flatbuffers.Builder, mountingRotation:boolean) {
  builder.addFieldInt8(7, +mountingRotation, +false);
}

static endTrackerDataMask(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTrackerDataMask(builder:flatbuffers.Builder, bodyPart:boolean, orientation:boolean, position:boolean, rawRotVel:boolean, rawTransAccel:boolean, temp:boolean, pollRate:boolean, mountingRotation:boolean):flatbuffers.Offset {
  TrackerDataMask.startTrackerDataMask(builder);
  TrackerDataMask.addBodyPart(builder, bodyPart);
  TrackerDataMask.addOrientation(builder, orientation);
  TrackerDataMask.addPosition(builder, position);
  TrackerDataMask.addRawRotVel(builder, rawRotVel);
  TrackerDataMask.addRawTransAccel(builder, rawTransAccel);
  TrackerDataMask.addTemp(builder, temp);
  TrackerDataMask.addPollRate(builder, pollRate);
  TrackerDataMask.addMountingRotation(builder, mountingRotation);
  return TrackerDataMask.endTrackerDataMask(builder);
}

unpack(): TrackerDataMaskT {
  return new TrackerDataMaskT(
    this.bodyPart(),
    this.orientation(),
    this.position(),
    this.rawRotVel(),
    this.rawTransAccel(),
    this.temp(),
    this.pollRate(),
    this.mountingRotation()
  );
}


unpackTo(_o: TrackerDataMaskT): void {
  _o.bodyPart = this.bodyPart();
  _o.orientation = this.orientation();
  _o.position = this.position();
  _o.rawRotVel = this.rawRotVel();
  _o.rawTransAccel = this.rawTransAccel();
  _o.temp = this.temp();
  _o.pollRate = this.pollRate();
  _o.mountingRotation = this.mountingRotation();
}
}

export class TrackerDataMaskT {
constructor(
  public bodyPart: boolean = false,
  public orientation: boolean = false,
  public position: boolean = false,
  public rawRotVel: boolean = false,
  public rawTransAccel: boolean = false,
  public temp: boolean = false,
  public pollRate: boolean = false,
  public mountingRotation: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TrackerDataMask.createTrackerDataMask(builder,
    this.bodyPart,
    this.orientation,
    this.position,
    this.rawRotVel,
    this.rawTransAccel,
    this.temp,
    this.pollRate,
    this.mountingRotation
  );
}
}
