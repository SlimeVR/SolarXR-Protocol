// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BodyPartW, BodyPartWT } from '../../../slimevr-protocol/datatypes/body-part-w';
import { HzF32, HzF32T } from '../../../slimevr-protocol/datatypes/hz-f32';
import { TrackerId, TrackerIdT } from '../../../slimevr-protocol/datatypes/tracker-id';
import { ImuType } from '../../../slimevr-protocol/datatypes/hardware-info/imu-type';
import { Quat, QuatT } from '../../../slimevr-protocol/datatypes/math/quat';


/**
 * Static description of a tracker
 */
export class TrackerInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TrackerInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackerInfo(bb:flatbuffers.ByteBuffer, obj?:TrackerInfo):TrackerInfo {
  return (obj || new TrackerInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackerInfo(bb:flatbuffers.ByteBuffer, obj?:TrackerInfo):TrackerInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackerInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

trackerId(obj?:TrackerId):TrackerId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TrackerId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

imuType():ImuType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : ImuType.Other;
}

/**
 * The user-assigned role of the tracker.
 */
bodyPart(obj?:BodyPartW):BodyPartW|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new BodyPartW()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * average samples per second
 */
pollRate(obj?:HzF32):HzF32|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new HzF32()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * The orientation of the tracker when mounted on the body
 */
mountingOrientation(obj?:Quat):Quat|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Quat()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startTrackerInfo(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addTrackerId(builder:flatbuffers.Builder, trackerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, trackerIdOffset, 0);
}

static addImuType(builder:flatbuffers.Builder, imuType:ImuType) {
  builder.addFieldInt16(1, imuType, ImuType.Other);
}

static addBodyPart(builder:flatbuffers.Builder, bodyPartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, bodyPartOffset, 0);
}

static addPollRate(builder:flatbuffers.Builder, pollRateOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, pollRateOffset, 0);
}

static addMountingOrientation(builder:flatbuffers.Builder, mountingOrientationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, mountingOrientationOffset, 0);
}

static endTrackerInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): TrackerInfoT {
  return new TrackerInfoT(
    (this.trackerId() !== null ? this.trackerId()!.unpack() : null),
    this.imuType(),
    (this.bodyPart() !== null ? this.bodyPart()!.unpack() : null),
    (this.pollRate() !== null ? this.pollRate()!.unpack() : null),
    (this.mountingOrientation() !== null ? this.mountingOrientation()!.unpack() : null)
  );
}


unpackTo(_o: TrackerInfoT): void {
  _o.trackerId = (this.trackerId() !== null ? this.trackerId()!.unpack() : null);
  _o.imuType = this.imuType();
  _o.bodyPart = (this.bodyPart() !== null ? this.bodyPart()!.unpack() : null);
  _o.pollRate = (this.pollRate() !== null ? this.pollRate()!.unpack() : null);
  _o.mountingOrientation = (this.mountingOrientation() !== null ? this.mountingOrientation()!.unpack() : null);
}
}

export class TrackerInfoT {
constructor(
  public trackerId: TrackerIdT|null = null,
  public imuType: ImuType = ImuType.Other,
  public bodyPart: BodyPartWT|null = null,
  public pollRate: HzF32T|null = null,
  public mountingOrientation: QuatT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const trackerId = (this.trackerId !== null ? this.trackerId!.pack(builder) : 0);
  const bodyPart = (this.bodyPart !== null ? this.bodyPart!.pack(builder) : 0);

  TrackerInfo.startTrackerInfo(builder);
  TrackerInfo.addTrackerId(builder, trackerId);
  TrackerInfo.addImuType(builder, this.imuType);
  TrackerInfo.addBodyPart(builder, bodyPart);
  TrackerInfo.addPollRate(builder, (this.pollRate !== null ? this.pollRate!.pack(builder) : 0));
  TrackerInfo.addMountingOrientation(builder, (this.mountingOrientation !== null ? this.mountingOrientation!.pack(builder) : 0));

  return TrackerInfo.endTrackerInfo(builder);
}
}
