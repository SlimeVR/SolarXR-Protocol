// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DeviceDataMask, DeviceDataMaskT } from '../../slimevr-protocol/data-feed/device-data/device-data-mask';


/**
 * All information related to the configuration of a data feed. This may be sent
 * as part of a `StartFeed`.
 */
export class DataFeedConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DataFeedConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataFeedConfig(bb:flatbuffers.ByteBuffer, obj?:DataFeedConfig):DataFeedConfig {
  return (obj || new DataFeedConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataFeedConfig(bb:flatbuffers.ByteBuffer, obj?:DataFeedConfig):DataFeedConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataFeedConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Minimum delay in milliseconds between new data updates. This value will be
 * ignored when used for a `PollDataFeed`.
 */
minimumTimeSinceLast():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

dataMask(obj?:DeviceDataMask):DeviceDataMask|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DeviceDataMask()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

trackers():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDataFeedConfig(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addMinimumTimeSinceLast(builder:flatbuffers.Builder, minimumTimeSinceLast:number) {
  builder.addFieldInt16(0, minimumTimeSinceLast, 0);
}

static addDataMask(builder:flatbuffers.Builder, dataMaskOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataMaskOffset, 0);
}

static addTrackers(builder:flatbuffers.Builder, trackers:boolean) {
  builder.addFieldInt8(2, +trackers, +false);
}

static endDataFeedConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): DataFeedConfigT {
  return new DataFeedConfigT(
    this.minimumTimeSinceLast(),
    (this.dataMask() !== null ? this.dataMask()!.unpack() : null),
    this.trackers()
  );
}


unpackTo(_o: DataFeedConfigT): void {
  _o.minimumTimeSinceLast = this.minimumTimeSinceLast();
  _o.dataMask = (this.dataMask() !== null ? this.dataMask()!.unpack() : null);
  _o.trackers = this.trackers();
}
}

export class DataFeedConfigT {
constructor(
  public minimumTimeSinceLast: number = 0,
  public dataMask: DeviceDataMaskT|null = null,
  public trackers: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const dataMask = (this.dataMask !== null ? this.dataMask!.pack(builder) : 0);

  DataFeedConfig.startDataFeedConfig(builder);
  DataFeedConfig.addMinimumTimeSinceLast(builder, this.minimumTimeSinceLast);
  DataFeedConfig.addDataMask(builder, dataMask);
  DataFeedConfig.addTrackers(builder, this.trackers);

  return DataFeedConfig.endDataFeedConfig(builder);
}
}
