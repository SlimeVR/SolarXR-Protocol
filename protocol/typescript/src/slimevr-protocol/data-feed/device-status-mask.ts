// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FirmwareInfoMask, FirmwareInfoMaskT } from '../../slimevr-protocol/datatypes/hardware-info/firmware-info-mask';
import { FirmwareStatusMask, FirmwareStatusMaskT } from '../../slimevr-protocol/datatypes/hardware-info/firmware-status-mask';
import { TrackerStatusMask, TrackerStatusMaskT } from '../../slimevr-protocol/datatypes/tracker/tracker-status-mask';


/**
 * A mask of values to be reported in subsequent DeviceStatus. Values set to `false`
 * or `null` will not reported. By default, all fields are false/null.
 *
 * If you set a value to `true`, it is not guaranteed that the sender actually has
 * such a value to send. In this case, they will probably send `null`, and the receiver
 * has the choice to disconnect due to missing data.
 */
export class DeviceStatusMask {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DeviceStatusMask {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeviceStatusMask(bb:flatbuffers.ByteBuffer, obj?:DeviceStatusMask):DeviceStatusMask {
  return (obj || new DeviceStatusMask()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeviceStatusMask(bb:flatbuffers.ByteBuffer, obj?:DeviceStatusMask):DeviceStatusMask {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeviceStatusMask()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

customName():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

firmwareInfo(obj?:FirmwareInfoMask):FirmwareInfoMask|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FirmwareInfoMask()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

firmwareStatus(obj?:FirmwareStatusMask):FirmwareStatusMask|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FirmwareStatusMask()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

trackerStatuses(obj?:TrackerStatusMask):TrackerStatusMask|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new TrackerStatusMask()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDeviceStatusMask(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addCustomName(builder:flatbuffers.Builder, customName:boolean) {
  builder.addFieldInt8(0, +customName, +false);
}

static addFirmwareInfo(builder:flatbuffers.Builder, firmwareInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, firmwareInfoOffset, 0);
}

static addFirmwareStatus(builder:flatbuffers.Builder, firmwareStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, firmwareStatusOffset, 0);
}

static addTrackerStatuses(builder:flatbuffers.Builder, trackerStatusesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, trackerStatusesOffset, 0);
}

static endDeviceStatusMask(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): DeviceStatusMaskT {
  return new DeviceStatusMaskT(
    this.customName(),
    (this.firmwareInfo() !== null ? this.firmwareInfo()!.unpack() : null),
    (this.firmwareStatus() !== null ? this.firmwareStatus()!.unpack() : null),
    (this.trackerStatuses() !== null ? this.trackerStatuses()!.unpack() : null)
  );
}


unpackTo(_o: DeviceStatusMaskT): void {
  _o.customName = this.customName();
  _o.firmwareInfo = (this.firmwareInfo() !== null ? this.firmwareInfo()!.unpack() : null);
  _o.firmwareStatus = (this.firmwareStatus() !== null ? this.firmwareStatus()!.unpack() : null);
  _o.trackerStatuses = (this.trackerStatuses() !== null ? this.trackerStatuses()!.unpack() : null);
}
}

export class DeviceStatusMaskT {
constructor(
  public customName: boolean = false,
  public firmwareInfo: FirmwareInfoMaskT|null = null,
  public firmwareStatus: FirmwareStatusMaskT|null = null,
  public trackerStatuses: TrackerStatusMaskT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const firmwareInfo = (this.firmwareInfo !== null ? this.firmwareInfo!.pack(builder) : 0);
  const firmwareStatus = (this.firmwareStatus !== null ? this.firmwareStatus!.pack(builder) : 0);
  const trackerStatuses = (this.trackerStatuses !== null ? this.trackerStatuses!.pack(builder) : 0);

  DeviceStatusMask.startDeviceStatusMask(builder);
  DeviceStatusMask.addCustomName(builder, this.customName);
  DeviceStatusMask.addFirmwareInfo(builder, firmwareInfo);
  DeviceStatusMask.addFirmwareStatus(builder, firmwareStatus);
  DeviceStatusMask.addTrackerStatuses(builder, trackerStatuses);

  return DeviceStatusMask.endDeviceStatusMask(builder);
}
}
