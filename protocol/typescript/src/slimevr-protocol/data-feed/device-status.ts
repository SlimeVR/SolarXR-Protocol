// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FirmwareInfo, FirmwareInfoT } from '../../slimevr-protocol/datatypes/hardware-info/firmware-info';
import { FirmwareStatus, FirmwareStatusT } from '../../slimevr-protocol/datatypes/hardware-info/firmware-status';
import { TrackerStatus, TrackerStatusT } from '../../slimevr-protocol/datatypes/tracker/tracker-status';


/**
 * All possible info related to a hardware device. For example a vive tracker is a
 * single hardware device, and a slime tracker with two extensions is a single hardware
 * device.
 *
 * Each `DeviceStatus` contains data about one or more `TrackerStatus`es. For example,
 * a SlimeVR waist tracker with a chest extension has two `TrackerStatus`es, because
 * it is tracking information about two different parts of the body.
 */
export class DeviceStatus {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):DeviceStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeviceStatus(bb:flatbuffers.ByteBuffer, obj?:DeviceStatus):DeviceStatus {
  return (obj || new DeviceStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeviceStatus(bb:flatbuffers.ByteBuffer, obj?:DeviceStatus):DeviceStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeviceStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * A unique ID for the device. IDs are not guaranteed to be the same after
 * the connection is terminated.
 */
id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

/**
 * The dynamically changeable name of the device. This might be set by the
 * user to help them remember which tracker is which.
 */
customName():string|null
customName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
customName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mostly-static info about the device hardware
 */
firmwareInfo(obj?:FirmwareInfo):FirmwareInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FirmwareInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * General info about the status of the device
 */
firmwareStatus(obj?:FirmwareStatus):FirmwareStatus|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new FirmwareStatus()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * All the relevant information from the different trackers, in an order
 * dictated by the conventions of the firmware running on the device
 */
trackerStatuses(index: number, obj?:TrackerStatus):TrackerStatus|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new TrackerStatus()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

trackerStatusesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startDeviceStatus(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt8(0, id, 0);
}

static addCustomName(builder:flatbuffers.Builder, customNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, customNameOffset, 0);
}

static addFirmwareInfo(builder:flatbuffers.Builder, firmwareInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, firmwareInfoOffset, 0);
}

static addFirmwareStatus(builder:flatbuffers.Builder, firmwareStatusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, firmwareStatusOffset, 0);
}

static addTrackerStatuses(builder:flatbuffers.Builder, trackerStatusesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, trackerStatusesOffset, 0);
}

static createTrackerStatusesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrackerStatusesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endDeviceStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): DeviceStatusT {
  return new DeviceStatusT(
    this.id(),
    this.customName(),
    (this.firmwareInfo() !== null ? this.firmwareInfo()!.unpack() : null),
    (this.firmwareStatus() !== null ? this.firmwareStatus()!.unpack() : null),
    this.bb!.createObjList(this.trackerStatuses.bind(this), this.trackerStatusesLength())
  );
}


unpackTo(_o: DeviceStatusT): void {
  _o.id = this.id();
  _o.customName = this.customName();
  _o.firmwareInfo = (this.firmwareInfo() !== null ? this.firmwareInfo()!.unpack() : null);
  _o.firmwareStatus = (this.firmwareStatus() !== null ? this.firmwareStatus()!.unpack() : null);
  _o.trackerStatuses = this.bb!.createObjList(this.trackerStatuses.bind(this), this.trackerStatusesLength());
}
}

export class DeviceStatusT {
constructor(
  public id: number = 0,
  public customName: string|Uint8Array|null = null,
  public firmwareInfo: FirmwareInfoT|null = null,
  public firmwareStatus: FirmwareStatusT|null = null,
  public trackerStatuses: (TrackerStatusT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const customName = (this.customName !== null ? builder.createString(this.customName!) : 0);
  const firmwareInfo = (this.firmwareInfo !== null ? this.firmwareInfo!.pack(builder) : 0);
  const firmwareStatus = (this.firmwareStatus !== null ? this.firmwareStatus!.pack(builder) : 0);
  const trackerStatuses = DeviceStatus.createTrackerStatusesVector(builder, builder.createObjectOffsetList(this.trackerStatuses));

  DeviceStatus.startDeviceStatus(builder);
  DeviceStatus.addId(builder, this.id);
  DeviceStatus.addCustomName(builder, customName);
  DeviceStatus.addFirmwareInfo(builder, firmwareInfo);
  DeviceStatus.addFirmwareStatus(builder, firmwareStatus);
  DeviceStatus.addTrackerStatuses(builder, trackerStatuses);

  return DeviceStatus.endDeviceStatus(builder);
}
}
