// automatically generated by the FlatBuffers compiler, do not modify

import { Bytes, BytesT } from '../../solarxr_protocol/datatypes/bytes';
import { String, StringT } from '../../solarxr_protocol/datatypes/string';
import { KeyValues, KeyValuesT } from '../../solarxr_protocol/pub_sub/key-values';


export enum Payload{
  NONE = 0,
  solarxr_protocol_datatypes_String = 1,
  solarxr_protocol_datatypes_Bytes = 2,
  KeyValues = 3
}

export function unionToPayload(
  type: Payload,
  accessor: (obj:Bytes|KeyValues|String) => Bytes|KeyValues|String|null
): Bytes|KeyValues|String|null {
  switch(Payload[type]) {
    case 'NONE': return null; 
    case 'solarxr_protocol_datatypes_String': return accessor(new String())! as String;
    case 'solarxr_protocol_datatypes_Bytes': return accessor(new Bytes())! as Bytes;
    case 'KeyValues': return accessor(new KeyValues())! as KeyValues;
    default: return null;
  }
}

export function unionListToPayload(
  type: Payload, 
  accessor: (index: number, obj:Bytes|KeyValues|String) => Bytes|KeyValues|String|null, 
  index: number
): Bytes|KeyValues|String|null {
  switch(Payload[type]) {
    case 'NONE': return null; 
    case 'solarxr_protocol_datatypes_String': return accessor(index, new String())! as String;
    case 'solarxr_protocol_datatypes_Bytes': return accessor(index, new Bytes())! as Bytes;
    case 'KeyValues': return accessor(index, new KeyValues())! as KeyValues;
    default: return null;
  }
}

