// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * A `TopicId` identifies an application-specific category of data. Because it
 * is application-specific, it is up to the application within the specified
 * organization to define its semantics/meaning.
 *
 * For example, "bob" may have an "overlay" app with a "settings" topic for controlling
 * the overlay visibility and other settings, as well as a "video feed" topic for
 * allowing other applications to display video data in a wrist mounted window in VR.
 */
export class TopicId {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TopicId {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTopicId(bb:flatbuffers.ByteBuffer, obj?:TopicId):TopicId {
  return (obj || new TopicId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTopicId(bb:flatbuffers.ByteBuffer, obj?:TopicId):TopicId {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TopicId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The organization/developer that defines the meaning of this feature. Avoids name
 * clashes. Should be something unique - same idea as java package identifier.
 */
organization():string|null
organization(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
organization(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the application/device. Should be unique within the organization.
 */
appName():string|null
appName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
appName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The name of the topic. Should be unique within the application.
 */
topic():string|null
topic(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
topic(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTopicId(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addOrganization(builder:flatbuffers.Builder, organizationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, organizationOffset, 0);
}

static addAppName(builder:flatbuffers.Builder, appNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, appNameOffset, 0);
}

static addTopic(builder:flatbuffers.Builder, topicOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, topicOffset, 0);
}

static endTopicId(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTopicId(builder:flatbuffers.Builder, organizationOffset:flatbuffers.Offset, appNameOffset:flatbuffers.Offset, topicOffset:flatbuffers.Offset):flatbuffers.Offset {
  TopicId.startTopicId(builder);
  TopicId.addOrganization(builder, organizationOffset);
  TopicId.addAppName(builder, appNameOffset);
  TopicId.addTopic(builder, topicOffset);
  return TopicId.endTopicId(builder);
}

unpack(): TopicIdT {
  return new TopicIdT(
    this.organization(),
    this.appName(),
    this.topic()
  );
}


unpackTo(_o: TopicIdT): void {
  _o.organization = this.organization();
  _o.appName = this.appName();
  _o.topic = this.topic();
}
}

export class TopicIdT {
constructor(
  public organization: string|Uint8Array|null = null,
  public appName: string|Uint8Array|null = null,
  public topic: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const organization = (this.organization !== null ? builder.createString(this.organization!) : 0);
  const appName = (this.appName !== null ? builder.createString(this.appName!) : 0);
  const topic = (this.topic !== null ? builder.createString(this.topic!) : 0);

  return TopicId.createTopicId(builder,
    organization,
    appName,
    topic
  );
}
}
