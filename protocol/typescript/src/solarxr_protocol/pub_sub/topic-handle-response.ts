// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TopicHandle, TopicHandleT } from '../../solarxr_protocol/pub_sub/topic-handle';


/**
 * Response for `TopicHandleRequest`
 */
export class TopicHandleResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TopicHandleResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTopicHandleResponse(bb:flatbuffers.ByteBuffer, obj?:TopicHandleResponse):TopicHandleResponse {
  return (obj || new TopicHandleResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTopicHandleResponse(bb:flatbuffers.ByteBuffer, obj?:TopicHandleResponse):TopicHandleResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TopicHandleResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

handle(obj?:TopicHandle):TopicHandle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TopicHandle()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startTopicHandleResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addHandle(builder:flatbuffers.Builder, handleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, handleOffset, 0);
}

static endTopicHandleResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTopicHandleResponse(builder:flatbuffers.Builder, handleOffset:flatbuffers.Offset):flatbuffers.Offset {
  TopicHandleResponse.startTopicHandleResponse(builder);
  TopicHandleResponse.addHandle(builder, handleOffset);
  return TopicHandleResponse.endTopicHandleResponse(builder);
}

unpack(): TopicHandleResponseT {
  return new TopicHandleResponseT(
    (this.handle() !== null ? this.handle()!.unpack() : null)
  );
}


unpackTo(_o: TopicHandleResponseT): void {
  _o.handle = (this.handle() !== null ? this.handle()!.unpack() : null);
}
}

export class TopicHandleResponseT {
constructor(
  public handle: TopicHandleT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const handle = (this.handle !== null ? this.handle!.pack(builder) : 0);

  return TopicHandleResponse.createTopicHandleResponse(builder,
    handle
  );
}
}
