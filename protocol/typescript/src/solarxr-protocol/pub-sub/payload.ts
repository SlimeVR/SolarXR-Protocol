// automatically generated by the FlatBuffers compiler, do not modify

import { Bytes, BytesT } from '../../solarxr-protocol/datatypes/bytes.js';
import { StringTable, StringTableT } from '../../solarxr-protocol/datatypes/string-table.js';
import { KeyValues, KeyValuesT } from '../../solarxr-protocol/pub-sub/key-values.js';


export enum Payload {
  NONE = 0,
  solarxr_protocol_datatypes_StringTable = 1,
  solarxr_protocol_datatypes_Bytes = 2,
  KeyValues = 3
}

export function unionToPayload(
  type: Payload,
  accessor: (obj:Bytes|KeyValues|StringTable) => Bytes|KeyValues|StringTable|null
): Bytes|KeyValues|StringTable|null {
  switch(Payload[type]) {
    case 'NONE': return null; 
    case 'solarxr_protocol_datatypes_StringTable': return accessor(new StringTable())! as StringTable;
    case 'solarxr_protocol_datatypes_Bytes': return accessor(new Bytes())! as Bytes;
    case 'KeyValues': return accessor(new KeyValues())! as KeyValues;
    default: return null;
  }
}

export function unionListToPayload(
  type: Payload, 
  accessor: (index: number, obj:Bytes|KeyValues|StringTable) => Bytes|KeyValues|StringTable|null, 
  index: number
): Bytes|KeyValues|StringTable|null {
  switch(Payload[type]) {
    case 'NONE': return null; 
    case 'solarxr_protocol_datatypes_StringTable': return accessor(index, new StringTable())! as StringTable;
    case 'solarxr_protocol_datatypes_Bytes': return accessor(index, new Bytes())! as Bytes;
    case 'KeyValues': return accessor(index, new KeyValues())! as KeyValues;
    default: return null;
  }
}
