// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * A handle for the topic, allows referencing a topic without sending a huge
 * `TopicId`.
 */
export class TopicHandle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TopicHandle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTopicHandle(bb:flatbuffers.ByteBuffer, obj?:TopicHandle):TopicHandle {
  return (obj || new TopicHandle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTopicHandle(bb:flatbuffers.ByteBuffer, obj?:TopicHandle):TopicHandle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TopicHandle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startTopicHandle(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt16(0, id, 0);
}

static endTopicHandle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTopicHandle(builder:flatbuffers.Builder, id:number):flatbuffers.Offset {
  TopicHandle.startTopicHandle(builder);
  TopicHandle.addId(builder, id);
  return TopicHandle.endTopicHandle(builder);
}

unpack(): TopicHandleT {
  return new TopicHandleT(
    this.id()
  );
}


unpackTo(_o: TopicHandleT): void {
  _o.id = this.id();
}
}

export class TopicHandleT {
constructor(
  public id: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TopicHandle.createTopicHandle(builder,
    this.id
  );
}
}
