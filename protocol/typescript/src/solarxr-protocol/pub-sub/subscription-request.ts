// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Topic, unionToTopic, unionListToTopic } from '../../solarxr-protocol/pub-sub/topic.js';
import { TopicHandle, TopicHandleT } from '../../solarxr-protocol/pub-sub/topic-handle.js';
import { TopicId, TopicIdT } from '../../solarxr-protocol/pub-sub/topic-id.js';


/**
 * Requests a subscription to `topic`. Replies with a `TopicMapping`.
 */
export class SubscriptionRequest implements flatbuffers.IUnpackableObject<SubscriptionRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SubscriptionRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSubscriptionRequest(bb:flatbuffers.ByteBuffer, obj?:SubscriptionRequest):SubscriptionRequest {
  return (obj || new SubscriptionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSubscriptionRequest(bb:flatbuffers.ByteBuffer, obj?:SubscriptionRequest):SubscriptionRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SubscriptionRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

topicType():Topic {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Topic.NONE;
}

topic<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startSubscriptionRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTopicType(builder:flatbuffers.Builder, topicType:Topic) {
  builder.addFieldInt8(0, topicType, Topic.NONE);
}

static addTopic(builder:flatbuffers.Builder, topicOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, topicOffset, 0);
}

static endSubscriptionRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSubscriptionRequest(builder:flatbuffers.Builder, topicType:Topic, topicOffset:flatbuffers.Offset):flatbuffers.Offset {
  SubscriptionRequest.startSubscriptionRequest(builder);
  SubscriptionRequest.addTopicType(builder, topicType);
  SubscriptionRequest.addTopic(builder, topicOffset);
  return SubscriptionRequest.endSubscriptionRequest(builder);
}

unpack(): SubscriptionRequestT {
  return new SubscriptionRequestT(
    this.topicType(),
    (() => {
      const temp = unionToTopic(this.topicType(), this.topic.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: SubscriptionRequestT): void {
  _o.topicType = this.topicType();
  _o.topic = (() => {
      const temp = unionToTopic(this.topicType(), this.topic.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class SubscriptionRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public topicType: Topic = Topic.NONE,
  public topic: TopicHandleT|TopicIdT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const topic = builder.createObjectOffset(this.topic);

  return SubscriptionRequest.createSubscriptionRequest(builder,
    this.topicType,
    topic
  );
}
}
