// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class KeyValues {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):KeyValues {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKeyValues(bb:flatbuffers.ByteBuffer, obj?:KeyValues):KeyValues {
  return (obj || new KeyValues()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKeyValues(bb:flatbuffers.ByteBuffer, obj?:KeyValues):KeyValues {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KeyValues()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

keys(index: number):string
keys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
keys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

keysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

values(index: number):string
values(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
values(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startKeyValues(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKeys(builder:flatbuffers.Builder, keysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keysOffset, 0);
}

static createKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endKeyValues(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createKeyValues(builder:flatbuffers.Builder, keysOffset:flatbuffers.Offset, valuesOffset:flatbuffers.Offset):flatbuffers.Offset {
  KeyValues.startKeyValues(builder);
  KeyValues.addKeys(builder, keysOffset);
  KeyValues.addValues(builder, valuesOffset);
  return KeyValues.endKeyValues(builder);
}

unpack(): KeyValuesT {
  return new KeyValuesT(
    this.bb!.createScalarList(this.keys.bind(this), this.keysLength()),
    this.bb!.createScalarList(this.values.bind(this), this.valuesLength())
  );
}


unpackTo(_o: KeyValuesT): void {
  _o.keys = this.bb!.createScalarList(this.keys.bind(this), this.keysLength());
  _o.values = this.bb!.createScalarList(this.values.bind(this), this.valuesLength());
}
}

export class KeyValuesT {
constructor(
  public keys: (string)[] = [],
  public values: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const keys = KeyValues.createKeysVector(builder, builder.createObjectOffsetList(this.keys));
  const values = KeyValues.createValuesVector(builder, builder.createObjectOffsetList(this.values));

  return KeyValues.createKeyValues(builder,
    keys,
    values
  );
}
}
