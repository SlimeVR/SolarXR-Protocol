// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Bone, BoneT } from '../../solarxr-protocol/data-feed/bone.js';
import { DeviceData, DeviceDataT } from '../../solarxr-protocol/data-feed/device-data/device-data.js';
import { StayAlignedPose, StayAlignedPoseT } from '../../solarxr-protocol/data-feed/stay-aligned/stay-aligned-pose.js';
import { TrackerData, TrackerDataT } from '../../solarxr-protocol/data-feed/tracker/tracker-data.js';


/**
 * All of the data components related to a single data feed. A data feed is comprised
 * of device data, and tracker data.
 *
 * A data feed might send data only when it changes/updates, and we should make no
 * assumptions that the data is actually delivered. If you want to guarantee
 * delivery and avoid dropped observations of data (such as a user-initiated
 * button press), it is better to use the RPC system.
 */
export class DataFeedUpdate implements flatbuffers.IUnpackableObject<DataFeedUpdateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DataFeedUpdate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDataFeedUpdate(bb:flatbuffers.ByteBuffer, obj?:DataFeedUpdate):DataFeedUpdate {
  return (obj || new DataFeedUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDataFeedUpdate(bb:flatbuffers.ByteBuffer, obj?:DataFeedUpdate):DataFeedUpdate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DataFeedUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

devices(index: number, obj?:DeviceData):DeviceData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DeviceData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

devicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

syntheticTrackers(index: number, obj?:TrackerData):TrackerData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TrackerData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

syntheticTrackersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * This must represent a set, where there is no more than one bone for a `BodyPart`.
 */
bones(index: number, obj?:Bone):Bone|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Bone()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

bonesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stayAlignedPose(obj?:StayAlignedPose):StayAlignedPose|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new StayAlignedPose()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startDataFeedUpdate(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addDevices(builder:flatbuffers.Builder, devicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, devicesOffset, 0);
}

static createDevicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDevicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSyntheticTrackers(builder:flatbuffers.Builder, syntheticTrackersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, syntheticTrackersOffset, 0);
}

static createSyntheticTrackersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSyntheticTrackersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBones(builder:flatbuffers.Builder, bonesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, bonesOffset, 0);
}

static createBonesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBonesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStayAlignedPose(builder:flatbuffers.Builder, stayAlignedPoseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, stayAlignedPoseOffset, 0);
}

static endDataFeedUpdate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): DataFeedUpdateT {
  return new DataFeedUpdateT(
    this.bb!.createObjList<DeviceData, DeviceDataT>(this.devices.bind(this), this.devicesLength()),
    this.bb!.createObjList<TrackerData, TrackerDataT>(this.syntheticTrackers.bind(this), this.syntheticTrackersLength()),
    this.bb!.createObjList<Bone, BoneT>(this.bones.bind(this), this.bonesLength()),
    (this.stayAlignedPose() !== null ? this.stayAlignedPose()!.unpack() : null)
  );
}


unpackTo(_o: DataFeedUpdateT): void {
  _o.devices = this.bb!.createObjList<DeviceData, DeviceDataT>(this.devices.bind(this), this.devicesLength());
  _o.syntheticTrackers = this.bb!.createObjList<TrackerData, TrackerDataT>(this.syntheticTrackers.bind(this), this.syntheticTrackersLength());
  _o.bones = this.bb!.createObjList<Bone, BoneT>(this.bones.bind(this), this.bonesLength());
  _o.stayAlignedPose = (this.stayAlignedPose() !== null ? this.stayAlignedPose()!.unpack() : null);
}
}

export class DataFeedUpdateT implements flatbuffers.IGeneratedObject {
constructor(
  public devices: (DeviceDataT)[] = [],
  public syntheticTrackers: (TrackerDataT)[] = [],
  public bones: (BoneT)[] = [],
  public stayAlignedPose: StayAlignedPoseT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const devices = DataFeedUpdate.createDevicesVector(builder, builder.createObjectOffsetList(this.devices));
  const syntheticTrackers = DataFeedUpdate.createSyntheticTrackersVector(builder, builder.createObjectOffsetList(this.syntheticTrackers));
  const bones = DataFeedUpdate.createBonesVector(builder, builder.createObjectOffsetList(this.bones));
  const stayAlignedPose = (this.stayAlignedPose !== null ? this.stayAlignedPose!.pack(builder) : 0);

  DataFeedUpdate.startDataFeedUpdate(builder);
  DataFeedUpdate.addDevices(builder, devices);
  DataFeedUpdate.addSyntheticTrackers(builder, syntheticTrackers);
  DataFeedUpdate.addBones(builder, bones);
  DataFeedUpdate.addStayAlignedPose(builder, stayAlignedPose);

  return DataFeedUpdate.endDataFeedUpdate(builder);
}
}
