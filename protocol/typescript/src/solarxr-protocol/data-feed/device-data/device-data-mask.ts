// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TrackerDataMask, TrackerDataMaskT } from '../../../solarxr-protocol/data-feed/tracker/tracker-data-mask.js';


/**
 * A mask of values to be reported in subsequent DeviceStatus. Values set to `false`
 * or `null` will not reported. By default, all fields are false/null.
 *
 * If you set a value to `true`, it is not guaranteed that the sender actually has
 * such a value to send. In this case, they will probably send `null`, and the receiver
 * has the choice to disconnect due to missing data.
 */
export class DeviceDataMask implements flatbuffers.IUnpackableObject<DeviceDataMaskT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DeviceDataMask {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDeviceDataMask(bb:flatbuffers.ByteBuffer, obj?:DeviceDataMask):DeviceDataMask {
  return (obj || new DeviceDataMask()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDeviceDataMask(bb:flatbuffers.ByteBuffer, obj?:DeviceDataMask):DeviceDataMask {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DeviceDataMask()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Which tracker data should be sent in this data feed
 */
trackerData(obj?:TrackerDataMask):TrackerDataMask|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TrackerDataMask()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * true if device data should be sent in this data feed
 */
deviceData():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startDeviceDataMask(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTrackerData(builder:flatbuffers.Builder, trackerDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, trackerDataOffset, 0);
}

static addDeviceData(builder:flatbuffers.Builder, deviceData:boolean) {
  builder.addFieldInt8(1, +deviceData, +false);
}

static endDeviceDataMask(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDeviceDataMask(builder:flatbuffers.Builder, trackerDataOffset:flatbuffers.Offset, deviceData:boolean):flatbuffers.Offset {
  DeviceDataMask.startDeviceDataMask(builder);
  DeviceDataMask.addTrackerData(builder, trackerDataOffset);
  DeviceDataMask.addDeviceData(builder, deviceData);
  return DeviceDataMask.endDeviceDataMask(builder);
}

unpack(): DeviceDataMaskT {
  return new DeviceDataMaskT(
    (this.trackerData() !== null ? this.trackerData()!.unpack() : null),
    this.deviceData()
  );
}


unpackTo(_o: DeviceDataMaskT): void {
  _o.trackerData = (this.trackerData() !== null ? this.trackerData()!.unpack() : null);
  _o.deviceData = this.deviceData();
}
}

export class DeviceDataMaskT implements flatbuffers.IGeneratedObject {
constructor(
  public trackerData: TrackerDataMaskT|null = null,
  public deviceData: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const trackerData = (this.trackerData !== null ? this.trackerData!.pack(builder) : 0);

  return DeviceDataMask.createDeviceDataMask(builder,
    trackerData,
    this.deviceData
  );
}
}
