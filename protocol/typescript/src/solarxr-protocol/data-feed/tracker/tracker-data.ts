// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TrackerInfo, TrackerInfoT } from '../../../solarxr-protocol/data-feed/tracker/tracker-info.js';
import { Temperature, TemperatureT } from '../../../solarxr-protocol/datatypes/temperature.js';
import { TrackerId, TrackerIdT } from '../../../solarxr-protocol/datatypes/tracker-id.js';
import { TrackerStatus } from '../../../solarxr-protocol/datatypes/tracker-status.js';
import { Quat, QuatT } from '../../../solarxr-protocol/datatypes/math/quat.js';
import { Vec3f, Vec3fT } from '../../../solarxr-protocol/datatypes/math/vec3f.js';


/**
 * Describes all possible information about a tracker. A tracker is anything that
 * provides kinematic data about a particular body part.
 *
 * Trackers may be synthetic/computed or instead part of an actual hardware device.
 * There can be multiple trackers per hardware device.
 */
export class TrackerData implements flatbuffers.IUnpackableObject<TrackerDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrackerData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackerData(bb:flatbuffers.ByteBuffer, obj?:TrackerData):TrackerData {
  return (obj || new TrackerData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackerData(bb:flatbuffers.ByteBuffer, obj?:TrackerData):TrackerData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackerData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

trackerId(obj?:TrackerId):TrackerId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TrackerId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

info(obj?:TrackerInfo):TrackerInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TrackerInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

status():TrackerStatus {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : TrackerStatus.NONE;
}

rotation(obj?:Quat):Quat|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Quat()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * Position, in meters
 */
position(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * Raw rotational velocity, in euler angles
 */
rawRotVel(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * Raw translational acceleration, in m/s^2
 */
rawTransAccel(obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Vec3f()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * Temperature in degrees celsius
 */
temp(obj?:Temperature):Temperature|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Temperature()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startTrackerData(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addTrackerId(builder:flatbuffers.Builder, trackerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, trackerIdOffset, 0);
}

static addInfo(builder:flatbuffers.Builder, infoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, infoOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, status:TrackerStatus) {
  builder.addFieldInt8(2, status, TrackerStatus.NONE);
}

static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, rotationOffset, 0);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, positionOffset, 0);
}

static addRawRotVel(builder:flatbuffers.Builder, rawRotVelOffset:flatbuffers.Offset) {
  builder.addFieldStruct(5, rawRotVelOffset, 0);
}

static addRawTransAccel(builder:flatbuffers.Builder, rawTransAccelOffset:flatbuffers.Offset) {
  builder.addFieldStruct(6, rawTransAccelOffset, 0);
}

static addTemp(builder:flatbuffers.Builder, tempOffset:flatbuffers.Offset) {
  builder.addFieldStruct(7, tempOffset, 0);
}

static endTrackerData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): TrackerDataT {
  return new TrackerDataT(
    (this.trackerId() !== null ? this.trackerId()!.unpack() : null),
    (this.info() !== null ? this.info()!.unpack() : null),
    this.status(),
    (this.rotation() !== null ? this.rotation()!.unpack() : null),
    (this.position() !== null ? this.position()!.unpack() : null),
    (this.rawRotVel() !== null ? this.rawRotVel()!.unpack() : null),
    (this.rawTransAccel() !== null ? this.rawTransAccel()!.unpack() : null),
    (this.temp() !== null ? this.temp()!.unpack() : null)
  );
}


unpackTo(_o: TrackerDataT): void {
  _o.trackerId = (this.trackerId() !== null ? this.trackerId()!.unpack() : null);
  _o.info = (this.info() !== null ? this.info()!.unpack() : null);
  _o.status = this.status();
  _o.rotation = (this.rotation() !== null ? this.rotation()!.unpack() : null);
  _o.position = (this.position() !== null ? this.position()!.unpack() : null);
  _o.rawRotVel = (this.rawRotVel() !== null ? this.rawRotVel()!.unpack() : null);
  _o.rawTransAccel = (this.rawTransAccel() !== null ? this.rawTransAccel()!.unpack() : null);
  _o.temp = (this.temp() !== null ? this.temp()!.unpack() : null);
}
}

export class TrackerDataT implements flatbuffers.IGeneratedObject {
constructor(
  public trackerId: TrackerIdT|null = null,
  public info: TrackerInfoT|null = null,
  public status: TrackerStatus = TrackerStatus.NONE,
  public rotation: QuatT|null = null,
  public position: Vec3fT|null = null,
  public rawRotVel: Vec3fT|null = null,
  public rawTransAccel: Vec3fT|null = null,
  public temp: TemperatureT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const trackerId = (this.trackerId !== null ? this.trackerId!.pack(builder) : 0);
  const info = (this.info !== null ? this.info!.pack(builder) : 0);

  TrackerData.startTrackerData(builder);
  TrackerData.addTrackerId(builder, trackerId);
  TrackerData.addInfo(builder, info);
  TrackerData.addStatus(builder, this.status);
  TrackerData.addRotation(builder, (this.rotation !== null ? this.rotation!.pack(builder) : 0));
  TrackerData.addPosition(builder, (this.position !== null ? this.position!.pack(builder) : 0));
  TrackerData.addRawRotVel(builder, (this.rawRotVel !== null ? this.rawRotVel!.pack(builder) : 0));
  TrackerData.addRawTransAccel(builder, (this.rawTransAccel !== null ? this.rawTransAccel!.pack(builder) : 0));
  TrackerData.addTemp(builder, (this.temp !== null ? this.temp!.pack(builder) : 0));

  return TrackerData.endTrackerData(builder);
}
}
