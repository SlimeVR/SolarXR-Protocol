// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * A mask of the different components in `TrackerComponent`
 */
export class TrackerDataMask implements flatbuffers.IUnpackableObject<TrackerDataMaskT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrackerDataMask {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackerDataMask(bb:flatbuffers.ByteBuffer, obj?:TrackerDataMask):TrackerDataMask {
  return (obj || new TrackerDataMask()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackerDataMask(bb:flatbuffers.ByteBuffer, obj?:TrackerDataMask):TrackerDataMask {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackerDataMask()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

info():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

status():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rotation():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

position():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rawAngularVelocity():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rawAcceleration():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

temp():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

linearAcceleration():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rotationReferenceAdjusted():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

rotationIdentityAdjusted():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

tps():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startTrackerDataMask(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addInfo(builder:flatbuffers.Builder, info:boolean) {
  builder.addFieldInt8(0, +info, +false);
}

static addStatus(builder:flatbuffers.Builder, status:boolean) {
  builder.addFieldInt8(1, +status, +false);
}

static addRotation(builder:flatbuffers.Builder, rotation:boolean) {
  builder.addFieldInt8(2, +rotation, +false);
}

static addPosition(builder:flatbuffers.Builder, position:boolean) {
  builder.addFieldInt8(3, +position, +false);
}

static addRawAngularVelocity(builder:flatbuffers.Builder, rawAngularVelocity:boolean) {
  builder.addFieldInt8(4, +rawAngularVelocity, +false);
}

static addRawAcceleration(builder:flatbuffers.Builder, rawAcceleration:boolean) {
  builder.addFieldInt8(5, +rawAcceleration, +false);
}

static addTemp(builder:flatbuffers.Builder, temp:boolean) {
  builder.addFieldInt8(6, +temp, +false);
}

static addLinearAcceleration(builder:flatbuffers.Builder, linearAcceleration:boolean) {
  builder.addFieldInt8(7, +linearAcceleration, +false);
}

static addRotationReferenceAdjusted(builder:flatbuffers.Builder, rotationReferenceAdjusted:boolean) {
  builder.addFieldInt8(8, +rotationReferenceAdjusted, +false);
}

static addRotationIdentityAdjusted(builder:flatbuffers.Builder, rotationIdentityAdjusted:boolean) {
  builder.addFieldInt8(9, +rotationIdentityAdjusted, +false);
}

static addTps(builder:flatbuffers.Builder, tps:boolean) {
  builder.addFieldInt8(10, +tps, +false);
}

static endTrackerDataMask(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTrackerDataMask(builder:flatbuffers.Builder, info:boolean, status:boolean, rotation:boolean, position:boolean, rawAngularVelocity:boolean, rawAcceleration:boolean, temp:boolean, linearAcceleration:boolean, rotationReferenceAdjusted:boolean, rotationIdentityAdjusted:boolean, tps:boolean):flatbuffers.Offset {
  TrackerDataMask.startTrackerDataMask(builder);
  TrackerDataMask.addInfo(builder, info);
  TrackerDataMask.addStatus(builder, status);
  TrackerDataMask.addRotation(builder, rotation);
  TrackerDataMask.addPosition(builder, position);
  TrackerDataMask.addRawAngularVelocity(builder, rawAngularVelocity);
  TrackerDataMask.addRawAcceleration(builder, rawAcceleration);
  TrackerDataMask.addTemp(builder, temp);
  TrackerDataMask.addLinearAcceleration(builder, linearAcceleration);
  TrackerDataMask.addRotationReferenceAdjusted(builder, rotationReferenceAdjusted);
  TrackerDataMask.addRotationIdentityAdjusted(builder, rotationIdentityAdjusted);
  TrackerDataMask.addTps(builder, tps);
  return TrackerDataMask.endTrackerDataMask(builder);
}

unpack(): TrackerDataMaskT {
  return new TrackerDataMaskT(
    this.info(),
    this.status(),
    this.rotation(),
    this.position(),
    this.rawAngularVelocity(),
    this.rawAcceleration(),
    this.temp(),
    this.linearAcceleration(),
    this.rotationReferenceAdjusted(),
    this.rotationIdentityAdjusted(),
    this.tps()
  );
}


unpackTo(_o: TrackerDataMaskT): void {
  _o.info = this.info();
  _o.status = this.status();
  _o.rotation = this.rotation();
  _o.position = this.position();
  _o.rawAngularVelocity = this.rawAngularVelocity();
  _o.rawAcceleration = this.rawAcceleration();
  _o.temp = this.temp();
  _o.linearAcceleration = this.linearAcceleration();
  _o.rotationReferenceAdjusted = this.rotationReferenceAdjusted();
  _o.rotationIdentityAdjusted = this.rotationIdentityAdjusted();
  _o.tps = this.tps();
}
}

export class TrackerDataMaskT implements flatbuffers.IGeneratedObject {
constructor(
  public info: boolean = false,
  public status: boolean = false,
  public rotation: boolean = false,
  public position: boolean = false,
  public rawAngularVelocity: boolean = false,
  public rawAcceleration: boolean = false,
  public temp: boolean = false,
  public linearAcceleration: boolean = false,
  public rotationReferenceAdjusted: boolean = false,
  public rotationIdentityAdjusted: boolean = false,
  public tps: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TrackerDataMask.createTrackerDataMask(builder,
    this.info,
    this.status,
    this.rotation,
    this.position,
    this.rawAngularVelocity,
    this.rawAcceleration,
    this.temp,
    this.linearAcceleration,
    this.rotationReferenceAdjusted,
    this.rotationIdentityAdjusted,
    this.tps
  );
}
}
