// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BodyPart } from '../../../solarxr-protocol/datatypes/body-part';
import { HzF32, HzF32T } from '../../../solarxr-protocol/datatypes/hz-f32';
import { ImuType } from '../../../solarxr-protocol/datatypes/hardware-info/imu-type';
import { Quat, QuatT } from '../../../solarxr-protocol/datatypes/math/quat';


/**
 * Static description of a tracker
 */
export class TrackerInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TrackerInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackerInfo(bb:flatbuffers.ByteBuffer, obj?:TrackerInfo):TrackerInfo {
  return (obj || new TrackerInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackerInfo(bb:flatbuffers.ByteBuffer, obj?:TrackerInfo):TrackerInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackerInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

imuType():ImuType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : ImuType.Other;
}

/**
 * The user-assigned role of the tracker.
 */
bodyPart():BodyPart {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : BodyPart.NONE;
}

/**
 * average samples per second
 */
pollRate(obj?:HzF32):HzF32|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new HzF32()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * The orientation of the tracker when mounted on the body
 */
mountingOrientation(obj?:Quat):Quat|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Quat()).__init(this.bb_pos + offset, this.bb!) : null;
}

editable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

computed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startTrackerInfo(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addImuType(builder:flatbuffers.Builder, imuType:ImuType) {
  builder.addFieldInt16(0, imuType, ImuType.Other);
}

static addBodyPart(builder:flatbuffers.Builder, bodyPart:BodyPart) {
  builder.addFieldInt8(1, bodyPart, BodyPart.NONE);
}

static addPollRate(builder:flatbuffers.Builder, pollRateOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, pollRateOffset, 0);
}

static addMountingOrientation(builder:flatbuffers.Builder, mountingOrientationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, mountingOrientationOffset, 0);
}

static addEditable(builder:flatbuffers.Builder, editable:boolean) {
  builder.addFieldInt8(4, +editable, +false);
}

static addComputed(builder:flatbuffers.Builder, computed:boolean) {
  builder.addFieldInt8(5, +computed, +false);
}

static endTrackerInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): TrackerInfoT {
  return new TrackerInfoT(
    this.imuType(),
    this.bodyPart(),
    (this.pollRate() !== null ? this.pollRate()!.unpack() : null),
    (this.mountingOrientation() !== null ? this.mountingOrientation()!.unpack() : null),
    this.editable(),
    this.computed()
  );
}


unpackTo(_o: TrackerInfoT): void {
  _o.imuType = this.imuType();
  _o.bodyPart = this.bodyPart();
  _o.pollRate = (this.pollRate() !== null ? this.pollRate()!.unpack() : null);
  _o.mountingOrientation = (this.mountingOrientation() !== null ? this.mountingOrientation()!.unpack() : null);
  _o.editable = this.editable();
  _o.computed = this.computed();
}
}

export class TrackerInfoT {
constructor(
  public imuType: ImuType = ImuType.Other,
  public bodyPart: BodyPart = BodyPart.NONE,
  public pollRate: HzF32T|null = null,
  public mountingOrientation: QuatT|null = null,
  public editable: boolean = false,
  public computed: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  TrackerInfo.startTrackerInfo(builder);
  TrackerInfo.addImuType(builder, this.imuType);
  TrackerInfo.addBodyPart(builder, this.bodyPart);
  TrackerInfo.addPollRate(builder, (this.pollRate !== null ? this.pollRate!.pack(builder) : 0));
  TrackerInfo.addMountingOrientation(builder, (this.mountingOrientation !== null ? this.mountingOrientation!.pack(builder) : 0));
  TrackerInfo.addEditable(builder, this.editable);
  TrackerInfo.addComputed(builder, this.computed);

  return TrackerInfo.endTrackerInfo(builder);
}
}
