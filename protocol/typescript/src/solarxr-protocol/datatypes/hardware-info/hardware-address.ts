// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * A MAC address or a bluetooth address, or some other uniquely identifying address
 * associated with the endpoint that we are communicating with. If it doesn't take
 * up the full set of bytes, it is aligned towards the least significant bits.
 */
export class HardwareAddress implements flatbuffers.IUnpackableObject<HardwareAddressT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HardwareAddress {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

addr():bigint {
  return this.bb!.readUint64(this.bb_pos);
}

static sizeOf():number {
  return 8;
}

static createHardwareAddress(builder:flatbuffers.Builder, addr: bigint):flatbuffers.Offset {
  builder.prep(8, 8);
  builder.writeInt64(addr);
  return builder.offset();
}


unpack(): HardwareAddressT {
  return new HardwareAddressT(
    this.addr()
  );
}


unpackTo(_o: HardwareAddressT): void {
  _o.addr = this.addr();
}
}

export class HardwareAddressT implements flatbuffers.IGeneratedObject {
constructor(
  public addr: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return HardwareAddress.createHardwareAddress(builder,
    this.addr
  );
}
}
