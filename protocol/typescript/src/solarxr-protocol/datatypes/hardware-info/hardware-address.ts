// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class HardwareAddress {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):HardwareAddress {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHardwareAddress(bb:flatbuffers.ByteBuffer, obj?:HardwareAddress):HardwareAddress {
  return (obj || new HardwareAddress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHardwareAddress(bb:flatbuffers.ByteBuffer, obj?:HardwareAddress):HardwareAddress {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HardwareAddress()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ip():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startHardwareAddress(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addIp(builder:flatbuffers.Builder, ip:number) {
  builder.addFieldInt32(0, ip, 0);
}

static endHardwareAddress(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHardwareAddress(builder:flatbuffers.Builder, ip:number):flatbuffers.Offset {
  HardwareAddress.startHardwareAddress(builder);
  HardwareAddress.addIp(builder, ip);
  return HardwareAddress.endHardwareAddress(builder);
}

unpack(): HardwareAddressT {
  return new HardwareAddressT(
    this.ip()
  );
}


unpackTo(_o: HardwareAddressT): void {
  _o.ip = this.ip();
}
}

export class HardwareAddressT {
constructor(
  public ip: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return HardwareAddress.createHardwareAddress(builder,
    this.ip
  );
}
}
