// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Frequency as 32 bit float
 */
export class HzF32 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):HzF32 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

f():number {
  return this.bb!.readFloat32(this.bb_pos);
}

static sizeOf():number {
  return 4;
}

static createHzF32(builder:flatbuffers.Builder, f: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeFloat32(f);
  return builder.offset();
}


unpack(): HzF32T {
  return new HzF32T(
    this.f()
  );
}


unpackTo(_o: HzF32T): void {
  _o.f = this.f();
}
}

export class HzF32T {
constructor(
  public f: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return HzF32.createHzF32(builder,
    this.f
  );
}
}
