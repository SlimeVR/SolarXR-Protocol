// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * The 4 bytes of an ip address are stored in 32 bits in big endian order.
 * We will switch over to fixed size arrays when they are supported better.
 */
export class Ipv4Address implements flatbuffers.IUnpackableObject<Ipv4AddressT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Ipv4Address {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

addr():number {
  return this.bb!.readUint32(this.bb_pos);
}

static sizeOf():number {
  return 4;
}

static createIpv4Address(builder:flatbuffers.Builder, addr: number):flatbuffers.Offset {
  builder.prep(4, 4);
  builder.writeInt32(addr);
  return builder.offset();
}


unpack(): Ipv4AddressT {
  return new Ipv4AddressT(
    this.addr()
  );
}


unpackTo(_o: Ipv4AddressT): void {
  _o.addr = this.addr();
}
}

export class Ipv4AddressT implements flatbuffers.IGeneratedObject {
constructor(
  public addr: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Ipv4Address.createIpv4Address(builder,
    this.addr
  );
}
}
