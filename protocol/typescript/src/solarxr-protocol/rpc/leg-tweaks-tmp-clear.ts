// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Clears the legtweaks temporary state back to what the config has.
 * Setting a field to `true` will reset that field.
 */
export class LegTweaksTmpClear implements flatbuffers.IUnpackableObject<LegTweaksTmpClearT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LegTweaksTmpClear {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLegTweaksTmpClear(bb:flatbuffers.ByteBuffer, obj?:LegTweaksTmpClear):LegTweaksTmpClear {
  return (obj || new LegTweaksTmpClear()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLegTweaksTmpClear(bb:flatbuffers.ByteBuffer, obj?:LegTweaksTmpClear):LegTweaksTmpClear {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LegTweaksTmpClear()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

floorClip():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

skatingCorrection():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

toeSnap():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

footPlant():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startLegTweaksTmpClear(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addFloorClip(builder:flatbuffers.Builder, floorClip:boolean) {
  builder.addFieldInt8(0, +floorClip, +false);
}

static addSkatingCorrection(builder:flatbuffers.Builder, skatingCorrection:boolean) {
  builder.addFieldInt8(1, +skatingCorrection, +false);
}

static addToeSnap(builder:flatbuffers.Builder, toeSnap:boolean) {
  builder.addFieldInt8(2, +toeSnap, +false);
}

static addFootPlant(builder:flatbuffers.Builder, footPlant:boolean) {
  builder.addFieldInt8(3, +footPlant, +false);
}

static endLegTweaksTmpClear(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLegTweaksTmpClear(builder:flatbuffers.Builder, floorClip:boolean, skatingCorrection:boolean, toeSnap:boolean, footPlant:boolean):flatbuffers.Offset {
  LegTweaksTmpClear.startLegTweaksTmpClear(builder);
  LegTweaksTmpClear.addFloorClip(builder, floorClip);
  LegTweaksTmpClear.addSkatingCorrection(builder, skatingCorrection);
  LegTweaksTmpClear.addToeSnap(builder, toeSnap);
  LegTweaksTmpClear.addFootPlant(builder, footPlant);
  return LegTweaksTmpClear.endLegTweaksTmpClear(builder);
}

unpack(): LegTweaksTmpClearT {
  return new LegTweaksTmpClearT(
    this.floorClip(),
    this.skatingCorrection(),
    this.toeSnap(),
    this.footPlant()
  );
}


unpackTo(_o: LegTweaksTmpClearT): void {
  _o.floorClip = this.floorClip();
  _o.skatingCorrection = this.skatingCorrection();
  _o.toeSnap = this.toeSnap();
  _o.footPlant = this.footPlant();
}
}

export class LegTweaksTmpClearT implements flatbuffers.IGeneratedObject {
constructor(
  public floorClip: boolean = false,
  public skatingCorrection: boolean = false,
  public toeSnap: boolean = false,
  public footPlant: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return LegTweaksTmpClear.createLegTweaksTmpClear(builder,
    this.floorClip,
    this.skatingCorrection,
    this.toeSnap,
    this.footPlant
  );
}
}
