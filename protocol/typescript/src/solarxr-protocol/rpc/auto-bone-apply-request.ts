// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Applies the estimated proportions
 */
export class AutoBoneApplyRequest implements flatbuffers.IUnpackableObject<AutoBoneApplyRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AutoBoneApplyRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAutoBoneApplyRequest(bb:flatbuffers.ByteBuffer, obj?:AutoBoneApplyRequest):AutoBoneApplyRequest {
  return (obj || new AutoBoneApplyRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAutoBoneApplyRequest(bb:flatbuffers.ByteBuffer, obj?:AutoBoneApplyRequest):AutoBoneApplyRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AutoBoneApplyRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startAutoBoneApplyRequest(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endAutoBoneApplyRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAutoBoneApplyRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  AutoBoneApplyRequest.startAutoBoneApplyRequest(builder);
  return AutoBoneApplyRequest.endAutoBoneApplyRequest(builder);
}

unpack(): AutoBoneApplyRequestT {
  return new AutoBoneApplyRequestT();
}


unpackTo(_o: AutoBoneApplyRequestT): void {}
}

export class AutoBoneApplyRequestT implements flatbuffers.IGeneratedObject {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return AutoBoneApplyRequest.createAutoBoneApplyRequest(builder);
}
}
