// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class RecordBVHRequest implements flatbuffers.IUnpackableObject<RecordBVHRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RecordBVHRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRecordBVHRequest(bb:flatbuffers.ByteBuffer, obj?:RecordBVHRequest):RecordBVHRequest {
  return (obj || new RecordBVHRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRecordBVHRequest(bb:flatbuffers.ByteBuffer, obj?:RecordBVHRequest):RecordBVHRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RecordBVHRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stop():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startRecordBVHRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addStop(builder:flatbuffers.Builder, stop:boolean) {
  builder.addFieldInt8(0, +stop, +false);
}

static endRecordBVHRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRecordBVHRequest(builder:flatbuffers.Builder, stop:boolean):flatbuffers.Offset {
  RecordBVHRequest.startRecordBVHRequest(builder);
  RecordBVHRequest.addStop(builder, stop);
  return RecordBVHRequest.endRecordBVHRequest(builder);
}

unpack(): RecordBVHRequestT {
  return new RecordBVHRequestT(
    this.stop()
  );
}


unpackTo(_o: RecordBVHRequestT): void {
  _o.stop = this.stop();
}
}

export class RecordBVHRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public stop: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return RecordBVHRequest.createRecordBVHRequest(builder,
    this.stop
  );
}
}
