// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class RecordBVHRequest implements flatbuffers.IUnpackableObject<RecordBVHRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RecordBVHRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRecordBVHRequest(bb:flatbuffers.ByteBuffer, obj?:RecordBVHRequest):RecordBVHRequest {
  return (obj || new RecordBVHRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRecordBVHRequest(bb:flatbuffers.ByteBuffer, obj?:RecordBVHRequest):RecordBVHRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RecordBVHRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stop():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Path sent when starting the recording, if null the recording won't happen
 */
filePath():string|null
filePath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
filePath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRecordBVHRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addStop(builder:flatbuffers.Builder, stop:boolean) {
  builder.addFieldInt8(0, +stop, +false);
}

static addFilePath(builder:flatbuffers.Builder, filePathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, filePathOffset, 0);
}

static endRecordBVHRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRecordBVHRequest(builder:flatbuffers.Builder, stop:boolean, filePathOffset:flatbuffers.Offset):flatbuffers.Offset {
  RecordBVHRequest.startRecordBVHRequest(builder);
  RecordBVHRequest.addStop(builder, stop);
  RecordBVHRequest.addFilePath(builder, filePathOffset);
  return RecordBVHRequest.endRecordBVHRequest(builder);
}

unpack(): RecordBVHRequestT {
  return new RecordBVHRequestT(
    this.stop(),
    this.filePath()
  );
}


unpackTo(_o: RecordBVHRequestT): void {
  _o.stop = this.stop();
  _o.filePath = this.filePath();
}
}

export class RecordBVHRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public stop: boolean = false,
  public filePath: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const filePath = (this.filePath !== null ? builder.createString(this.filePath!) : 0);

  return RecordBVHRequest.createRecordBVHRequest(builder,
    this.stop,
    filePath
  );
}
}
