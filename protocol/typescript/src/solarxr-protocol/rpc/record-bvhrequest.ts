// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FilePath, FilePathT } from '../../solarxr-protocol/rpc/file-path.js';
import { FolderPath, FolderPathT } from '../../solarxr-protocol/rpc/folder-path.js';
import { Path, unionToPath, unionListToPath } from '../../solarxr-protocol/rpc/path.js';


export class RecordBVHRequest implements flatbuffers.IUnpackableObject<RecordBVHRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RecordBVHRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRecordBVHRequest(bb:flatbuffers.ByteBuffer, obj?:RecordBVHRequest):RecordBVHRequest {
  return (obj || new RecordBVHRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRecordBVHRequest(bb:flatbuffers.ByteBuffer, obj?:RecordBVHRequest):RecordBVHRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RecordBVHRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stop():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

pathType():Path {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Path.NONE;
}

/**
 * Path sent when starting the recording, if null the recording won't happen
 */
path<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startRecordBVHRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addStop(builder:flatbuffers.Builder, stop:boolean) {
  builder.addFieldInt8(0, +stop, +false);
}

static addPathType(builder:flatbuffers.Builder, pathType:Path) {
  builder.addFieldInt8(1, pathType, Path.NONE);
}

static addPath(builder:flatbuffers.Builder, pathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, pathOffset, 0);
}

static endRecordBVHRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRecordBVHRequest(builder:flatbuffers.Builder, stop:boolean, pathType:Path, pathOffset:flatbuffers.Offset):flatbuffers.Offset {
  RecordBVHRequest.startRecordBVHRequest(builder);
  RecordBVHRequest.addStop(builder, stop);
  RecordBVHRequest.addPathType(builder, pathType);
  RecordBVHRequest.addPath(builder, pathOffset);
  return RecordBVHRequest.endRecordBVHRequest(builder);
}

unpack(): RecordBVHRequestT {
  return new RecordBVHRequestT(
    this.stop(),
    this.pathType(),
    (() => {
      const temp = unionToPath(this.pathType(), this.path.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: RecordBVHRequestT): void {
  _o.stop = this.stop();
  _o.pathType = this.pathType();
  _o.path = (() => {
      const temp = unionToPath(this.pathType(), this.path.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class RecordBVHRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public stop: boolean = false,
  public pathType: Path = Path.NONE,
  public path: FilePathT|FolderPathT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const path = builder.createObjectOffset(this.path);

  return RecordBVHRequest.createRecordBVHRequest(builder,
    this.stop,
    this.pathType,
    path
  );
}
}
