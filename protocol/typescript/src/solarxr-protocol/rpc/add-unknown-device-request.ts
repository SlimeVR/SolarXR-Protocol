// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class AddUnknownDeviceRequest implements flatbuffers.IUnpackableObject<AddUnknownDeviceRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AddUnknownDeviceRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAddUnknownDeviceRequest(bb:flatbuffers.ByteBuffer, obj?:AddUnknownDeviceRequest):AddUnknownDeviceRequest {
  return (obj || new AddUnknownDeviceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAddUnknownDeviceRequest(bb:flatbuffers.ByteBuffer, obj?:AddUnknownDeviceRequest):AddUnknownDeviceRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AddUnknownDeviceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

macAddress(index: number):string
macAddress(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
macAddress(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

macAddressLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startAddUnknownDeviceRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMacAddress(builder:flatbuffers.Builder, macAddressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, macAddressOffset, 0);
}

static createMacAddressVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMacAddressVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endAddUnknownDeviceRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAddUnknownDeviceRequest(builder:flatbuffers.Builder, macAddressOffset:flatbuffers.Offset):flatbuffers.Offset {
  AddUnknownDeviceRequest.startAddUnknownDeviceRequest(builder);
  AddUnknownDeviceRequest.addMacAddress(builder, macAddressOffset);
  return AddUnknownDeviceRequest.endAddUnknownDeviceRequest(builder);
}

unpack(): AddUnknownDeviceRequestT {
  return new AddUnknownDeviceRequestT(
    this.bb!.createScalarList<string>(this.macAddress.bind(this), this.macAddressLength())
  );
}


unpackTo(_o: AddUnknownDeviceRequestT): void {
  _o.macAddress = this.bb!.createScalarList<string>(this.macAddress.bind(this), this.macAddressLength());
}
}

export class AddUnknownDeviceRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public macAddress: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const macAddress = AddUnknownDeviceRequest.createMacAddressVector(builder, builder.createObjectOffsetList(this.macAddress));

  return AddUnknownDeviceRequest.createAddUnknownDeviceRequest(builder,
    macAddress
  );
}
}
