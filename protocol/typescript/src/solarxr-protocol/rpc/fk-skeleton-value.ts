// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FkValue } from '../../solarxr-protocol/rpc/fk-value';


export class FkSkeletonValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FkSkeletonValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFkSkeletonValue(bb:flatbuffers.ByteBuffer, obj?:FkSkeletonValue):FkSkeletonValue {
  return (obj || new FkSkeletonValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFkSkeletonValue(bb:flatbuffers.ByteBuffer, obj?:FkSkeletonValue):FkSkeletonValue {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FkSkeletonValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

skeletonValue():FkValue {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FkValue.NONE;
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startFkSkeletonValue(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSkeletonValue(builder:flatbuffers.Builder, skeletonValue:FkValue) {
  builder.addFieldInt8(0, skeletonValue, FkValue.NONE);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldFloat32(1, value, 0.0);
}

static endFkSkeletonValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFkSkeletonValue(builder:flatbuffers.Builder, skeletonValue:FkValue, value:number):flatbuffers.Offset {
  FkSkeletonValue.startFkSkeletonValue(builder);
  FkSkeletonValue.addSkeletonValue(builder, skeletonValue);
  FkSkeletonValue.addValue(builder, value);
  return FkSkeletonValue.endFkSkeletonValue(builder);
}

unpack(): FkSkeletonValueT {
  return new FkSkeletonValueT(
    this.skeletonValue(),
    this.value()
  );
}


unpackTo(_o: FkSkeletonValueT): void {
  _o.skeletonValue = this.skeletonValue();
  _o.value = this.value();
}
}

export class FkSkeletonValueT {
constructor(
  public skeletonValue: FkValue = FkValue.NONE,
  public value: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return FkSkeletonValue.createFkSkeletonValue(builder,
    this.skeletonValue,
    this.value
  );
}
}
