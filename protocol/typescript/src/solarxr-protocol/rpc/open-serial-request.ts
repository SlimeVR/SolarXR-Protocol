// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class OpenSerialRequest implements flatbuffers.IUnpackableObject<OpenSerialRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OpenSerialRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOpenSerialRequest(bb:flatbuffers.ByteBuffer, obj?:OpenSerialRequest):OpenSerialRequest {
  return (obj || new OpenSerialRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOpenSerialRequest(bb:flatbuffers.ByteBuffer, obj?:OpenSerialRequest):OpenSerialRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OpenSerialRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Automaticaly pick the first serial device available
 */
auto():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

port():string|null
port(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
port(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOpenSerialRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAuto(builder:flatbuffers.Builder, auto:boolean) {
  builder.addFieldInt8(0, +auto, +false);
}

static addPort(builder:flatbuffers.Builder, portOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, portOffset, 0);
}

static endOpenSerialRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOpenSerialRequest(builder:flatbuffers.Builder, auto:boolean, portOffset:flatbuffers.Offset):flatbuffers.Offset {
  OpenSerialRequest.startOpenSerialRequest(builder);
  OpenSerialRequest.addAuto(builder, auto);
  OpenSerialRequest.addPort(builder, portOffset);
  return OpenSerialRequest.endOpenSerialRequest(builder);
}

unpack(): OpenSerialRequestT {
  return new OpenSerialRequestT(
    this.auto(),
    this.port()
  );
}


unpackTo(_o: OpenSerialRequestT): void {
  _o.auto = this.auto();
  _o.port = this.port();
}
}

export class OpenSerialRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public auto: boolean = false,
  public port: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const port = (this.port !== null ? builder.createString(this.port!) : 0);

  return OpenSerialRequest.createOpenSerialRequest(builder,
    this.auto,
    port
  );
}
}
