// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FilteringType } from '../../solarxr-protocol/datatypes/filtering-type.js';


export class FilteringSettings implements flatbuffers.IUnpackableObject<FilteringSettingsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FilteringSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFilteringSettings(bb:flatbuffers.ByteBuffer, obj?:FilteringSettings):FilteringSettings {
  return (obj || new FilteringSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFilteringSettings(bb:flatbuffers.ByteBuffer, obj?:FilteringSettings):FilteringSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FilteringSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():FilteringType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FilteringType.NONE;
}

/**
 * 0 to 1. A higher value results in more smoothing or prediction
 */
amount():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startFilteringSettings(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addType(builder:flatbuffers.Builder, type:FilteringType) {
  builder.addFieldInt8(0, type, FilteringType.NONE);
}

static addAmount(builder:flatbuffers.Builder, amount:number) {
  builder.addFieldFloat32(1, amount, 0.0);
}

static endFilteringSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFilteringSettings(builder:flatbuffers.Builder, type:FilteringType, amount:number):flatbuffers.Offset {
  FilteringSettings.startFilteringSettings(builder);
  FilteringSettings.addType(builder, type);
  FilteringSettings.addAmount(builder, amount);
  return FilteringSettings.endFilteringSettings(builder);
}

unpack(): FilteringSettingsT {
  return new FilteringSettingsT(
    this.type(),
    this.amount()
  );
}


unpackTo(_o: FilteringSettingsT): void {
  _o.type = this.type();
  _o.amount = this.amount();
}
}

export class FilteringSettingsT implements flatbuffers.IGeneratedObject {
constructor(
  public type: FilteringType = FilteringType.NONE,
  public amount: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return FilteringSettings.createFilteringSettings(builder,
    this.type,
    this.amount
  );
}
}
