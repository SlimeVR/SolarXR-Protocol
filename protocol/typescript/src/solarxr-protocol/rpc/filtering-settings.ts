// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FilteringType } from '../../solarxr-protocol/datatypes/filtering-type';


export class FilteringSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FilteringSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFilteringSettings(bb:flatbuffers.ByteBuffer, obj?:FilteringSettings):FilteringSettings {
  return (obj || new FilteringSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFilteringSettings(bb:flatbuffers.ByteBuffer, obj?:FilteringSettings):FilteringSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FilteringSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():FilteringType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FilteringType.NONE;
}

intensity():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

ticks():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startFilteringSettings(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:FilteringType) {
  builder.addFieldInt8(0, type, FilteringType.NONE);
}

static addIntensity(builder:flatbuffers.Builder, intensity:number) {
  builder.addFieldInt8(1, intensity, 0);
}

static addTicks(builder:flatbuffers.Builder, ticks:number) {
  builder.addFieldInt8(2, ticks, 0);
}

static endFilteringSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFilteringSettings(builder:flatbuffers.Builder, type:FilteringType, intensity:number, ticks:number):flatbuffers.Offset {
  FilteringSettings.startFilteringSettings(builder);
  FilteringSettings.addType(builder, type);
  FilteringSettings.addIntensity(builder, intensity);
  FilteringSettings.addTicks(builder, ticks);
  return FilteringSettings.endFilteringSettings(builder);
}

unpack(): FilteringSettingsT {
  return new FilteringSettingsT(
    this.type(),
    this.intensity(),
    this.ticks()
  );
}


unpackTo(_o: FilteringSettingsT): void {
  _o.type = this.type();
  _o.intensity = this.intensity();
  _o.ticks = this.ticks();
}
}

export class FilteringSettingsT {
constructor(
  public type: FilteringType = FilteringType.NONE,
  public intensity: number = 0,
  public ticks: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return FilteringSettings.createFilteringSettings(builder,
    this.type,
    this.intensity,
    this.ticks
  );
}
}
