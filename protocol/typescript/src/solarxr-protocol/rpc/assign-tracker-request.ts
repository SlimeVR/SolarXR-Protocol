// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BodyPart } from '../../solarxr-protocol/datatypes/body-part.js';
import { TrackerId, TrackerIdT } from '../../solarxr-protocol/datatypes/tracker-id.js';
import { Quat, QuatT } from '../../solarxr-protocol/datatypes/math/quat.js';


export class AssignTrackerRequest implements flatbuffers.IUnpackableObject<AssignTrackerRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AssignTrackerRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAssignTrackerRequest(bb:flatbuffers.ByteBuffer, obj?:AssignTrackerRequest):AssignTrackerRequest {
  return (obj || new AssignTrackerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAssignTrackerRequest(bb:flatbuffers.ByteBuffer, obj?:AssignTrackerRequest):AssignTrackerRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AssignTrackerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

trackerId(obj?:TrackerId):TrackerId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TrackerId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

bodyPosition():BodyPart {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : BodyPart.NONE;
}

mountingOrientation(obj?:Quat):Quat|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Quat()).__init(this.bb_pos + offset, this.bb!) : null;
}

displayName():string|null
displayName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
displayName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

allowDriftCompensation():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startAssignTrackerRequest(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addTrackerId(builder:flatbuffers.Builder, trackerIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, trackerIdOffset, 0);
}

static addBodyPosition(builder:flatbuffers.Builder, bodyPosition:BodyPart) {
  builder.addFieldInt8(1, bodyPosition, BodyPart.NONE);
}

static addMountingOrientation(builder:flatbuffers.Builder, mountingOrientationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, mountingOrientationOffset, 0);
}

static addDisplayName(builder:flatbuffers.Builder, displayNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, displayNameOffset, 0);
}

static addAllowDriftCompensation(builder:flatbuffers.Builder, allowDriftCompensation:boolean) {
  builder.addFieldInt8(4, +allowDriftCompensation, +false);
}

static endAssignTrackerRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): AssignTrackerRequestT {
  return new AssignTrackerRequestT(
    (this.trackerId() !== null ? this.trackerId()!.unpack() : null),
    this.bodyPosition(),
    (this.mountingOrientation() !== null ? this.mountingOrientation()!.unpack() : null),
    this.displayName(),
    this.allowDriftCompensation()
  );
}


unpackTo(_o: AssignTrackerRequestT): void {
  _o.trackerId = (this.trackerId() !== null ? this.trackerId()!.unpack() : null);
  _o.bodyPosition = this.bodyPosition();
  _o.mountingOrientation = (this.mountingOrientation() !== null ? this.mountingOrientation()!.unpack() : null);
  _o.displayName = this.displayName();
  _o.allowDriftCompensation = this.allowDriftCompensation();
}
}

export class AssignTrackerRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public trackerId: TrackerIdT|null = null,
  public bodyPosition: BodyPart = BodyPart.NONE,
  public mountingOrientation: QuatT|null = null,
  public displayName: string|Uint8Array|null = null,
  public allowDriftCompensation: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const trackerId = (this.trackerId !== null ? this.trackerId!.pack(builder) : 0);
  const displayName = (this.displayName !== null ? builder.createString(this.displayName!) : 0);

  AssignTrackerRequest.startAssignTrackerRequest(builder);
  AssignTrackerRequest.addTrackerId(builder, trackerId);
  AssignTrackerRequest.addBodyPosition(builder, this.bodyPosition);
  AssignTrackerRequest.addMountingOrientation(builder, (this.mountingOrientation !== null ? this.mountingOrientation!.pack(builder) : 0));
  AssignTrackerRequest.addDisplayName(builder, displayName);
  AssignTrackerRequest.addAllowDriftCompensation(builder, this.allowDriftCompensation);

  return AssignTrackerRequest.endAssignTrackerRequest(builder);
}
}
