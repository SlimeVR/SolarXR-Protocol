// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AutoBoneProcessType } from '../../solarxr-protocol/rpc/auto-bone-process-type';


export class AutoBoneProcessStatus {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):AutoBoneProcessStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAutoBoneProcessStatus(bb:flatbuffers.ByteBuffer, obj?:AutoBoneProcessStatus):AutoBoneProcessStatus {
  return (obj || new AutoBoneProcessStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAutoBoneProcessStatus(bb:flatbuffers.ByteBuffer, obj?:AutoBoneProcessStatus):AutoBoneProcessStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AutoBoneProcessStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

processType():AutoBoneProcessType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : AutoBoneProcessType.NONE;
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

completed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

success():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startAutoBoneProcessStatus(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addProcessType(builder:flatbuffers.Builder, processType:AutoBoneProcessType) {
  builder.addFieldInt8(0, processType, AutoBoneProcessType.NONE);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static addCompleted(builder:flatbuffers.Builder, completed:boolean) {
  builder.addFieldInt8(2, +completed, +false);
}

static addSuccess(builder:flatbuffers.Builder, success:boolean) {
  builder.addFieldInt8(3, +success, +false);
}

static endAutoBoneProcessStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAutoBoneProcessStatus(builder:flatbuffers.Builder, processType:AutoBoneProcessType, messageOffset:flatbuffers.Offset, completed:boolean, success:boolean):flatbuffers.Offset {
  AutoBoneProcessStatus.startAutoBoneProcessStatus(builder);
  AutoBoneProcessStatus.addProcessType(builder, processType);
  AutoBoneProcessStatus.addMessage(builder, messageOffset);
  AutoBoneProcessStatus.addCompleted(builder, completed);
  AutoBoneProcessStatus.addSuccess(builder, success);
  return AutoBoneProcessStatus.endAutoBoneProcessStatus(builder);
}

unpack(): AutoBoneProcessStatusT {
  return new AutoBoneProcessStatusT(
    this.processType(),
    this.message(),
    this.completed(),
    this.success()
  );
}


unpackTo(_o: AutoBoneProcessStatusT): void {
  _o.processType = this.processType();
  _o.message = this.message();
  _o.completed = this.completed();
  _o.success = this.success();
}
}

export class AutoBoneProcessStatusT {
constructor(
  public processType: AutoBoneProcessType = AutoBoneProcessType.NONE,
  public message: string|Uint8Array|null = null,
  public completed: boolean = false,
  public success: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const message = (this.message !== null ? builder.createString(this.message!) : 0);

  return AutoBoneProcessStatus.createAutoBoneProcessStatus(builder,
    this.processType,
    message,
    this.completed,
    this.success
  );
}
}
