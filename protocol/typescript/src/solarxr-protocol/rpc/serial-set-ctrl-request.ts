// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * SerialSetCtrlRequest
 * Changing the Serial RTS and DTR signal from the Serial Line.
 * This signals are common used on Dev-Boards (used in DIY Slimes) for the Flash- or Reset-Pin
 * Some Drivers or Boards use this Pin not the same way. So if you open the WiFi Window,
 * the Reset Pin or the Flash pin is pressed all the time and does not allow a normal Boot.
 * This Control is to give the User control over this function.
 */
export class SerialSetCtrlRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SerialSetCtrlRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSerialSetCtrlRequest(bb:flatbuffers.ByteBuffer, obj?:SerialSetCtrlRequest):SerialSetCtrlRequest {
  return (obj || new SerialSetCtrlRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSerialSetCtrlRequest(bb:flatbuffers.ByteBuffer, obj?:SerialSetCtrlRequest):SerialSetCtrlRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SerialSetCtrlRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rts():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

dtr():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSerialSetCtrlRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRts(builder:flatbuffers.Builder, rts:boolean) {
  builder.addFieldInt8(0, +rts, +false);
}

static addDtr(builder:flatbuffers.Builder, dtr:boolean) {
  builder.addFieldInt8(1, +dtr, +false);
}

static endSerialSetCtrlRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSerialSetCtrlRequest(builder:flatbuffers.Builder, rts:boolean, dtr:boolean):flatbuffers.Offset {
  SerialSetCtrlRequest.startSerialSetCtrlRequest(builder);
  SerialSetCtrlRequest.addRts(builder, rts);
  SerialSetCtrlRequest.addDtr(builder, dtr);
  return SerialSetCtrlRequest.endSerialSetCtrlRequest(builder);
}

unpack(): SerialSetCtrlRequestT {
  return new SerialSetCtrlRequestT(
    this.rts(),
    this.dtr()
  );
}


unpackTo(_o: SerialSetCtrlRequestT): void {
  _o.rts = this.rts();
  _o.dtr = this.dtr();
}
}

export class SerialSetCtrlRequestT {
constructor(
  public rts: boolean = false,
  public dtr: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SerialSetCtrlRequest.createSerialSetCtrlRequest(builder,
    this.rts,
    this.dtr
  );
}
}
