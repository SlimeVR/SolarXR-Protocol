// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class FlightListPublicNetworks implements flatbuffers.IUnpackableObject<FlightListPublicNetworksT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FlightListPublicNetworks {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFlightListPublicNetworks(bb:flatbuffers.ByteBuffer, obj?:FlightListPublicNetworks):FlightListPublicNetworks {
  return (obj || new FlightListPublicNetworks()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFlightListPublicNetworks(bb:flatbuffers.ByteBuffer, obj?:FlightListPublicNetworks):FlightListPublicNetworks {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FlightListPublicNetworks()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

adapters(index: number):string
adapters(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
adapters(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

adaptersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFlightListPublicNetworks(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addAdapters(builder:flatbuffers.Builder, adaptersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, adaptersOffset, 0);
}

static createAdaptersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAdaptersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFlightListPublicNetworks(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFlightListPublicNetworks(builder:flatbuffers.Builder, adaptersOffset:flatbuffers.Offset):flatbuffers.Offset {
  FlightListPublicNetworks.startFlightListPublicNetworks(builder);
  FlightListPublicNetworks.addAdapters(builder, adaptersOffset);
  return FlightListPublicNetworks.endFlightListPublicNetworks(builder);
}

unpack(): FlightListPublicNetworksT {
  return new FlightListPublicNetworksT(
    this.bb!.createScalarList<string>(this.adapters.bind(this), this.adaptersLength())
  );
}


unpackTo(_o: FlightListPublicNetworksT): void {
  _o.adapters = this.bb!.createScalarList<string>(this.adapters.bind(this), this.adaptersLength());
}
}

export class FlightListPublicNetworksT implements flatbuffers.IGeneratedObject {
constructor(
  public adapters: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const adapters = FlightListPublicNetworks.createAdaptersVector(builder, builder.createObjectOffsetList(this.adapters));

  return FlightListPublicNetworks.createFlightListPublicNetworks(builder,
    adapters
  );
}
}
