// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FilteringSettings, FilteringSettingsT } from '../../solarxr-protocol/rpc/filtering-settings';
import { SteamVRTrackersSetting, SteamVRTrackersSettingT } from '../../solarxr-protocol/rpc/steam-vrtrackers-setting';


export class ChangeSettingsRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ChangeSettingsRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChangeSettingsRequest(bb:flatbuffers.ByteBuffer, obj?:ChangeSettingsRequest):ChangeSettingsRequest {
  return (obj || new ChangeSettingsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChangeSettingsRequest(bb:flatbuffers.ByteBuffer, obj?:ChangeSettingsRequest):ChangeSettingsRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChangeSettingsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

steamVrTrackers(obj?:SteamVRTrackersSetting):SteamVRTrackersSetting|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SteamVRTrackersSetting()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

filtering(obj?:FilteringSettings):FilteringSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FilteringSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startChangeSettingsRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSteamVrTrackers(builder:flatbuffers.Builder, steamVrTrackersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, steamVrTrackersOffset, 0);
}

static addFiltering(builder:flatbuffers.Builder, filteringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, filteringOffset, 0);
}

static endChangeSettingsRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): ChangeSettingsRequestT {
  return new ChangeSettingsRequestT(
    (this.steamVrTrackers() !== null ? this.steamVrTrackers()!.unpack() : null),
    (this.filtering() !== null ? this.filtering()!.unpack() : null)
  );
}


unpackTo(_o: ChangeSettingsRequestT): void {
  _o.steamVrTrackers = (this.steamVrTrackers() !== null ? this.steamVrTrackers()!.unpack() : null);
  _o.filtering = (this.filtering() !== null ? this.filtering()!.unpack() : null);
}
}

export class ChangeSettingsRequestT {
constructor(
  public steamVrTrackers: SteamVRTrackersSettingT|null = null,
  public filtering: FilteringSettingsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const steamVrTrackers = (this.steamVrTrackers !== null ? this.steamVrTrackers!.pack(builder) : 0);
  const filtering = (this.filtering !== null ? this.filtering!.pack(builder) : 0);

  ChangeSettingsRequest.startChangeSettingsRequest(builder);
  ChangeSettingsRequest.addSteamVrTrackers(builder, steamVrTrackers);
  ChangeSettingsRequest.addFiltering(builder, filtering);

  return ChangeSettingsRequest.endChangeSettingsRequest(builder);
}
}
