// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AutoBoneSettings, AutoBoneSettingsT } from '../../solarxr-protocol/rpc/auto-bone-settings.js';
import { DriftCompensationSettings, DriftCompensationSettingsT } from '../../solarxr-protocol/rpc/drift-compensation-settings.js';
import { FilteringSettings, FilteringSettingsT } from '../../solarxr-protocol/rpc/filtering-settings.js';
import { OSCRouterSettings, OSCRouterSettingsT } from '../../solarxr-protocol/rpc/oscrouter-settings.js';
import { ResetsSettings, ResetsSettingsT } from '../../solarxr-protocol/rpc/resets-settings.js';
import { SteamVRTrackersSetting, SteamVRTrackersSettingT } from '../../solarxr-protocol/rpc/steam-vrtrackers-setting.js';
import { TapDetectionSettings, TapDetectionSettingsT } from '../../solarxr-protocol/rpc/tap-detection-settings.js';
import { VMCOSCSettings, VMCOSCSettingsT } from '../../solarxr-protocol/rpc/vmcoscsettings.js';
import { VRCOSCSettings, VRCOSCSettingsT } from '../../solarxr-protocol/rpc/vrcoscsettings.js';
import { ModelSettings, ModelSettingsT } from '../../solarxr-protocol/rpc/settings/model-settings.js';


export class ChangeSettingsRequest implements flatbuffers.IUnpackableObject<ChangeSettingsRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ChangeSettingsRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChangeSettingsRequest(bb:flatbuffers.ByteBuffer, obj?:ChangeSettingsRequest):ChangeSettingsRequest {
  return (obj || new ChangeSettingsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChangeSettingsRequest(bb:flatbuffers.ByteBuffer, obj?:ChangeSettingsRequest):ChangeSettingsRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChangeSettingsRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

steamVrTrackers(obj?:SteamVRTrackersSetting):SteamVRTrackersSetting|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SteamVRTrackersSetting()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

filtering(obj?:FilteringSettings):FilteringSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FilteringSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

driftCompensation(obj?:DriftCompensationSettings):DriftCompensationSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new DriftCompensationSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

oscRouter(obj?:OSCRouterSettings):OSCRouterSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new OSCRouterSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

vrcOsc(obj?:VRCOSCSettings):VRCOSCSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new VRCOSCSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

vmcOsc(obj?:VMCOSCSettings):VMCOSCSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new VMCOSCSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

modelSettings(obj?:ModelSettings):ModelSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new ModelSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

tapDetectionSettings(obj?:TapDetectionSettings):TapDetectionSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new TapDetectionSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

autoBoneSettings(obj?:AutoBoneSettings):AutoBoneSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new AutoBoneSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

resetsSettings(obj?:ResetsSettings):ResetsSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new ResetsSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startChangeSettingsRequest(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addSteamVrTrackers(builder:flatbuffers.Builder, steamVrTrackersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, steamVrTrackersOffset, 0);
}

static addFiltering(builder:flatbuffers.Builder, filteringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, filteringOffset, 0);
}

static addDriftCompensation(builder:flatbuffers.Builder, driftCompensationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, driftCompensationOffset, 0);
}

static addOscRouter(builder:flatbuffers.Builder, oscRouterOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, oscRouterOffset, 0);
}

static addVrcOsc(builder:flatbuffers.Builder, vrcOscOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, vrcOscOffset, 0);
}

static addVmcOsc(builder:flatbuffers.Builder, vmcOscOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, vmcOscOffset, 0);
}

static addModelSettings(builder:flatbuffers.Builder, modelSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, modelSettingsOffset, 0);
}

static addTapDetectionSettings(builder:flatbuffers.Builder, tapDetectionSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, tapDetectionSettingsOffset, 0);
}

static addAutoBoneSettings(builder:flatbuffers.Builder, autoBoneSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, autoBoneSettingsOffset, 0);
}

static addResetsSettings(builder:flatbuffers.Builder, resetsSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, resetsSettingsOffset, 0);
}

static endChangeSettingsRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): ChangeSettingsRequestT {
  return new ChangeSettingsRequestT(
    (this.steamVrTrackers() !== null ? this.steamVrTrackers()!.unpack() : null),
    (this.filtering() !== null ? this.filtering()!.unpack() : null),
    (this.driftCompensation() !== null ? this.driftCompensation()!.unpack() : null),
    (this.oscRouter() !== null ? this.oscRouter()!.unpack() : null),
    (this.vrcOsc() !== null ? this.vrcOsc()!.unpack() : null),
    (this.vmcOsc() !== null ? this.vmcOsc()!.unpack() : null),
    (this.modelSettings() !== null ? this.modelSettings()!.unpack() : null),
    (this.tapDetectionSettings() !== null ? this.tapDetectionSettings()!.unpack() : null),
    (this.autoBoneSettings() !== null ? this.autoBoneSettings()!.unpack() : null),
    (this.resetsSettings() !== null ? this.resetsSettings()!.unpack() : null)
  );
}


unpackTo(_o: ChangeSettingsRequestT): void {
  _o.steamVrTrackers = (this.steamVrTrackers() !== null ? this.steamVrTrackers()!.unpack() : null);
  _o.filtering = (this.filtering() !== null ? this.filtering()!.unpack() : null);
  _o.driftCompensation = (this.driftCompensation() !== null ? this.driftCompensation()!.unpack() : null);
  _o.oscRouter = (this.oscRouter() !== null ? this.oscRouter()!.unpack() : null);
  _o.vrcOsc = (this.vrcOsc() !== null ? this.vrcOsc()!.unpack() : null);
  _o.vmcOsc = (this.vmcOsc() !== null ? this.vmcOsc()!.unpack() : null);
  _o.modelSettings = (this.modelSettings() !== null ? this.modelSettings()!.unpack() : null);
  _o.tapDetectionSettings = (this.tapDetectionSettings() !== null ? this.tapDetectionSettings()!.unpack() : null);
  _o.autoBoneSettings = (this.autoBoneSettings() !== null ? this.autoBoneSettings()!.unpack() : null);
  _o.resetsSettings = (this.resetsSettings() !== null ? this.resetsSettings()!.unpack() : null);
}
}

export class ChangeSettingsRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public steamVrTrackers: SteamVRTrackersSettingT|null = null,
  public filtering: FilteringSettingsT|null = null,
  public driftCompensation: DriftCompensationSettingsT|null = null,
  public oscRouter: OSCRouterSettingsT|null = null,
  public vrcOsc: VRCOSCSettingsT|null = null,
  public vmcOsc: VMCOSCSettingsT|null = null,
  public modelSettings: ModelSettingsT|null = null,
  public tapDetectionSettings: TapDetectionSettingsT|null = null,
  public autoBoneSettings: AutoBoneSettingsT|null = null,
  public resetsSettings: ResetsSettingsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const steamVrTrackers = (this.steamVrTrackers !== null ? this.steamVrTrackers!.pack(builder) : 0);
  const filtering = (this.filtering !== null ? this.filtering!.pack(builder) : 0);
  const driftCompensation = (this.driftCompensation !== null ? this.driftCompensation!.pack(builder) : 0);
  const oscRouter = (this.oscRouter !== null ? this.oscRouter!.pack(builder) : 0);
  const vrcOsc = (this.vrcOsc !== null ? this.vrcOsc!.pack(builder) : 0);
  const vmcOsc = (this.vmcOsc !== null ? this.vmcOsc!.pack(builder) : 0);
  const modelSettings = (this.modelSettings !== null ? this.modelSettings!.pack(builder) : 0);
  const tapDetectionSettings = (this.tapDetectionSettings !== null ? this.tapDetectionSettings!.pack(builder) : 0);
  const autoBoneSettings = (this.autoBoneSettings !== null ? this.autoBoneSettings!.pack(builder) : 0);
  const resetsSettings = (this.resetsSettings !== null ? this.resetsSettings!.pack(builder) : 0);

  ChangeSettingsRequest.startChangeSettingsRequest(builder);
  ChangeSettingsRequest.addSteamVrTrackers(builder, steamVrTrackers);
  ChangeSettingsRequest.addFiltering(builder, filtering);
  ChangeSettingsRequest.addDriftCompensation(builder, driftCompensation);
  ChangeSettingsRequest.addOscRouter(builder, oscRouter);
  ChangeSettingsRequest.addVrcOsc(builder, vrcOsc);
  ChangeSettingsRequest.addVmcOsc(builder, vmcOsc);
  ChangeSettingsRequest.addModelSettings(builder, modelSettings);
  ChangeSettingsRequest.addTapDetectionSettings(builder, tapDetectionSettings);
  ChangeSettingsRequest.addAutoBoneSettings(builder, autoBoneSettings);
  ChangeSettingsRequest.addResetsSettings(builder, resetsSettings);

  return ChangeSettingsRequest.endChangeSettingsRequest(builder);
}
}
