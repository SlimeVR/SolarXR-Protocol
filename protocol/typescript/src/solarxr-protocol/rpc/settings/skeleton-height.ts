// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SkeletonHeight implements flatbuffers.IUnpackableObject<SkeletonHeightT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SkeletonHeight {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSkeletonHeight(bb:flatbuffers.ByteBuffer, obj?:SkeletonHeight):SkeletonHeight {
  return (obj || new SkeletonHeight()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSkeletonHeight(bb:flatbuffers.ByteBuffer, obj?:SkeletonHeight):SkeletonHeight {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SkeletonHeight()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

hmdHeight():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

floorHeight():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

static startSkeletonHeight(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addHmdHeight(builder:flatbuffers.Builder, hmdHeight:number) {
  builder.addFieldFloat32(0, hmdHeight, 0);
}

static addFloorHeight(builder:flatbuffers.Builder, floorHeight:number) {
  builder.addFieldFloat32(1, floorHeight, 0);
}

static endSkeletonHeight(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSkeletonHeight(builder:flatbuffers.Builder, hmdHeight:number|null, floorHeight:number|null):flatbuffers.Offset {
  SkeletonHeight.startSkeletonHeight(builder);
  if (hmdHeight !== null)
    SkeletonHeight.addHmdHeight(builder, hmdHeight);
  if (floorHeight !== null)
    SkeletonHeight.addFloorHeight(builder, floorHeight);
  return SkeletonHeight.endSkeletonHeight(builder);
}

unpack(): SkeletonHeightT {
  return new SkeletonHeightT(
    this.hmdHeight(),
    this.floorHeight()
  );
}


unpackTo(_o: SkeletonHeightT): void {
  _o.hmdHeight = this.hmdHeight();
  _o.floorHeight = this.floorHeight();
}
}

export class SkeletonHeightT implements flatbuffers.IGeneratedObject {
constructor(
  public hmdHeight: number|null = null,
  public floorHeight: number|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SkeletonHeight.createSkeletonHeight(builder,
    this.hmdHeight,
    this.floorHeight
  );
}
}
