// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Changes the state of the overlay's display mode.
 */
export class OverlayDisplayModeChangeRequest implements flatbuffers.IUnpackableObject<OverlayDisplayModeChangeRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OverlayDisplayModeChangeRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOverlayDisplayModeChangeRequest(bb:flatbuffers.ByteBuffer, obj?:OverlayDisplayModeChangeRequest):OverlayDisplayModeChangeRequest {
  return (obj || new OverlayDisplayModeChangeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOverlayDisplayModeChangeRequest(bb:flatbuffers.ByteBuffer, obj?:OverlayDisplayModeChangeRequest):OverlayDisplayModeChangeRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OverlayDisplayModeChangeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

isVisible():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

isMirrored():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

static startOverlayDisplayModeChangeRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addIsVisible(builder:flatbuffers.Builder, isVisible:boolean) {
  builder.addFieldInt8(0, +isVisible, 0);
}

static addIsMirrored(builder:flatbuffers.Builder, isMirrored:boolean) {
  builder.addFieldInt8(1, +isMirrored, 0);
}

static endOverlayDisplayModeChangeRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOverlayDisplayModeChangeRequest(builder:flatbuffers.Builder, isVisible:boolean|null, isMirrored:boolean|null):flatbuffers.Offset {
  OverlayDisplayModeChangeRequest.startOverlayDisplayModeChangeRequest(builder);
  if (isVisible !== null)
    OverlayDisplayModeChangeRequest.addIsVisible(builder, isVisible);
  if (isMirrored !== null)
    OverlayDisplayModeChangeRequest.addIsMirrored(builder, isMirrored);
  return OverlayDisplayModeChangeRequest.endOverlayDisplayModeChangeRequest(builder);
}

unpack(): OverlayDisplayModeChangeRequestT {
  return new OverlayDisplayModeChangeRequestT(
    this.isVisible(),
    this.isMirrored()
  );
}


unpackTo(_o: OverlayDisplayModeChangeRequestT): void {
  _o.isVisible = this.isVisible();
  _o.isMirrored = this.isMirrored();
}
}

export class OverlayDisplayModeChangeRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public isVisible: boolean|null = null,
  public isMirrored: boolean|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return OverlayDisplayModeChangeRequest.createOverlayDisplayModeChangeRequest(builder,
    this.isVisible,
    this.isMirrored
  );
}
}
