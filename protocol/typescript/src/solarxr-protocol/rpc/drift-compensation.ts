// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Settings related to IMU yaw drift compensation
 */
export class DriftCompensation implements flatbuffers.IUnpackableObject<DriftCompensationT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DriftCompensation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDriftCompensation(bb:flatbuffers.ByteBuffer, obj?:DriftCompensation):DriftCompensation {
  return (obj || new DriftCompensation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDriftCompensation(bb:flatbuffers.ByteBuffer, obj?:DriftCompensation):DriftCompensation {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DriftCompensation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

enabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * 0 to 1. A higher value results in more yaw drift compensation
 */
amount():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Number of previous resets to take into account when calculating yaw drift
 */
maxResets():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startDriftCompensation(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addEnabled(builder:flatbuffers.Builder, enabled:boolean) {
  builder.addFieldInt8(0, +enabled, +false);
}

static addAmount(builder:flatbuffers.Builder, amount:number) {
  builder.addFieldFloat32(1, amount, 0.0);
}

static addMaxResets(builder:flatbuffers.Builder, maxResets:number) {
  builder.addFieldInt16(2, maxResets, 0);
}

static endDriftCompensation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDriftCompensation(builder:flatbuffers.Builder, enabled:boolean, amount:number, maxResets:number):flatbuffers.Offset {
  DriftCompensation.startDriftCompensation(builder);
  DriftCompensation.addEnabled(builder, enabled);
  DriftCompensation.addAmount(builder, amount);
  DriftCompensation.addMaxResets(builder, maxResets);
  return DriftCompensation.endDriftCompensation(builder);
}

unpack(): DriftCompensationT {
  return new DriftCompensationT(
    this.enabled(),
    this.amount(),
    this.maxResets()
  );
}


unpackTo(_o: DriftCompensationT): void {
  _o.enabled = this.enabled();
  _o.amount = this.amount();
  _o.maxResets = this.maxResets();
}
}

export class DriftCompensationT implements flatbuffers.IGeneratedObject {
constructor(
  public enabled: boolean = false,
  public amount: number = 0.0,
  public maxResets: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return DriftCompensation.createDriftCompensation(builder,
    this.enabled,
    this.amount,
    this.maxResets
  );
}
}
