// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FkSkeletonToggle, FkSkeletonToggleT } from '../../solarxr-protocol/rpc/fk-skeleton-toggle';
import { FkSkeletonValue, FkSkeletonValueT } from '../../solarxr-protocol/rpc/fk-skeleton-value';


export class FkSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FkSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFkSettings(bb:flatbuffers.ByteBuffer, obj?:FkSettings):FkSettings {
  return (obj || new FkSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFkSettings(bb:flatbuffers.ByteBuffer, obj?:FkSettings):FkSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FkSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

toggles(index: number, obj?:FkSkeletonToggle):FkSkeletonToggle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new FkSkeletonToggle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

togglesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

values(index: number, obj?:FkSkeletonValue):FkSkeletonValue|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FkSkeletonValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFkSettings(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addToggles(builder:flatbuffers.Builder, togglesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, togglesOffset, 0);
}

static createTogglesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTogglesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFkSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFkSettings(builder:flatbuffers.Builder, togglesOffset:flatbuffers.Offset, valuesOffset:flatbuffers.Offset):flatbuffers.Offset {
  FkSettings.startFkSettings(builder);
  FkSettings.addToggles(builder, togglesOffset);
  FkSettings.addValues(builder, valuesOffset);
  return FkSettings.endFkSettings(builder);
}

unpack(): FkSettingsT {
  return new FkSettingsT(
    this.bb!.createObjList(this.toggles.bind(this), this.togglesLength()),
    this.bb!.createObjList(this.values.bind(this), this.valuesLength())
  );
}


unpackTo(_o: FkSettingsT): void {
  _o.toggles = this.bb!.createObjList(this.toggles.bind(this), this.togglesLength());
  _o.values = this.bb!.createObjList(this.values.bind(this), this.valuesLength());
}
}

export class FkSettingsT {
constructor(
  public toggles: (FkSkeletonToggleT)[] = [],
  public values: (FkSkeletonValueT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const toggles = FkSettings.createTogglesVector(builder, builder.createObjectOffsetList(this.toggles));
  const values = FkSettings.createValuesVector(builder, builder.createObjectOffsetList(this.values));

  return FkSettings.createFkSettings(builder,
    toggles,
    values
  );
}
}
