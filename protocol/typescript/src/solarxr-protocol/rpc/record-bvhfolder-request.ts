// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class RecordBVHFolderRequest implements flatbuffers.IUnpackableObject<RecordBVHFolderRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RecordBVHFolderRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRecordBVHFolderRequest(bb:flatbuffers.ByteBuffer, obj?:RecordBVHFolderRequest):RecordBVHFolderRequest {
  return (obj || new RecordBVHFolderRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRecordBVHFolderRequest(bb:flatbuffers.ByteBuffer, obj?:RecordBVHFolderRequest):RecordBVHFolderRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RecordBVHFolderRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stop():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Path sent when starting the recording, if null the recording won't happen
 */
folderPath():string|null
folderPath(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
folderPath(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRecordBVHFolderRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addStop(builder:flatbuffers.Builder, stop:boolean) {
  builder.addFieldInt8(0, +stop, +false);
}

static addFolderPath(builder:flatbuffers.Builder, folderPathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, folderPathOffset, 0);
}

static endRecordBVHFolderRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRecordBVHFolderRequest(builder:flatbuffers.Builder, stop:boolean, folderPathOffset:flatbuffers.Offset):flatbuffers.Offset {
  RecordBVHFolderRequest.startRecordBVHFolderRequest(builder);
  RecordBVHFolderRequest.addStop(builder, stop);
  RecordBVHFolderRequest.addFolderPath(builder, folderPathOffset);
  return RecordBVHFolderRequest.endRecordBVHFolderRequest(builder);
}

unpack(): RecordBVHFolderRequestT {
  return new RecordBVHFolderRequestT(
    this.stop(),
    this.folderPath()
  );
}


unpackTo(_o: RecordBVHFolderRequestT): void {
  _o.stop = this.stop();
  _o.folderPath = this.folderPath();
}
}

export class RecordBVHFolderRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public stop: boolean = false,
  public folderPath: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const folderPath = (this.folderPath !== null ? builder.createString(this.folderPath!) : 0);

  return RecordBVHFolderRequest.createRecordBVHFolderRequest(builder,
    this.stop,
    folderPath
  );
}
}
