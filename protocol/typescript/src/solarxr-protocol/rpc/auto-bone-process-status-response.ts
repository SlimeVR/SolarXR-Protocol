// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AutoBoneProcessType } from '../../solarxr-protocol/rpc/auto-bone-process-type.js';


export class AutoBoneProcessStatusResponse implements flatbuffers.IUnpackableObject<AutoBoneProcessStatusResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AutoBoneProcessStatusResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAutoBoneProcessStatusResponse(bb:flatbuffers.ByteBuffer, obj?:AutoBoneProcessStatusResponse):AutoBoneProcessStatusResponse {
  return (obj || new AutoBoneProcessStatusResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAutoBoneProcessStatusResponse(bb:flatbuffers.ByteBuffer, obj?:AutoBoneProcessStatusResponse):AutoBoneProcessStatusResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AutoBoneProcessStatusResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

processType():AutoBoneProcessType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : AutoBoneProcessType.NONE;
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

current():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

total():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

completed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

success():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startAutoBoneProcessStatusResponse(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addProcessType(builder:flatbuffers.Builder, processType:AutoBoneProcessType) {
  builder.addFieldInt8(0, processType, AutoBoneProcessType.NONE);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static addCurrent(builder:flatbuffers.Builder, current:number) {
  builder.addFieldInt32(2, current, 0);
}

static addTotal(builder:flatbuffers.Builder, total:number) {
  builder.addFieldInt32(3, total, 0);
}

static addCompleted(builder:flatbuffers.Builder, completed:boolean) {
  builder.addFieldInt8(4, +completed, +false);
}

static addSuccess(builder:flatbuffers.Builder, success:boolean) {
  builder.addFieldInt8(5, +success, +false);
}

static endAutoBoneProcessStatusResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAutoBoneProcessStatusResponse(builder:flatbuffers.Builder, processType:AutoBoneProcessType, messageOffset:flatbuffers.Offset, current:number, total:number, completed:boolean, success:boolean):flatbuffers.Offset {
  AutoBoneProcessStatusResponse.startAutoBoneProcessStatusResponse(builder);
  AutoBoneProcessStatusResponse.addProcessType(builder, processType);
  AutoBoneProcessStatusResponse.addMessage(builder, messageOffset);
  AutoBoneProcessStatusResponse.addCurrent(builder, current);
  AutoBoneProcessStatusResponse.addTotal(builder, total);
  AutoBoneProcessStatusResponse.addCompleted(builder, completed);
  AutoBoneProcessStatusResponse.addSuccess(builder, success);
  return AutoBoneProcessStatusResponse.endAutoBoneProcessStatusResponse(builder);
}

unpack(): AutoBoneProcessStatusResponseT {
  return new AutoBoneProcessStatusResponseT(
    this.processType(),
    this.message(),
    this.current(),
    this.total(),
    this.completed(),
    this.success()
  );
}


unpackTo(_o: AutoBoneProcessStatusResponseT): void {
  _o.processType = this.processType();
  _o.message = this.message();
  _o.current = this.current();
  _o.total = this.total();
  _o.completed = this.completed();
  _o.success = this.success();
}
}

export class AutoBoneProcessStatusResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public processType: AutoBoneProcessType = AutoBoneProcessType.NONE,
  public message: string|Uint8Array|null = null,
  public current: number = 0,
  public total: number = 0,
  public completed: boolean = false,
  public success: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const message = (this.message !== null ? builder.createString(this.message!) : 0);

  return AutoBoneProcessStatusResponse.createAutoBoneProcessStatusResponse(builder,
    this.processType,
    message,
    this.current,
    this.total,
    this.completed,
    this.success
  );
}
}
