// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { VRCConfigRecommendedValues, VRCConfigRecommendedValuesT } from '../../solarxr-protocol/rpc/vrcconfig-recommended-values.js';
import { VRCConfigValidity, VRCConfigValidityT } from '../../solarxr-protocol/rpc/vrcconfig-validity.js';
import { VRCConfigValues, VRCConfigValuesT } from '../../solarxr-protocol/rpc/vrcconfig-values.js';


/**
 * Sent every time the vrchat config state gets updated
 * used to display vrchat missconfig settings to the user
 */
export class VRCConfigStateChangeResponse implements flatbuffers.IUnpackableObject<VRCConfigStateChangeResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VRCConfigStateChangeResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVRCConfigStateChangeResponse(bb:flatbuffers.ByteBuffer, obj?:VRCConfigStateChangeResponse):VRCConfigStateChangeResponse {
  return (obj || new VRCConfigStateChangeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVRCConfigStateChangeResponse(bb:flatbuffers.ByteBuffer, obj?:VRCConfigStateChangeResponse):VRCConfigStateChangeResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VRCConfigStateChangeResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

isSupported():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

validity(obj?:VRCConfigValidity):VRCConfigValidity|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new VRCConfigValidity()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

state(obj?:VRCConfigValues):VRCConfigValues|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new VRCConfigValues()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

recommended(obj?:VRCConfigRecommendedValues):VRCConfigRecommendedValues|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new VRCConfigRecommendedValues()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

muted(index: number):string
muted(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
muted(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

mutedLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startVRCConfigStateChangeResponse(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addIsSupported(builder:flatbuffers.Builder, isSupported:boolean) {
  builder.addFieldInt8(0, +isSupported, +false);
}

static addValidity(builder:flatbuffers.Builder, validityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, validityOffset, 0);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, stateOffset, 0);
}

static addRecommended(builder:flatbuffers.Builder, recommendedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, recommendedOffset, 0);
}

static addMuted(builder:flatbuffers.Builder, mutedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, mutedOffset, 0);
}

static createMutedVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMutedVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endVRCConfigStateChangeResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): VRCConfigStateChangeResponseT {
  return new VRCConfigStateChangeResponseT(
    this.isSupported(),
    (this.validity() !== null ? this.validity()!.unpack() : null),
    (this.state() !== null ? this.state()!.unpack() : null),
    (this.recommended() !== null ? this.recommended()!.unpack() : null),
    this.bb!.createScalarList<string>(this.muted.bind(this), this.mutedLength())
  );
}


unpackTo(_o: VRCConfigStateChangeResponseT): void {
  _o.isSupported = this.isSupported();
  _o.validity = (this.validity() !== null ? this.validity()!.unpack() : null);
  _o.state = (this.state() !== null ? this.state()!.unpack() : null);
  _o.recommended = (this.recommended() !== null ? this.recommended()!.unpack() : null);
  _o.muted = this.bb!.createScalarList<string>(this.muted.bind(this), this.mutedLength());
}
}

export class VRCConfigStateChangeResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public isSupported: boolean = false,
  public validity: VRCConfigValidityT|null = null,
  public state: VRCConfigValuesT|null = null,
  public recommended: VRCConfigRecommendedValuesT|null = null,
  public muted: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const validity = (this.validity !== null ? this.validity!.pack(builder) : 0);
  const state = (this.state !== null ? this.state!.pack(builder) : 0);
  const recommended = (this.recommended !== null ? this.recommended!.pack(builder) : 0);
  const muted = VRCConfigStateChangeResponse.createMutedVector(builder, builder.createObjectOffsetList(this.muted));

  VRCConfigStateChangeResponse.startVRCConfigStateChangeResponse(builder);
  VRCConfigStateChangeResponse.addIsSupported(builder, this.isSupported);
  VRCConfigStateChangeResponse.addValidity(builder, validity);
  VRCConfigStateChangeResponse.addState(builder, state);
  VRCConfigStateChangeResponse.addRecommended(builder, recommended);
  VRCConfigStateChangeResponse.addMuted(builder, muted);

  return VRCConfigStateChangeResponse.endVRCConfigStateChangeResponse(builder);
}
}
