// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SkeletonPart, SkeletonPartT } from '../../solarxr-protocol/rpc/skeleton-part.js';


export class AutoBoneEpochResponse implements flatbuffers.IUnpackableObject<AutoBoneEpochResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AutoBoneEpochResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAutoBoneEpochResponse(bb:flatbuffers.ByteBuffer, obj?:AutoBoneEpochResponse):AutoBoneEpochResponse {
  return (obj || new AutoBoneEpochResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAutoBoneEpochResponse(bb:flatbuffers.ByteBuffer, obj?:AutoBoneEpochResponse):AutoBoneEpochResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AutoBoneEpochResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

currentEpoch():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

totalEpochs():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

epochError():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

adjustedSkeletonParts(index: number, obj?:SkeletonPart):SkeletonPart|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new SkeletonPart()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

adjustedSkeletonPartsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startAutoBoneEpochResponse(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addCurrentEpoch(builder:flatbuffers.Builder, currentEpoch:number) {
  builder.addFieldInt32(0, currentEpoch, 0);
}

static addTotalEpochs(builder:flatbuffers.Builder, totalEpochs:number) {
  builder.addFieldInt32(1, totalEpochs, 0);
}

static addEpochError(builder:flatbuffers.Builder, epochError:number) {
  builder.addFieldFloat32(2, epochError, 0.0);
}

static addAdjustedSkeletonParts(builder:flatbuffers.Builder, adjustedSkeletonPartsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, adjustedSkeletonPartsOffset, 0);
}

static createAdjustedSkeletonPartsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAdjustedSkeletonPartsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endAutoBoneEpochResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAutoBoneEpochResponse(builder:flatbuffers.Builder, currentEpoch:number, totalEpochs:number, epochError:number, adjustedSkeletonPartsOffset:flatbuffers.Offset):flatbuffers.Offset {
  AutoBoneEpochResponse.startAutoBoneEpochResponse(builder);
  AutoBoneEpochResponse.addCurrentEpoch(builder, currentEpoch);
  AutoBoneEpochResponse.addTotalEpochs(builder, totalEpochs);
  AutoBoneEpochResponse.addEpochError(builder, epochError);
  AutoBoneEpochResponse.addAdjustedSkeletonParts(builder, adjustedSkeletonPartsOffset);
  return AutoBoneEpochResponse.endAutoBoneEpochResponse(builder);
}

unpack(): AutoBoneEpochResponseT {
  return new AutoBoneEpochResponseT(
    this.currentEpoch(),
    this.totalEpochs(),
    this.epochError(),
    this.bb!.createObjList<SkeletonPart, SkeletonPartT>(this.adjustedSkeletonParts.bind(this), this.adjustedSkeletonPartsLength())
  );
}


unpackTo(_o: AutoBoneEpochResponseT): void {
  _o.currentEpoch = this.currentEpoch();
  _o.totalEpochs = this.totalEpochs();
  _o.epochError = this.epochError();
  _o.adjustedSkeletonParts = this.bb!.createObjList<SkeletonPart, SkeletonPartT>(this.adjustedSkeletonParts.bind(this), this.adjustedSkeletonPartsLength());
}
}

export class AutoBoneEpochResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public currentEpoch: number = 0,
  public totalEpochs: number = 0,
  public epochError: number = 0.0,
  public adjustedSkeletonParts: (SkeletonPartT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const adjustedSkeletonParts = AutoBoneEpochResponse.createAdjustedSkeletonPartsVector(builder, builder.createObjectOffsetList(this.adjustedSkeletonParts));

  return AutoBoneEpochResponse.createAutoBoneEpochResponse(builder,
    this.currentEpoch,
    this.totalEpochs,
    this.epochError,
    adjustedSkeletonParts
  );
}
}
