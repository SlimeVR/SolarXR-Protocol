// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * SerialRestartRequest
 * Sending a RTS/DTR cycle to the tracker
 * not supported by slimevr tracker
 */
export class SerialRestartTrackerRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SerialRestartTrackerRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSerialRestartTrackerRequest(bb:flatbuffers.ByteBuffer, obj?:SerialRestartTrackerRequest):SerialRestartTrackerRequest {
  return (obj || new SerialRestartTrackerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSerialRestartTrackerRequest(bb:flatbuffers.ByteBuffer, obj?:SerialRestartTrackerRequest):SerialRestartTrackerRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SerialRestartTrackerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startSerialRestartTrackerRequest(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endSerialRestartTrackerRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSerialRestartTrackerRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  SerialRestartTrackerRequest.startSerialRestartTrackerRequest(builder);
  return SerialRestartTrackerRequest.endSerialRestartTrackerRequest(builder);
}

unpack(): SerialRestartTrackerRequestT {
  return new SerialRestartTrackerRequestT();
}


unpackTo(_o: SerialRestartTrackerRequestT): void {}
}

export class SerialRestartTrackerRequestT {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SerialRestartTrackerRequest.createSerialRestartTrackerRequest(builder);
}
}
