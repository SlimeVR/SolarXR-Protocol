// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SerialDevice, SerialDeviceT } from '../../solarxr-protocol/rpc/serial-device.js';


export class NewSerialDeviceResponse implements flatbuffers.IUnpackableObject<NewSerialDeviceResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NewSerialDeviceResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNewSerialDeviceResponse(bb:flatbuffers.ByteBuffer, obj?:NewSerialDeviceResponse):NewSerialDeviceResponse {
  return (obj || new NewSerialDeviceResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNewSerialDeviceResponse(bb:flatbuffers.ByteBuffer, obj?:NewSerialDeviceResponse):NewSerialDeviceResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NewSerialDeviceResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

device(obj?:SerialDevice):SerialDevice|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SerialDevice()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startNewSerialDeviceResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDevice(builder:flatbuffers.Builder, deviceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, deviceOffset, 0);
}

static endNewSerialDeviceResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNewSerialDeviceResponse(builder:flatbuffers.Builder, deviceOffset:flatbuffers.Offset):flatbuffers.Offset {
  NewSerialDeviceResponse.startNewSerialDeviceResponse(builder);
  NewSerialDeviceResponse.addDevice(builder, deviceOffset);
  return NewSerialDeviceResponse.endNewSerialDeviceResponse(builder);
}

unpack(): NewSerialDeviceResponseT {
  return new NewSerialDeviceResponseT(
    (this.device() !== null ? this.device()!.unpack() : null)
  );
}


unpackTo(_o: NewSerialDeviceResponseT): void {
  _o.device = (this.device() !== null ? this.device()!.unpack() : null);
}
}

export class NewSerialDeviceResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public device: SerialDeviceT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const device = (this.device !== null ? this.device!.pack(builder) : 0);

  return NewSerialDeviceResponse.createNewSerialDeviceResponse(builder,
    device
  );
}
}
