// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * https://github.com/SlimeVR/SlimeVR-Server/blob/v0.8.3/server/src/main/java/dev/slimevr/config/AutoBoneConfig.kt
 */
export class AutoBoneSettings implements flatbuffers.IUnpackableObject<AutoBoneSettingsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AutoBoneSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAutoBoneSettings(bb:flatbuffers.ByteBuffer, obj?:AutoBoneSettings):AutoBoneSettings {
  return (obj || new AutoBoneSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAutoBoneSettings(bb:flatbuffers.ByteBuffer, obj?:AutoBoneSettings):AutoBoneSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AutoBoneSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cursorIncrement():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : null;
}

minDataDistance():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : null;
}

maxDataDistance():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : null;
}

numEpochs():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : null;
}

printEveryNumEpochs():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : null;
}

initialAdjustRate():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

adjustRateDecay():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

slideErrorFactor():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

offsetSlideErrorFactor():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

footHeightOffsetErrorFactor():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

bodyProportionErrorFactor():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

heightErrorFactor():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

positionErrorFactor():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

positionOffsetErrorFactor():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

calcInitError():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

targetHmdHeight():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

targetFullHeight():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

randomizeFrameOrder():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

scaleEachStep():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

sampleCount():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : null;
}

sampleRateMs():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : null;
}

saveRecordings():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

useSkeletonHeight():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

randSeed():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : null;
}

static startAutoBoneSettings(builder:flatbuffers.Builder) {
  builder.startObject(24);
}

static addCursorIncrement(builder:flatbuffers.Builder, cursorIncrement:number) {
  builder.addFieldInt32(0, cursorIncrement, 0);
}

static addMinDataDistance(builder:flatbuffers.Builder, minDataDistance:number) {
  builder.addFieldInt32(1, minDataDistance, 0);
}

static addMaxDataDistance(builder:flatbuffers.Builder, maxDataDistance:number) {
  builder.addFieldInt32(2, maxDataDistance, 0);
}

static addNumEpochs(builder:flatbuffers.Builder, numEpochs:number) {
  builder.addFieldInt32(3, numEpochs, 0);
}

static addPrintEveryNumEpochs(builder:flatbuffers.Builder, printEveryNumEpochs:number) {
  builder.addFieldInt32(4, printEveryNumEpochs, 0);
}

static addInitialAdjustRate(builder:flatbuffers.Builder, initialAdjustRate:number) {
  builder.addFieldFloat32(5, initialAdjustRate, 0);
}

static addAdjustRateDecay(builder:flatbuffers.Builder, adjustRateDecay:number) {
  builder.addFieldFloat32(6, adjustRateDecay, 0);
}

static addSlideErrorFactor(builder:flatbuffers.Builder, slideErrorFactor:number) {
  builder.addFieldFloat32(7, slideErrorFactor, 0);
}

static addOffsetSlideErrorFactor(builder:flatbuffers.Builder, offsetSlideErrorFactor:number) {
  builder.addFieldFloat32(8, offsetSlideErrorFactor, 0);
}

static addFootHeightOffsetErrorFactor(builder:flatbuffers.Builder, footHeightOffsetErrorFactor:number) {
  builder.addFieldFloat32(9, footHeightOffsetErrorFactor, 0);
}

static addBodyProportionErrorFactor(builder:flatbuffers.Builder, bodyProportionErrorFactor:number) {
  builder.addFieldFloat32(10, bodyProportionErrorFactor, 0);
}

static addHeightErrorFactor(builder:flatbuffers.Builder, heightErrorFactor:number) {
  builder.addFieldFloat32(11, heightErrorFactor, 0);
}

static addPositionErrorFactor(builder:flatbuffers.Builder, positionErrorFactor:number) {
  builder.addFieldFloat32(12, positionErrorFactor, 0);
}

static addPositionOffsetErrorFactor(builder:flatbuffers.Builder, positionOffsetErrorFactor:number) {
  builder.addFieldFloat32(13, positionOffsetErrorFactor, 0);
}

static addCalcInitError(builder:flatbuffers.Builder, calcInitError:boolean) {
  builder.addFieldInt8(14, +calcInitError, 0);
}

static addTargetHmdHeight(builder:flatbuffers.Builder, targetHmdHeight:number) {
  builder.addFieldFloat32(15, targetHmdHeight, 0);
}

static addTargetFullHeight(builder:flatbuffers.Builder, targetFullHeight:number) {
  builder.addFieldFloat32(16, targetFullHeight, 0);
}

static addRandomizeFrameOrder(builder:flatbuffers.Builder, randomizeFrameOrder:boolean) {
  builder.addFieldInt8(17, +randomizeFrameOrder, 0);
}

static addScaleEachStep(builder:flatbuffers.Builder, scaleEachStep:boolean) {
  builder.addFieldInt8(18, +scaleEachStep, 0);
}

static addSampleCount(builder:flatbuffers.Builder, sampleCount:number) {
  builder.addFieldInt32(19, sampleCount, 0);
}

static addSampleRateMs(builder:flatbuffers.Builder, sampleRateMs:bigint) {
  builder.addFieldInt64(20, sampleRateMs, BigInt(0));
}

static addSaveRecordings(builder:flatbuffers.Builder, saveRecordings:boolean) {
  builder.addFieldInt8(21, +saveRecordings, 0);
}

static addUseSkeletonHeight(builder:flatbuffers.Builder, useSkeletonHeight:boolean) {
  builder.addFieldInt8(22, +useSkeletonHeight, 0);
}

static addRandSeed(builder:flatbuffers.Builder, randSeed:bigint) {
  builder.addFieldInt64(23, randSeed, BigInt(0));
}

static endAutoBoneSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAutoBoneSettings(builder:flatbuffers.Builder, cursorIncrement:number|null, minDataDistance:number|null, maxDataDistance:number|null, numEpochs:number|null, printEveryNumEpochs:number|null, initialAdjustRate:number|null, adjustRateDecay:number|null, slideErrorFactor:number|null, offsetSlideErrorFactor:number|null, footHeightOffsetErrorFactor:number|null, bodyProportionErrorFactor:number|null, heightErrorFactor:number|null, positionErrorFactor:number|null, positionOffsetErrorFactor:number|null, calcInitError:boolean|null, targetHmdHeight:number|null, targetFullHeight:number|null, randomizeFrameOrder:boolean|null, scaleEachStep:boolean|null, sampleCount:number|null, sampleRateMs:bigint|null, saveRecordings:boolean|null, useSkeletonHeight:boolean|null, randSeed:bigint|null):flatbuffers.Offset {
  AutoBoneSettings.startAutoBoneSettings(builder);
  if (cursorIncrement !== null)
    AutoBoneSettings.addCursorIncrement(builder, cursorIncrement);
  if (minDataDistance !== null)
    AutoBoneSettings.addMinDataDistance(builder, minDataDistance);
  if (maxDataDistance !== null)
    AutoBoneSettings.addMaxDataDistance(builder, maxDataDistance);
  if (numEpochs !== null)
    AutoBoneSettings.addNumEpochs(builder, numEpochs);
  if (printEveryNumEpochs !== null)
    AutoBoneSettings.addPrintEveryNumEpochs(builder, printEveryNumEpochs);
  if (initialAdjustRate !== null)
    AutoBoneSettings.addInitialAdjustRate(builder, initialAdjustRate);
  if (adjustRateDecay !== null)
    AutoBoneSettings.addAdjustRateDecay(builder, adjustRateDecay);
  if (slideErrorFactor !== null)
    AutoBoneSettings.addSlideErrorFactor(builder, slideErrorFactor);
  if (offsetSlideErrorFactor !== null)
    AutoBoneSettings.addOffsetSlideErrorFactor(builder, offsetSlideErrorFactor);
  if (footHeightOffsetErrorFactor !== null)
    AutoBoneSettings.addFootHeightOffsetErrorFactor(builder, footHeightOffsetErrorFactor);
  if (bodyProportionErrorFactor !== null)
    AutoBoneSettings.addBodyProportionErrorFactor(builder, bodyProportionErrorFactor);
  if (heightErrorFactor !== null)
    AutoBoneSettings.addHeightErrorFactor(builder, heightErrorFactor);
  if (positionErrorFactor !== null)
    AutoBoneSettings.addPositionErrorFactor(builder, positionErrorFactor);
  if (positionOffsetErrorFactor !== null)
    AutoBoneSettings.addPositionOffsetErrorFactor(builder, positionOffsetErrorFactor);
  if (calcInitError !== null)
    AutoBoneSettings.addCalcInitError(builder, calcInitError);
  if (targetHmdHeight !== null)
    AutoBoneSettings.addTargetHmdHeight(builder, targetHmdHeight);
  if (targetFullHeight !== null)
    AutoBoneSettings.addTargetFullHeight(builder, targetFullHeight);
  if (randomizeFrameOrder !== null)
    AutoBoneSettings.addRandomizeFrameOrder(builder, randomizeFrameOrder);
  if (scaleEachStep !== null)
    AutoBoneSettings.addScaleEachStep(builder, scaleEachStep);
  if (sampleCount !== null)
    AutoBoneSettings.addSampleCount(builder, sampleCount);
  if (sampleRateMs !== null)
    AutoBoneSettings.addSampleRateMs(builder, sampleRateMs);
  if (saveRecordings !== null)
    AutoBoneSettings.addSaveRecordings(builder, saveRecordings);
  if (useSkeletonHeight !== null)
    AutoBoneSettings.addUseSkeletonHeight(builder, useSkeletonHeight);
  if (randSeed !== null)
    AutoBoneSettings.addRandSeed(builder, randSeed);
  return AutoBoneSettings.endAutoBoneSettings(builder);
}

unpack(): AutoBoneSettingsT {
  return new AutoBoneSettingsT(
    this.cursorIncrement(),
    this.minDataDistance(),
    this.maxDataDistance(),
    this.numEpochs(),
    this.printEveryNumEpochs(),
    this.initialAdjustRate(),
    this.adjustRateDecay(),
    this.slideErrorFactor(),
    this.offsetSlideErrorFactor(),
    this.footHeightOffsetErrorFactor(),
    this.bodyProportionErrorFactor(),
    this.heightErrorFactor(),
    this.positionErrorFactor(),
    this.positionOffsetErrorFactor(),
    this.calcInitError(),
    this.targetHmdHeight(),
    this.targetFullHeight(),
    this.randomizeFrameOrder(),
    this.scaleEachStep(),
    this.sampleCount(),
    this.sampleRateMs(),
    this.saveRecordings(),
    this.useSkeletonHeight(),
    this.randSeed()
  );
}


unpackTo(_o: AutoBoneSettingsT): void {
  _o.cursorIncrement = this.cursorIncrement();
  _o.minDataDistance = this.minDataDistance();
  _o.maxDataDistance = this.maxDataDistance();
  _o.numEpochs = this.numEpochs();
  _o.printEveryNumEpochs = this.printEveryNumEpochs();
  _o.initialAdjustRate = this.initialAdjustRate();
  _o.adjustRateDecay = this.adjustRateDecay();
  _o.slideErrorFactor = this.slideErrorFactor();
  _o.offsetSlideErrorFactor = this.offsetSlideErrorFactor();
  _o.footHeightOffsetErrorFactor = this.footHeightOffsetErrorFactor();
  _o.bodyProportionErrorFactor = this.bodyProportionErrorFactor();
  _o.heightErrorFactor = this.heightErrorFactor();
  _o.positionErrorFactor = this.positionErrorFactor();
  _o.positionOffsetErrorFactor = this.positionOffsetErrorFactor();
  _o.calcInitError = this.calcInitError();
  _o.targetHmdHeight = this.targetHmdHeight();
  _o.targetFullHeight = this.targetFullHeight();
  _o.randomizeFrameOrder = this.randomizeFrameOrder();
  _o.scaleEachStep = this.scaleEachStep();
  _o.sampleCount = this.sampleCount();
  _o.sampleRateMs = this.sampleRateMs();
  _o.saveRecordings = this.saveRecordings();
  _o.useSkeletonHeight = this.useSkeletonHeight();
  _o.randSeed = this.randSeed();
}
}

export class AutoBoneSettingsT implements flatbuffers.IGeneratedObject {
constructor(
  public cursorIncrement: number|null = null,
  public minDataDistance: number|null = null,
  public maxDataDistance: number|null = null,
  public numEpochs: number|null = null,
  public printEveryNumEpochs: number|null = null,
  public initialAdjustRate: number|null = null,
  public adjustRateDecay: number|null = null,
  public slideErrorFactor: number|null = null,
  public offsetSlideErrorFactor: number|null = null,
  public footHeightOffsetErrorFactor: number|null = null,
  public bodyProportionErrorFactor: number|null = null,
  public heightErrorFactor: number|null = null,
  public positionErrorFactor: number|null = null,
  public positionOffsetErrorFactor: number|null = null,
  public calcInitError: boolean|null = null,
  public targetHmdHeight: number|null = null,
  public targetFullHeight: number|null = null,
  public randomizeFrameOrder: boolean|null = null,
  public scaleEachStep: boolean|null = null,
  public sampleCount: number|null = null,
  public sampleRateMs: bigint|null = null,
  public saveRecordings: boolean|null = null,
  public useSkeletonHeight: boolean|null = null,
  public randSeed: bigint|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return AutoBoneSettings.createAutoBoneSettings(builder,
    this.cursorIncrement,
    this.minDataDistance,
    this.maxDataDistance,
    this.numEpochs,
    this.printEveryNumEpochs,
    this.initialAdjustRate,
    this.adjustRateDecay,
    this.slideErrorFactor,
    this.offsetSlideErrorFactor,
    this.footHeightOffsetErrorFactor,
    this.bodyProportionErrorFactor,
    this.heightErrorFactor,
    this.positionErrorFactor,
    this.positionOffsetErrorFactor,
    this.calcInitError,
    this.targetHmdHeight,
    this.targetFullHeight,
    this.randomizeFrameOrder,
    this.scaleEachStep,
    this.sampleCount,
    this.sampleRateMs,
    this.saveRecordings,
    this.useSkeletonHeight,
    this.randSeed
  );
}
}
