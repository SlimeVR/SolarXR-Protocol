// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FkToggle } from '../../solarxr-protocol/rpc/fk-toggle';


export class FkSkeletonToggle {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FkSkeletonToggle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFkSkeletonToggle(bb:flatbuffers.ByteBuffer, obj?:FkSkeletonToggle):FkSkeletonToggle {
  return (obj || new FkSkeletonToggle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFkSkeletonToggle(bb:flatbuffers.ByteBuffer, obj?:FkSkeletonToggle):FkSkeletonToggle {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FkSkeletonToggle()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

skeletonToggle():FkToggle {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FkToggle.NONE;
}

value():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startFkSkeletonToggle(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSkeletonToggle(builder:flatbuffers.Builder, skeletonToggle:FkToggle) {
  builder.addFieldInt8(0, skeletonToggle, FkToggle.NONE);
}

static addValue(builder:flatbuffers.Builder, value:boolean) {
  builder.addFieldInt8(1, +value, +false);
}

static endFkSkeletonToggle(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFkSkeletonToggle(builder:flatbuffers.Builder, skeletonToggle:FkToggle, value:boolean):flatbuffers.Offset {
  FkSkeletonToggle.startFkSkeletonToggle(builder);
  FkSkeletonToggle.addSkeletonToggle(builder, skeletonToggle);
  FkSkeletonToggle.addValue(builder, value);
  return FkSkeletonToggle.endFkSkeletonToggle(builder);
}

unpack(): FkSkeletonToggleT {
  return new FkSkeletonToggleT(
    this.skeletonToggle(),
    this.value()
  );
}


unpackTo(_o: FkSkeletonToggleT): void {
  _o.skeletonToggle = this.skeletonToggle();
  _o.value = this.value();
}
}

export class FkSkeletonToggleT {
constructor(
  public skeletonToggle: FkToggle = FkToggle.NONE,
  public value: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return FkSkeletonToggle.createFkSkeletonToggle(builder,
    this.skeletonToggle,
    this.value
  );
}
}
