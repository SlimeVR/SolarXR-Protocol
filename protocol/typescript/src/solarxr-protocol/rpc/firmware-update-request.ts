// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FirmwareUpdateMethod, unionToFirmwareUpdateMethod, unionListToFirmwareUpdateMethod } from '../../solarxr-protocol/rpc/firmware-update-method.js';
import { OTAFirmwareUpdate, OTAFirmwareUpdateT } from '../../solarxr-protocol/rpc/otafirmware-update.js';
import { SerialFirmwareUpdate, SerialFirmwareUpdateT } from '../../solarxr-protocol/rpc/serial-firmware-update.js';


export class FirmwareUpdateRequest implements flatbuffers.IUnpackableObject<FirmwareUpdateRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FirmwareUpdateRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFirmwareUpdateRequest(bb:flatbuffers.ByteBuffer, obj?:FirmwareUpdateRequest):FirmwareUpdateRequest {
  return (obj || new FirmwareUpdateRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFirmwareUpdateRequest(bb:flatbuffers.ByteBuffer, obj?:FirmwareUpdateRequest):FirmwareUpdateRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FirmwareUpdateRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

methodType():FirmwareUpdateMethod {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FirmwareUpdateMethod.NONE;
}

method<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startFirmwareUpdateRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMethodType(builder:flatbuffers.Builder, methodType:FirmwareUpdateMethod) {
  builder.addFieldInt8(0, methodType, FirmwareUpdateMethod.NONE);
}

static addMethod(builder:flatbuffers.Builder, methodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, methodOffset, 0);
}

static endFirmwareUpdateRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFirmwareUpdateRequest(builder:flatbuffers.Builder, methodType:FirmwareUpdateMethod, methodOffset:flatbuffers.Offset):flatbuffers.Offset {
  FirmwareUpdateRequest.startFirmwareUpdateRequest(builder);
  FirmwareUpdateRequest.addMethodType(builder, methodType);
  FirmwareUpdateRequest.addMethod(builder, methodOffset);
  return FirmwareUpdateRequest.endFirmwareUpdateRequest(builder);
}

unpack(): FirmwareUpdateRequestT {
  return new FirmwareUpdateRequestT(
    this.methodType(),
    (() => {
      const temp = unionToFirmwareUpdateMethod(this.methodType(), this.method.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: FirmwareUpdateRequestT): void {
  _o.methodType = this.methodType();
  _o.method = (() => {
      const temp = unionToFirmwareUpdateMethod(this.methodType(), this.method.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class FirmwareUpdateRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public methodType: FirmwareUpdateMethod = FirmwareUpdateMethod.NONE,
  public method: OTAFirmwareUpdateT|SerialFirmwareUpdateT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const method = builder.createObjectOffset(this.method);

  return FirmwareUpdateRequest.createFirmwareUpdateRequest(builder,
    this.methodType,
    method
  );
}
}
