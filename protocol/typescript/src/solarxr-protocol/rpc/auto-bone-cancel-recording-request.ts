// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Cancels the current recording, aborting the process and discarding the data
 */
export class AutoBoneCancelRecordingRequest implements flatbuffers.IUnpackableObject<AutoBoneCancelRecordingRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AutoBoneCancelRecordingRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAutoBoneCancelRecordingRequest(bb:flatbuffers.ByteBuffer, obj?:AutoBoneCancelRecordingRequest):AutoBoneCancelRecordingRequest {
  return (obj || new AutoBoneCancelRecordingRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAutoBoneCancelRecordingRequest(bb:flatbuffers.ByteBuffer, obj?:AutoBoneCancelRecordingRequest):AutoBoneCancelRecordingRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AutoBoneCancelRecordingRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startAutoBoneCancelRecordingRequest(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endAutoBoneCancelRecordingRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAutoBoneCancelRecordingRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  AutoBoneCancelRecordingRequest.startAutoBoneCancelRecordingRequest(builder);
  return AutoBoneCancelRecordingRequest.endAutoBoneCancelRecordingRequest(builder);
}

unpack(): AutoBoneCancelRecordingRequestT {
  return new AutoBoneCancelRecordingRequestT();
}


unpackTo(_o: AutoBoneCancelRecordingRequestT): void {}
}

export class AutoBoneCancelRecordingRequestT implements flatbuffers.IGeneratedObject {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return AutoBoneCancelRecordingRequest.createAutoBoneCancelRecordingRequest(builder);
}
}
