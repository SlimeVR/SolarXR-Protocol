// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Settings related to IMU yaw drift compensation
 */
export class DriftCompensationSettings implements flatbuffers.IUnpackableObject<DriftCompensationSettingsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DriftCompensationSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDriftCompensationSettings(bb:flatbuffers.ByteBuffer, obj?:DriftCompensationSettings):DriftCompensationSettings {
  return (obj || new DriftCompensationSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDriftCompensationSettings(bb:flatbuffers.ByteBuffer, obj?:DriftCompensationSettings):DriftCompensationSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DriftCompensationSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

enabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

prediction():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * 0 to 1. A higher value results in more yaw drift compensation
 */
amount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Number of previous resets to take into account when calculating yaw drift
 */
maxResets():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startDriftCompensationSettings(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addEnabled(builder:flatbuffers.Builder, enabled:boolean) {
  builder.addFieldInt8(0, +enabled, +false);
}

static addPrediction(builder:flatbuffers.Builder, prediction:boolean) {
  builder.addFieldInt8(1, +prediction, +false);
}

static addAmount(builder:flatbuffers.Builder, amount:number) {
  builder.addFieldFloat32(2, amount, 0.0);
}

static addMaxResets(builder:flatbuffers.Builder, maxResets:number) {
  builder.addFieldInt16(3, maxResets, 0);
}

static endDriftCompensationSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDriftCompensationSettings(builder:flatbuffers.Builder, enabled:boolean, prediction:boolean, amount:number, maxResets:number):flatbuffers.Offset {
  DriftCompensationSettings.startDriftCompensationSettings(builder);
  DriftCompensationSettings.addEnabled(builder, enabled);
  DriftCompensationSettings.addPrediction(builder, prediction);
  DriftCompensationSettings.addAmount(builder, amount);
  DriftCompensationSettings.addMaxResets(builder, maxResets);
  return DriftCompensationSettings.endDriftCompensationSettings(builder);
}

unpack(): DriftCompensationSettingsT {
  return new DriftCompensationSettingsT(
    this.enabled(),
    this.prediction(),
    this.amount(),
    this.maxResets()
  );
}


unpackTo(_o: DriftCompensationSettingsT): void {
  _o.enabled = this.enabled();
  _o.prediction = this.prediction();
  _o.amount = this.amount();
  _o.maxResets = this.maxResets();
}
}

export class DriftCompensationSettingsT implements flatbuffers.IGeneratedObject {
constructor(
  public enabled: boolean = false,
  public prediction: boolean = false,
  public amount: number = 0.0,
  public maxResets: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return DriftCompensationSettings.createDriftCompensationSettings(builder,
    this.enabled,
    this.prediction,
    this.amount,
    this.maxResets
  );
}
}
