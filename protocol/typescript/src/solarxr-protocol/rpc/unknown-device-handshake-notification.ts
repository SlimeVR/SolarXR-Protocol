// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Server notifies connection of an unknown device.
 * If the notification is no longer sent, it means the device connected to another
 * server, got connected to this server or it was turned off.
 */
export class UnknownDeviceHandshakeNotification implements flatbuffers.IUnpackableObject<UnknownDeviceHandshakeNotificationT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UnknownDeviceHandshakeNotification {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUnknownDeviceHandshakeNotification(bb:flatbuffers.ByteBuffer, obj?:UnknownDeviceHandshakeNotification):UnknownDeviceHandshakeNotification {
  return (obj || new UnknownDeviceHandshakeNotification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUnknownDeviceHandshakeNotification(bb:flatbuffers.ByteBuffer, obj?:UnknownDeviceHandshakeNotification):UnknownDeviceHandshakeNotification {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UnknownDeviceHandshakeNotification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

macAddress():string|null
macAddress(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
macAddress(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startUnknownDeviceHandshakeNotification(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMacAddress(builder:flatbuffers.Builder, macAddressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, macAddressOffset, 0);
}

static endUnknownDeviceHandshakeNotification(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUnknownDeviceHandshakeNotification(builder:flatbuffers.Builder, macAddressOffset:flatbuffers.Offset):flatbuffers.Offset {
  UnknownDeviceHandshakeNotification.startUnknownDeviceHandshakeNotification(builder);
  UnknownDeviceHandshakeNotification.addMacAddress(builder, macAddressOffset);
  return UnknownDeviceHandshakeNotification.endUnknownDeviceHandshakeNotification(builder);
}

unpack(): UnknownDeviceHandshakeNotificationT {
  return new UnknownDeviceHandshakeNotificationT(
    this.macAddress()
  );
}


unpackTo(_o: UnknownDeviceHandshakeNotificationT): void {
  _o.macAddress = this.macAddress();
}
}

export class UnknownDeviceHandshakeNotificationT implements flatbuffers.IGeneratedObject {
constructor(
  public macAddress: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const macAddress = (this.macAddress !== null ? builder.createString(this.macAddress!) : 0);

  return UnknownDeviceHandshakeNotification.createUnknownDeviceHandshakeNotification(builder,
    macAddress
  );
}
}
