// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DeviceIdTable, DeviceIdTableT } from '../../solarxr-protocol/datatypes/device-id-table.js';
import { FirmwareUpdateDeviceId, unionToFirmwareUpdateDeviceId, unionListToFirmwareUpdateDeviceId } from '../../solarxr-protocol/rpc/firmware-update-device-id.js';
import { FirmwareUpdateStatus } from '../../solarxr-protocol/rpc/firmware-update-status.js';
import { SerialDevicePort, SerialDevicePortT } from '../../solarxr-protocol/rpc/serial-device-port.js';


export class FirmwareUpdateStatusResponse implements flatbuffers.IUnpackableObject<FirmwareUpdateStatusResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FirmwareUpdateStatusResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFirmwareUpdateStatusResponse(bb:flatbuffers.ByteBuffer, obj?:FirmwareUpdateStatusResponse):FirmwareUpdateStatusResponse {
  return (obj || new FirmwareUpdateStatusResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFirmwareUpdateStatusResponse(bb:flatbuffers.ByteBuffer, obj?:FirmwareUpdateStatusResponse):FirmwareUpdateStatusResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FirmwareUpdateStatusResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

deviceIdType():FirmwareUpdateDeviceId {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FirmwareUpdateDeviceId.NONE;
}

deviceId<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

status():FirmwareUpdateStatus {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FirmwareUpdateStatus.DOWNLOADING;
}

/**
 * from 0 to 100
 */
progress():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

static startFirmwareUpdateStatusResponse(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addDeviceIdType(builder:flatbuffers.Builder, deviceIdType:FirmwareUpdateDeviceId) {
  builder.addFieldInt8(0, deviceIdType, FirmwareUpdateDeviceId.NONE);
}

static addDeviceId(builder:flatbuffers.Builder, deviceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, deviceIdOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, status:FirmwareUpdateStatus) {
  builder.addFieldInt8(2, status, FirmwareUpdateStatus.DOWNLOADING);
}

static addProgress(builder:flatbuffers.Builder, progress:number) {
  builder.addFieldInt8(3, progress, 0);
}

static endFirmwareUpdateStatusResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFirmwareUpdateStatusResponse(builder:flatbuffers.Builder, deviceIdType:FirmwareUpdateDeviceId, deviceIdOffset:flatbuffers.Offset, status:FirmwareUpdateStatus, progress:number):flatbuffers.Offset {
  FirmwareUpdateStatusResponse.startFirmwareUpdateStatusResponse(builder);
  FirmwareUpdateStatusResponse.addDeviceIdType(builder, deviceIdType);
  FirmwareUpdateStatusResponse.addDeviceId(builder, deviceIdOffset);
  FirmwareUpdateStatusResponse.addStatus(builder, status);
  FirmwareUpdateStatusResponse.addProgress(builder, progress);
  return FirmwareUpdateStatusResponse.endFirmwareUpdateStatusResponse(builder);
}

unpack(): FirmwareUpdateStatusResponseT {
  return new FirmwareUpdateStatusResponseT(
    this.deviceIdType(),
    (() => {
      const temp = unionToFirmwareUpdateDeviceId(this.deviceIdType(), this.deviceId.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    this.status(),
    this.progress()
  );
}


unpackTo(_o: FirmwareUpdateStatusResponseT): void {
  _o.deviceIdType = this.deviceIdType();
  _o.deviceId = (() => {
      const temp = unionToFirmwareUpdateDeviceId(this.deviceIdType(), this.deviceId.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.status = this.status();
  _o.progress = this.progress();
}
}

export class FirmwareUpdateStatusResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public deviceIdType: FirmwareUpdateDeviceId = FirmwareUpdateDeviceId.NONE,
  public deviceId: DeviceIdTableT|SerialDevicePortT|null = null,
  public status: FirmwareUpdateStatus = FirmwareUpdateStatus.DOWNLOADING,
  public progress: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const deviceId = builder.createObjectOffset(this.deviceId);

  return FirmwareUpdateStatusResponse.createFirmwareUpdateStatusResponse(builder,
    this.deviceIdType,
    deviceId,
    this.status,
    this.progress
  );
}
}
