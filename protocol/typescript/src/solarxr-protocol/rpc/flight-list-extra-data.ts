// automatically generated by the FlatBuffers compiler, do not modify

import { FlightListNeedCalibration, FlightListNeedCalibrationT } from '../../solarxr-protocol/rpc/flight-list-need-calibration.js';
import { FlightListPublicNetworks, FlightListPublicNetworksT } from '../../solarxr-protocol/rpc/flight-list-public-networks.js';
import { FlightListSteamVRDisconnected, FlightListSteamVRDisconnectedT } from '../../solarxr-protocol/rpc/flight-list-steam-vrdisconnected.js';
import { FlightListTrackerError, FlightListTrackerErrorT } from '../../solarxr-protocol/rpc/flight-list-tracker-error.js';
import { FlightListTrackerReset, FlightListTrackerResetT } from '../../solarxr-protocol/rpc/flight-list-tracker-reset.js';
import { FlightListUnassignedHMD, FlightListUnassignedHMDT } from '../../solarxr-protocol/rpc/flight-list-unassigned-hmd.js';


export enum FlightListExtraData {
  NONE = 0,
  FlightListTrackerReset = 1,
  FlightListTrackerError = 2,
  FlightListSteamVRDisconnected = 3,
  FlightListUnassignedHMD = 4,
  FlightListNeedCalibration = 5,
  FlightListPublicNetworks = 6
}

export function unionToFlightListExtraData(
  type: FlightListExtraData,
  accessor: (obj:FlightListNeedCalibration|FlightListPublicNetworks|FlightListSteamVRDisconnected|FlightListTrackerError|FlightListTrackerReset|FlightListUnassignedHMD) => FlightListNeedCalibration|FlightListPublicNetworks|FlightListSteamVRDisconnected|FlightListTrackerError|FlightListTrackerReset|FlightListUnassignedHMD|null
): FlightListNeedCalibration|FlightListPublicNetworks|FlightListSteamVRDisconnected|FlightListTrackerError|FlightListTrackerReset|FlightListUnassignedHMD|null {
  switch(FlightListExtraData[type]) {
    case 'NONE': return null; 
    case 'FlightListTrackerReset': return accessor(new FlightListTrackerReset())! as FlightListTrackerReset;
    case 'FlightListTrackerError': return accessor(new FlightListTrackerError())! as FlightListTrackerError;
    case 'FlightListSteamVRDisconnected': return accessor(new FlightListSteamVRDisconnected())! as FlightListSteamVRDisconnected;
    case 'FlightListUnassignedHMD': return accessor(new FlightListUnassignedHMD())! as FlightListUnassignedHMD;
    case 'FlightListNeedCalibration': return accessor(new FlightListNeedCalibration())! as FlightListNeedCalibration;
    case 'FlightListPublicNetworks': return accessor(new FlightListPublicNetworks())! as FlightListPublicNetworks;
    default: return null;
  }
}

export function unionListToFlightListExtraData(
  type: FlightListExtraData, 
  accessor: (index: number, obj:FlightListNeedCalibration|FlightListPublicNetworks|FlightListSteamVRDisconnected|FlightListTrackerError|FlightListTrackerReset|FlightListUnassignedHMD) => FlightListNeedCalibration|FlightListPublicNetworks|FlightListSteamVRDisconnected|FlightListTrackerError|FlightListTrackerReset|FlightListUnassignedHMD|null, 
  index: number
): FlightListNeedCalibration|FlightListPublicNetworks|FlightListSteamVRDisconnected|FlightListTrackerError|FlightListTrackerReset|FlightListUnassignedHMD|null {
  switch(FlightListExtraData[type]) {
    case 'NONE': return null; 
    case 'FlightListTrackerReset': return accessor(index, new FlightListTrackerReset())! as FlightListTrackerReset;
    case 'FlightListTrackerError': return accessor(index, new FlightListTrackerError())! as FlightListTrackerError;
    case 'FlightListSteamVRDisconnected': return accessor(index, new FlightListSteamVRDisconnected())! as FlightListSteamVRDisconnected;
    case 'FlightListUnassignedHMD': return accessor(index, new FlightListUnassignedHMD())! as FlightListUnassignedHMD;
    case 'FlightListNeedCalibration': return accessor(index, new FlightListNeedCalibration())! as FlightListNeedCalibration;
    case 'FlightListPublicNetworks': return accessor(index, new FlightListPublicNetworks())! as FlightListPublicNetworks;
    default: return null;
  }
}
