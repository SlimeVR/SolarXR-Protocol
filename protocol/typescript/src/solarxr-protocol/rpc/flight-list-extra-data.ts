// automatically generated by the FlatBuffers compiler, do not modify

import { FlightListNeedCalibration, FlightListNeedCalibrationT } from '../../solarxr-protocol/rpc/flight-list-need-calibration.js';
import { StatusSteamVRDisconnected, StatusSteamVRDisconnectedT } from '../../solarxr-protocol/rpc/status-steam-vrdisconnected.js';
import { StatusTrackerError, StatusTrackerErrorT } from '../../solarxr-protocol/rpc/status-tracker-error.js';
import { StatusTrackerReset, StatusTrackerResetT } from '../../solarxr-protocol/rpc/status-tracker-reset.js';
import { StatusUnassignedHMD, StatusUnassignedHMDT } from '../../solarxr-protocol/rpc/status-unassigned-hmd.js';


export enum FlightListExtraData {
  NONE = 0,
  StatusTrackerReset = 1,
  StatusTrackerError = 2,
  StatusSteamVRDisconnected = 3,
  StatusUnassignedHMD = 4,
  FlightListNeedCalibration = 5
}

export function unionToFlightListExtraData(
  type: FlightListExtraData,
  accessor: (obj:FlightListNeedCalibration|StatusSteamVRDisconnected|StatusTrackerError|StatusTrackerReset|StatusUnassignedHMD) => FlightListNeedCalibration|StatusSteamVRDisconnected|StatusTrackerError|StatusTrackerReset|StatusUnassignedHMD|null
): FlightListNeedCalibration|StatusSteamVRDisconnected|StatusTrackerError|StatusTrackerReset|StatusUnassignedHMD|null {
  switch(FlightListExtraData[type]) {
    case 'NONE': return null; 
    case 'StatusTrackerReset': return accessor(new StatusTrackerReset())! as StatusTrackerReset;
    case 'StatusTrackerError': return accessor(new StatusTrackerError())! as StatusTrackerError;
    case 'StatusSteamVRDisconnected': return accessor(new StatusSteamVRDisconnected())! as StatusSteamVRDisconnected;
    case 'StatusUnassignedHMD': return accessor(new StatusUnassignedHMD())! as StatusUnassignedHMD;
    case 'FlightListNeedCalibration': return accessor(new FlightListNeedCalibration())! as FlightListNeedCalibration;
    default: return null;
  }
}

export function unionListToFlightListExtraData(
  type: FlightListExtraData, 
  accessor: (index: number, obj:FlightListNeedCalibration|StatusSteamVRDisconnected|StatusTrackerError|StatusTrackerReset|StatusUnassignedHMD) => FlightListNeedCalibration|StatusSteamVRDisconnected|StatusTrackerError|StatusTrackerReset|StatusUnassignedHMD|null, 
  index: number
): FlightListNeedCalibration|StatusSteamVRDisconnected|StatusTrackerError|StatusTrackerReset|StatusUnassignedHMD|null {
  switch(FlightListExtraData[type]) {
    case 'NONE': return null; 
    case 'StatusTrackerReset': return accessor(index, new StatusTrackerReset())! as StatusTrackerReset;
    case 'StatusTrackerError': return accessor(index, new StatusTrackerError())! as StatusTrackerError;
    case 'StatusSteamVRDisconnected': return accessor(index, new StatusSteamVRDisconnected())! as StatusSteamVRDisconnected;
    case 'StatusUnassignedHMD': return accessor(index, new StatusUnassignedHMD())! as StatusUnassignedHMD;
    case 'FlightListNeedCalibration': return accessor(index, new FlightListNeedCalibration())! as FlightListNeedCalibration;
    default: return null;
  }
}
