// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SkeletonBone } from '../../solarxr-protocol/rpc/skeleton-bone.js';


export class SkeletonPart implements flatbuffers.IUnpackableObject<SkeletonPartT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SkeletonPart {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSkeletonPart(bb:flatbuffers.ByteBuffer, obj?:SkeletonPart):SkeletonPart {
  return (obj || new SkeletonPart()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSkeletonPart(bb:flatbuffers.ByteBuffer, obj?:SkeletonPart):SkeletonPart {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SkeletonPart()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bone():SkeletonBone {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : SkeletonBone.NONE;
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startSkeletonPart(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBone(builder:flatbuffers.Builder, bone:SkeletonBone) {
  builder.addFieldInt8(0, bone, SkeletonBone.NONE);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldFloat32(1, value, 0.0);
}

static endSkeletonPart(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSkeletonPart(builder:flatbuffers.Builder, bone:SkeletonBone, value:number):flatbuffers.Offset {
  SkeletonPart.startSkeletonPart(builder);
  SkeletonPart.addBone(builder, bone);
  SkeletonPart.addValue(builder, value);
  return SkeletonPart.endSkeletonPart(builder);
}

unpack(): SkeletonPartT {
  return new SkeletonPartT(
    this.bone(),
    this.value()
  );
}


unpackTo(_o: SkeletonPartT): void {
  _o.bone = this.bone();
  _o.value = this.value();
}
}

export class SkeletonPartT implements flatbuffers.IGeneratedObject {
constructor(
  public bone: SkeletonBone = SkeletonBone.NONE,
  public value: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return SkeletonPart.createSkeletonPart(builder,
    this.bone,
    this.value
  );
}
}
