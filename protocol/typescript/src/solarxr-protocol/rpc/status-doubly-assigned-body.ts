// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TrackerId, TrackerIdT } from '../../solarxr-protocol/datatypes/tracker-id.js';


/**
 * Multiple trackers are assigned to the same body part
 */
export class StatusDoublyAssignedBody implements flatbuffers.IUnpackableObject<StatusDoublyAssignedBodyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StatusDoublyAssignedBody {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStatusDoublyAssignedBody(bb:flatbuffers.ByteBuffer, obj?:StatusDoublyAssignedBody):StatusDoublyAssignedBody {
  return (obj || new StatusDoublyAssignedBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStatusDoublyAssignedBody(bb:flatbuffers.ByteBuffer, obj?:StatusDoublyAssignedBody):StatusDoublyAssignedBody {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StatusDoublyAssignedBody()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

trackerIds(index: number, obj?:TrackerId):TrackerId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TrackerId()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

trackerIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startStatusDoublyAssignedBody(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addTrackerIds(builder:flatbuffers.Builder, trackerIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, trackerIdsOffset, 0);
}

static createTrackerIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrackerIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endStatusDoublyAssignedBody(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStatusDoublyAssignedBody(builder:flatbuffers.Builder, trackerIdsOffset:flatbuffers.Offset):flatbuffers.Offset {
  StatusDoublyAssignedBody.startStatusDoublyAssignedBody(builder);
  StatusDoublyAssignedBody.addTrackerIds(builder, trackerIdsOffset);
  return StatusDoublyAssignedBody.endStatusDoublyAssignedBody(builder);
}

unpack(): StatusDoublyAssignedBodyT {
  return new StatusDoublyAssignedBodyT(
    this.bb!.createObjList<TrackerId, TrackerIdT>(this.trackerIds.bind(this), this.trackerIdsLength())
  );
}


unpackTo(_o: StatusDoublyAssignedBodyT): void {
  _o.trackerIds = this.bb!.createObjList<TrackerId, TrackerIdT>(this.trackerIds.bind(this), this.trackerIdsLength());
}
}

export class StatusDoublyAssignedBodyT implements flatbuffers.IGeneratedObject {
constructor(
  public trackerIds: (TrackerIdT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const trackerIds = StatusDoublyAssignedBody.createTrackerIdsVector(builder, builder.createObjectOffsetList(this.trackerIds));

  return StatusDoublyAssignedBody.createStatusDoublyAssignedBody(builder,
    trackerIds
  );
}
}
