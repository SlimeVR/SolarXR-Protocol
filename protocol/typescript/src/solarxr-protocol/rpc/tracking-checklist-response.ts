// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TrackingChecklistStep, TrackingChecklistStepT } from '../../solarxr-protocol/rpc/tracking-checklist-step.js';
import { TrackingChecklistStepId } from '../../solarxr-protocol/rpc/tracking-checklist-step-id.js';


export class TrackingChecklistResponse implements flatbuffers.IUnpackableObject<TrackingChecklistResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrackingChecklistResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrackingChecklistResponse(bb:flatbuffers.ByteBuffer, obj?:TrackingChecklistResponse):TrackingChecklistResponse {
  return (obj || new TrackingChecklistResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrackingChecklistResponse(bb:flatbuffers.ByteBuffer, obj?:TrackingChecklistResponse):TrackingChecklistResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrackingChecklistResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

steps(index: number, obj?:TrackingChecklistStep):TrackingChecklistStep|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TrackingChecklistStep()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

stepsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ignoredSteps(index: number):TrackingChecklistStepId|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

ignoredStepsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ignoredStepsArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startTrackingChecklistResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSteps(builder:flatbuffers.Builder, stepsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stepsOffset, 0);
}

static createStepsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStepsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIgnoredSteps(builder:flatbuffers.Builder, ignoredStepsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ignoredStepsOffset, 0);
}

static createIgnoredStepsVector(builder:flatbuffers.Builder, data:TrackingChecklistStepId[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startIgnoredStepsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endTrackingChecklistResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTrackingChecklistResponse(builder:flatbuffers.Builder, stepsOffset:flatbuffers.Offset, ignoredStepsOffset:flatbuffers.Offset):flatbuffers.Offset {
  TrackingChecklistResponse.startTrackingChecklistResponse(builder);
  TrackingChecklistResponse.addSteps(builder, stepsOffset);
  TrackingChecklistResponse.addIgnoredSteps(builder, ignoredStepsOffset);
  return TrackingChecklistResponse.endTrackingChecklistResponse(builder);
}

unpack(): TrackingChecklistResponseT {
  return new TrackingChecklistResponseT(
    this.bb!.createObjList<TrackingChecklistStep, TrackingChecklistStepT>(this.steps.bind(this), this.stepsLength()),
    this.bb!.createScalarList<TrackingChecklistStepId>(this.ignoredSteps.bind(this), this.ignoredStepsLength())
  );
}


unpackTo(_o: TrackingChecklistResponseT): void {
  _o.steps = this.bb!.createObjList<TrackingChecklistStep, TrackingChecklistStepT>(this.steps.bind(this), this.stepsLength());
  _o.ignoredSteps = this.bb!.createScalarList<TrackingChecklistStepId>(this.ignoredSteps.bind(this), this.ignoredStepsLength());
}
}

export class TrackingChecklistResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public steps: (TrackingChecklistStepT)[] = [],
  public ignoredSteps: (TrackingChecklistStepId)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const steps = TrackingChecklistResponse.createStepsVector(builder, builder.createObjectOffsetList(this.steps));
  const ignoredSteps = TrackingChecklistResponse.createIgnoredStepsVector(builder, this.ignoredSteps);

  return TrackingChecklistResponse.createTrackingChecklistResponse(builder,
    steps,
    ignoredSteps
  );
}
}
