// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FirmwarePart, FirmwarePartT } from '../../solarxr-protocol/rpc/firmware-part.js';
import { SerialDevicePort, SerialDevicePortT } from '../../solarxr-protocol/rpc/serial-device-port.js';


export class SerialFirmwareUpdate implements flatbuffers.IUnpackableObject<SerialFirmwareUpdateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SerialFirmwareUpdate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSerialFirmwareUpdate(bb:flatbuffers.ByteBuffer, obj?:SerialFirmwareUpdate):SerialFirmwareUpdate {
  return (obj || new SerialFirmwareUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSerialFirmwareUpdate(bb:flatbuffers.ByteBuffer, obj?:SerialFirmwareUpdate):SerialFirmwareUpdate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SerialFirmwareUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * id of the device, this refer to a serial port id
 */
deviceId(obj?:SerialDevicePort):SerialDevicePort|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SerialDevicePort()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * Will make the server ask for the tracker to be manually rebooted by the user
 * after the tracker is done flashing
 */
needManualReboot():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * Credentials to provision after the flashing
 * Only used with Serial flashing, because OTA is already connected to the wifi
 */
ssid():string|null
ssid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ssid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

password():string|null
password(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
password(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * A list of urls and offsets of the different firmware files to flash
 */
firmwarePart(index: number, obj?:FirmwarePart):FirmwarePart|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new FirmwarePart()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

firmwarePartLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSerialFirmwareUpdate(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addDeviceId(builder:flatbuffers.Builder, deviceIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, deviceIdOffset, 0);
}

static addNeedManualReboot(builder:flatbuffers.Builder, needManualReboot:boolean) {
  builder.addFieldInt8(1, +needManualReboot, +false);
}

static addSsid(builder:flatbuffers.Builder, ssidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, ssidOffset, 0);
}

static addPassword(builder:flatbuffers.Builder, passwordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, passwordOffset, 0);
}

static addFirmwarePart(builder:flatbuffers.Builder, firmwarePartOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, firmwarePartOffset, 0);
}

static createFirmwarePartVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFirmwarePartVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSerialFirmwareUpdate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSerialFirmwareUpdate(builder:flatbuffers.Builder, deviceIdOffset:flatbuffers.Offset, needManualReboot:boolean, ssidOffset:flatbuffers.Offset, passwordOffset:flatbuffers.Offset, firmwarePartOffset:flatbuffers.Offset):flatbuffers.Offset {
  SerialFirmwareUpdate.startSerialFirmwareUpdate(builder);
  SerialFirmwareUpdate.addDeviceId(builder, deviceIdOffset);
  SerialFirmwareUpdate.addNeedManualReboot(builder, needManualReboot);
  SerialFirmwareUpdate.addSsid(builder, ssidOffset);
  SerialFirmwareUpdate.addPassword(builder, passwordOffset);
  SerialFirmwareUpdate.addFirmwarePart(builder, firmwarePartOffset);
  return SerialFirmwareUpdate.endSerialFirmwareUpdate(builder);
}

unpack(): SerialFirmwareUpdateT {
  return new SerialFirmwareUpdateT(
    (this.deviceId() !== null ? this.deviceId()!.unpack() : null),
    this.needManualReboot(),
    this.ssid(),
    this.password(),
    this.bb!.createObjList<FirmwarePart, FirmwarePartT>(this.firmwarePart.bind(this), this.firmwarePartLength())
  );
}


unpackTo(_o: SerialFirmwareUpdateT): void {
  _o.deviceId = (this.deviceId() !== null ? this.deviceId()!.unpack() : null);
  _o.needManualReboot = this.needManualReboot();
  _o.ssid = this.ssid();
  _o.password = this.password();
  _o.firmwarePart = this.bb!.createObjList<FirmwarePart, FirmwarePartT>(this.firmwarePart.bind(this), this.firmwarePartLength());
}
}

export class SerialFirmwareUpdateT implements flatbuffers.IGeneratedObject {
constructor(
  public deviceId: SerialDevicePortT|null = null,
  public needManualReboot: boolean = false,
  public ssid: string|Uint8Array|null = null,
  public password: string|Uint8Array|null = null,
  public firmwarePart: (FirmwarePartT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const deviceId = (this.deviceId !== null ? this.deviceId!.pack(builder) : 0);
  const ssid = (this.ssid !== null ? builder.createString(this.ssid!) : 0);
  const password = (this.password !== null ? builder.createString(this.password!) : 0);
  const firmwarePart = SerialFirmwareUpdate.createFirmwarePartVector(builder, builder.createObjectOffsetList(this.firmwarePart));

  return SerialFirmwareUpdate.createSerialFirmwareUpdate(builder,
    deviceId,
    this.needManualReboot,
    ssid,
    password,
    firmwarePart
  );
}
}
