// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SerialUpdateResponse implements flatbuffers.IUnpackableObject<SerialUpdateResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SerialUpdateResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSerialUpdateResponse(bb:flatbuffers.ByteBuffer, obj?:SerialUpdateResponse):SerialUpdateResponse {
  return (obj || new SerialUpdateResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSerialUpdateResponse(bb:flatbuffers.ByteBuffer, obj?:SerialUpdateResponse):SerialUpdateResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SerialUpdateResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

log():string|null
log(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
log(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

closed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSerialUpdateResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLog(builder:flatbuffers.Builder, logOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, logOffset, 0);
}

static addClosed(builder:flatbuffers.Builder, closed:boolean) {
  builder.addFieldInt8(1, +closed, +false);
}

static endSerialUpdateResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSerialUpdateResponse(builder:flatbuffers.Builder, logOffset:flatbuffers.Offset, closed:boolean):flatbuffers.Offset {
  SerialUpdateResponse.startSerialUpdateResponse(builder);
  SerialUpdateResponse.addLog(builder, logOffset);
  SerialUpdateResponse.addClosed(builder, closed);
  return SerialUpdateResponse.endSerialUpdateResponse(builder);
}

unpack(): SerialUpdateResponseT {
  return new SerialUpdateResponseT(
    this.log(),
    this.closed()
  );
}


unpackTo(_o: SerialUpdateResponseT): void {
  _o.log = this.log();
  _o.closed = this.closed();
}
}

export class SerialUpdateResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public log: string|Uint8Array|null = null,
  public closed: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const log = (this.log !== null ? builder.createString(this.log!) : 0);

  return SerialUpdateResponse.createSerialUpdateResponse(builder,
    log,
    this.closed
  );
}
}
