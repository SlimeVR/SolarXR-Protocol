// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class VRCConfigValidity implements flatbuffers.IUnpackableObject<VRCConfigValidityT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VRCConfigValidity {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVRCConfigValidity(bb:flatbuffers.ByteBuffer, obj?:VRCConfigValidity):VRCConfigValidity {
  return (obj || new VRCConfigValidity()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVRCConfigValidity(bb:flatbuffers.ByteBuffer, obj?:VRCConfigValidity):VRCConfigValidity {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VRCConfigValidity()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

legacyModeOk():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

shoulderTrackingOk():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

userHeightOk():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

calibrationRangeOk():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

calibrationVisualsOk():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

trackerModelOk():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

spineModeOk():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startVRCConfigValidity(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addLegacyModeOk(builder:flatbuffers.Builder, legacyModeOk:boolean) {
  builder.addFieldInt8(0, +legacyModeOk, +false);
}

static addShoulderTrackingOk(builder:flatbuffers.Builder, shoulderTrackingOk:boolean) {
  builder.addFieldInt8(1, +shoulderTrackingOk, +false);
}

static addUserHeightOk(builder:flatbuffers.Builder, userHeightOk:boolean) {
  builder.addFieldInt8(2, +userHeightOk, +false);
}

static addCalibrationRangeOk(builder:flatbuffers.Builder, calibrationRangeOk:boolean) {
  builder.addFieldInt8(3, +calibrationRangeOk, +false);
}

static addCalibrationVisualsOk(builder:flatbuffers.Builder, calibrationVisualsOk:boolean) {
  builder.addFieldInt8(4, +calibrationVisualsOk, +false);
}

static addTrackerModelOk(builder:flatbuffers.Builder, trackerModelOk:boolean) {
  builder.addFieldInt8(5, +trackerModelOk, +false);
}

static addSpineModeOk(builder:flatbuffers.Builder, spineModeOk:boolean) {
  builder.addFieldInt8(6, +spineModeOk, +false);
}

static endVRCConfigValidity(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVRCConfigValidity(builder:flatbuffers.Builder, legacyModeOk:boolean, shoulderTrackingOk:boolean, userHeightOk:boolean, calibrationRangeOk:boolean, calibrationVisualsOk:boolean, trackerModelOk:boolean, spineModeOk:boolean):flatbuffers.Offset {
  VRCConfigValidity.startVRCConfigValidity(builder);
  VRCConfigValidity.addLegacyModeOk(builder, legacyModeOk);
  VRCConfigValidity.addShoulderTrackingOk(builder, shoulderTrackingOk);
  VRCConfigValidity.addUserHeightOk(builder, userHeightOk);
  VRCConfigValidity.addCalibrationRangeOk(builder, calibrationRangeOk);
  VRCConfigValidity.addCalibrationVisualsOk(builder, calibrationVisualsOk);
  VRCConfigValidity.addTrackerModelOk(builder, trackerModelOk);
  VRCConfigValidity.addSpineModeOk(builder, spineModeOk);
  return VRCConfigValidity.endVRCConfigValidity(builder);
}

unpack(): VRCConfigValidityT {
  return new VRCConfigValidityT(
    this.legacyModeOk(),
    this.shoulderTrackingOk(),
    this.userHeightOk(),
    this.calibrationRangeOk(),
    this.calibrationVisualsOk(),
    this.trackerModelOk(),
    this.spineModeOk()
  );
}


unpackTo(_o: VRCConfigValidityT): void {
  _o.legacyModeOk = this.legacyModeOk();
  _o.shoulderTrackingOk = this.shoulderTrackingOk();
  _o.userHeightOk = this.userHeightOk();
  _o.calibrationRangeOk = this.calibrationRangeOk();
  _o.calibrationVisualsOk = this.calibrationVisualsOk();
  _o.trackerModelOk = this.trackerModelOk();
  _o.spineModeOk = this.spineModeOk();
}
}

export class VRCConfigValidityT implements flatbuffers.IGeneratedObject {
constructor(
  public legacyModeOk: boolean = false,
  public shoulderTrackingOk: boolean = false,
  public userHeightOk: boolean = false,
  public calibrationRangeOk: boolean = false,
  public calibrationVisualsOk: boolean = false,
  public trackerModelOk: boolean = false,
  public spineModeOk: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return VRCConfigValidity.createVRCConfigValidity(builder,
    this.legacyModeOk,
    this.shoulderTrackingOk,
    this.userHeightOk,
    this.calibrationRangeOk,
    this.calibrationVisualsOk,
    this.trackerModelOk,
    this.spineModeOk
  );
}
}
