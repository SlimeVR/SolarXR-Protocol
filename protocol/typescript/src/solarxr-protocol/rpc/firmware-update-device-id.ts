// automatically generated by the FlatBuffers compiler, do not modify

import { DeviceIdTable, DeviceIdTableT } from '../../solarxr-protocol/datatypes/device-id-table.js';
import { SerialDevicePort, SerialDevicePortT } from '../../solarxr-protocol/rpc/serial-device-port.js';


export enum FirmwareUpdateDeviceId {
  NONE = 0,
  solarxr_protocol_datatypes_DeviceIdTable = 1,
  SerialDevicePort = 2
}

export function unionToFirmwareUpdateDeviceId(
  type: FirmwareUpdateDeviceId,
  accessor: (obj:DeviceIdTable|SerialDevicePort) => DeviceIdTable|SerialDevicePort|null
): DeviceIdTable|SerialDevicePort|null {
  switch(FirmwareUpdateDeviceId[type]) {
    case 'NONE': return null; 
    case 'solarxr_protocol_datatypes_DeviceIdTable': return accessor(new DeviceIdTable())! as DeviceIdTable;
    case 'SerialDevicePort': return accessor(new SerialDevicePort())! as SerialDevicePort;
    default: return null;
  }
}

export function unionListToFirmwareUpdateDeviceId(
  type: FirmwareUpdateDeviceId, 
  accessor: (index: number, obj:DeviceIdTable|SerialDevicePort) => DeviceIdTable|SerialDevicePort|null, 
  index: number
): DeviceIdTable|SerialDevicePort|null {
  switch(FirmwareUpdateDeviceId[type]) {
    case 'NONE': return null; 
    case 'solarxr_protocol_datatypes_DeviceIdTable': return accessor(index, new DeviceIdTable())! as DeviceIdTable;
    case 'SerialDevicePort': return accessor(index, new SerialDevicePort())! as SerialDevicePort;
    default: return null;
  }
}
