// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { OSCSettings, OSCSettingsT } from '../../solarxr-protocol/rpc/oscsettings.js';
import { OSCTrackersSetting, OSCTrackersSettingT } from '../../solarxr-protocol/rpc/osctrackers-setting.js';


/**
 * OSC Settings specific to VRChat
 */
export class VRCOSCSettings implements flatbuffers.IUnpackableObject<VRCOSCSettingsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VRCOSCSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVRCOSCSettings(bb:flatbuffers.ByteBuffer, obj?:VRCOSCSettings):VRCOSCSettings {
  return (obj || new VRCOSCSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVRCOSCSettings(bb:flatbuffers.ByteBuffer, obj?:VRCOSCSettings):VRCOSCSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VRCOSCSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

oscSettings(obj?:OSCSettings):OSCSettings|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new OSCSettings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

trackers(obj?:OSCTrackersSetting):OSCTrackersSetting|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new OSCTrackersSetting()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startVRCOSCSettings(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOscSettings(builder:flatbuffers.Builder, oscSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, oscSettingsOffset, 0);
}

static addTrackers(builder:flatbuffers.Builder, trackersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, trackersOffset, 0);
}

static endVRCOSCSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): VRCOSCSettingsT {
  return new VRCOSCSettingsT(
    (this.oscSettings() !== null ? this.oscSettings()!.unpack() : null),
    (this.trackers() !== null ? this.trackers()!.unpack() : null)
  );
}


unpackTo(_o: VRCOSCSettingsT): void {
  _o.oscSettings = (this.oscSettings() !== null ? this.oscSettings()!.unpack() : null);
  _o.trackers = (this.trackers() !== null ? this.trackers()!.unpack() : null);
}
}

export class VRCOSCSettingsT implements flatbuffers.IGeneratedObject {
constructor(
  public oscSettings: OSCSettingsT|null = null,
  public trackers: OSCTrackersSettingT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const oscSettings = (this.oscSettings !== null ? this.oscSettings!.pack(builder) : 0);
  const trackers = (this.trackers !== null ? this.trackers!.pack(builder) : 0);

  VRCOSCSettings.startVRCOSCSettings(builder);
  VRCOSCSettings.addOscSettings(builder, oscSettings);
  VRCOSCSettings.addTrackers(builder, trackers);

  return VRCOSCSettings.endVRCOSCSettings(builder);
}
}
