// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SerialDevicePort implements flatbuffers.IUnpackableObject<SerialDevicePortT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SerialDevicePort {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSerialDevicePort(bb:flatbuffers.ByteBuffer, obj?:SerialDevicePort):SerialDevicePort {
  return (obj || new SerialDevicePort()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSerialDevicePort(bb:flatbuffers.ByteBuffer, obj?:SerialDevicePort):SerialDevicePort {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SerialDevicePort()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

port():string|null
port(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
port(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSerialDevicePort(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPort(builder:flatbuffers.Builder, portOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, portOffset, 0);
}

static endSerialDevicePort(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSerialDevicePort(builder:flatbuffers.Builder, portOffset:flatbuffers.Offset):flatbuffers.Offset {
  SerialDevicePort.startSerialDevicePort(builder);
  SerialDevicePort.addPort(builder, portOffset);
  return SerialDevicePort.endSerialDevicePort(builder);
}

unpack(): SerialDevicePortT {
  return new SerialDevicePortT(
    this.port()
  );
}


unpackTo(_o: SerialDevicePortT): void {
  _o.port = this.port();
}
}

export class SerialDevicePortT implements flatbuffers.IGeneratedObject {
constructor(
  public port: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const port = (this.port !== null ? builder.createString(this.port!) : 0);

  return SerialDevicePort.createSerialDevicePort(builder,
    port
  );
}
}
