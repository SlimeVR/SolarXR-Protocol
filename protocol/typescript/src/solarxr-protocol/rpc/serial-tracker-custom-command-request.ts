// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



/**
 * Sends a custom cmd to the currently connected Tracker over the Serial Monitor
 */
export class SerialTrackerCustomCommandRequest implements flatbuffers.IUnpackableObject<SerialTrackerCustomCommandRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SerialTrackerCustomCommandRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSerialTrackerCustomCommandRequest(bb:flatbuffers.ByteBuffer, obj?:SerialTrackerCustomCommandRequest):SerialTrackerCustomCommandRequest {
  return (obj || new SerialTrackerCustomCommandRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSerialTrackerCustomCommandRequest(bb:flatbuffers.ByteBuffer, obj?:SerialTrackerCustomCommandRequest):SerialTrackerCustomCommandRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SerialTrackerCustomCommandRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

command():string|null
command(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
command(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSerialTrackerCustomCommandRequest(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addCommand(builder:flatbuffers.Builder, commandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, commandOffset, 0);
}

static endSerialTrackerCustomCommandRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSerialTrackerCustomCommandRequest(builder:flatbuffers.Builder, commandOffset:flatbuffers.Offset):flatbuffers.Offset {
  SerialTrackerCustomCommandRequest.startSerialTrackerCustomCommandRequest(builder);
  SerialTrackerCustomCommandRequest.addCommand(builder, commandOffset);
  return SerialTrackerCustomCommandRequest.endSerialTrackerCustomCommandRequest(builder);
}

unpack(): SerialTrackerCustomCommandRequestT {
  return new SerialTrackerCustomCommandRequestT(
    this.command()
  );
}


unpackTo(_o: SerialTrackerCustomCommandRequestT): void {
  _o.command = this.command();
}
}

export class SerialTrackerCustomCommandRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public command: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const command = (this.command !== null ? builder.createString(this.command!) : 0);

  return SerialTrackerCustomCommandRequest.createSerialTrackerCustomCommandRequest(builder,
    command
  );
}
}
