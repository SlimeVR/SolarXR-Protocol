// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { OSCTrackersSetting, OSCTrackersSettingT } from '../../solarxr-protocol/rpc/osctrackers-setting.js';


export class OSCSettings implements flatbuffers.IUnpackableObject<OSCSettingsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OSCSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOSCSettings(bb:flatbuffers.ByteBuffer, obj?:OSCSettings):OSCSettings {
  return (obj || new OSCSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOSCSettings(bb:flatbuffers.ByteBuffer, obj?:OSCSettings):OSCSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OSCSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

enabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

portIn():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

portOut():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

address():string|null
address(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
address(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

trackers(obj?:OSCTrackersSetting):OSCTrackersSetting|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new OSCTrackersSetting()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startOSCSettings(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addEnabled(builder:flatbuffers.Builder, enabled:boolean) {
  builder.addFieldInt8(0, +enabled, +false);
}

static addPortIn(builder:flatbuffers.Builder, portIn:number) {
  builder.addFieldInt16(1, portIn, 0);
}

static addPortOut(builder:flatbuffers.Builder, portOut:number) {
  builder.addFieldInt16(2, portOut, 0);
}

static addAddress(builder:flatbuffers.Builder, addressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, addressOffset, 0);
}

static addTrackers(builder:flatbuffers.Builder, trackersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, trackersOffset, 0);
}

static endOSCSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): OSCSettingsT {
  return new OSCSettingsT(
    this.enabled(),
    this.portIn(),
    this.portOut(),
    this.address(),
    (this.trackers() !== null ? this.trackers()!.unpack() : null)
  );
}


unpackTo(_o: OSCSettingsT): void {
  _o.enabled = this.enabled();
  _o.portIn = this.portIn();
  _o.portOut = this.portOut();
  _o.address = this.address();
  _o.trackers = (this.trackers() !== null ? this.trackers()!.unpack() : null);
}
}

export class OSCSettingsT implements flatbuffers.IGeneratedObject {
constructor(
  public enabled: boolean = false,
  public portIn: number = 0,
  public portOut: number = 0,
  public address: string|Uint8Array|null = null,
  public trackers: OSCTrackersSettingT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const address = (this.address !== null ? builder.createString(this.address!) : 0);
  const trackers = (this.trackers !== null ? this.trackers!.pack(builder) : 0);

  OSCSettings.startOSCSettings(builder);
  OSCSettings.addEnabled(builder, this.enabled);
  OSCSettings.addPortIn(builder, this.portIn);
  OSCSettings.addPortOut(builder, this.portOut);
  OSCSettings.addAddress(builder, address);
  OSCSettings.addTrackers(builder, trackers);

  return OSCSettings.endOSCSettings(builder);
}
}
