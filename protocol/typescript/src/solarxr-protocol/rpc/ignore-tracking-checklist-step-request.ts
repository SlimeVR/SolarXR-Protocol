// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TrackingChecklistStepId } from '../../solarxr-protocol/rpc/tracking-checklist-step-id.js';


export class IgnoreTrackingChecklistStepRequest implements flatbuffers.IUnpackableObject<IgnoreTrackingChecklistStepRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IgnoreTrackingChecklistStepRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIgnoreTrackingChecklistStepRequest(bb:flatbuffers.ByteBuffer, obj?:IgnoreTrackingChecklistStepRequest):IgnoreTrackingChecklistStepRequest {
  return (obj || new IgnoreTrackingChecklistStepRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIgnoreTrackingChecklistStepRequest(bb:flatbuffers.ByteBuffer, obj?:IgnoreTrackingChecklistStepRequest):IgnoreTrackingChecklistStepRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IgnoreTrackingChecklistStepRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

stepId():TrackingChecklistStepId {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : TrackingChecklistStepId.UNKNOWN;
}

ignore():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startIgnoreTrackingChecklistStepRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addStepId(builder:flatbuffers.Builder, stepId:TrackingChecklistStepId) {
  builder.addFieldInt8(0, stepId, TrackingChecklistStepId.UNKNOWN);
}

static addIgnore(builder:flatbuffers.Builder, ignore:boolean) {
  builder.addFieldInt8(1, +ignore, +false);
}

static endIgnoreTrackingChecklistStepRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createIgnoreTrackingChecklistStepRequest(builder:flatbuffers.Builder, stepId:TrackingChecklistStepId, ignore:boolean):flatbuffers.Offset {
  IgnoreTrackingChecklistStepRequest.startIgnoreTrackingChecklistStepRequest(builder);
  IgnoreTrackingChecklistStepRequest.addStepId(builder, stepId);
  IgnoreTrackingChecklistStepRequest.addIgnore(builder, ignore);
  return IgnoreTrackingChecklistStepRequest.endIgnoreTrackingChecklistStepRequest(builder);
}

unpack(): IgnoreTrackingChecklistStepRequestT {
  return new IgnoreTrackingChecklistStepRequestT(
    this.stepId(),
    this.ignore()
  );
}


unpackTo(_o: IgnoreTrackingChecklistStepRequestT): void {
  _o.stepId = this.stepId();
  _o.ignore = this.ignore();
}
}

export class IgnoreTrackingChecklistStepRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public stepId: TrackingChecklistStepId = TrackingChecklistStepId.UNKNOWN,
  public ignore: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return IgnoreTrackingChecklistStepRequest.createIgnoreTrackingChecklistStepRequest(builder,
    this.stepId,
    this.ignore
  );
}
}
