// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { StatusData, unionToStatusData, unionListToStatusData } from '../../solarxr-protocol/rpc/status-data.js';
import { StatusSteamVRDisconnected, StatusSteamVRDisconnectedT } from '../../solarxr-protocol/rpc/status-steam-vrdisconnected.js';
import { StatusTrackerError, StatusTrackerErrorT } from '../../solarxr-protocol/rpc/status-tracker-error.js';
import { StatusTrackerReset, StatusTrackerResetT } from '../../solarxr-protocol/rpc/status-tracker-reset.js';
import { StatusUnassignedHMD, StatusUnassignedHMDT } from '../../solarxr-protocol/rpc/status-unassigned-hmd.js';


/**
 * An status is some kind of warning sent by the server, it's mainly made for
 * showing problems with the server and need attention from the user.
 */
export class StatusMessage implements flatbuffers.IUnpackableObject<StatusMessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StatusMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStatusMessage(bb:flatbuffers.ByteBuffer, obj?:StatusMessage):StatusMessage {
  return (obj || new StatusMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStatusMessage(bb:flatbuffers.ByteBuffer, obj?:StatusMessage):StatusMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StatusMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The status ID
 */
id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

/**
 * This should be prioritized in the GUI in some way if true
 */
prioritized():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

dataType():StatusData {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : StatusData.NONE;
}

data<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startStatusMessage(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addPrioritized(builder:flatbuffers.Builder, prioritized:boolean) {
  builder.addFieldInt8(1, +prioritized, +false);
}

static addDataType(builder:flatbuffers.Builder, dataType:StatusData) {
  builder.addFieldInt8(2, dataType, StatusData.NONE);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dataOffset, 0);
}

static endStatusMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStatusMessage(builder:flatbuffers.Builder, id:number, prioritized:boolean, dataType:StatusData, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  StatusMessage.startStatusMessage(builder);
  StatusMessage.addId(builder, id);
  StatusMessage.addPrioritized(builder, prioritized);
  StatusMessage.addDataType(builder, dataType);
  StatusMessage.addData(builder, dataOffset);
  return StatusMessage.endStatusMessage(builder);
}

unpack(): StatusMessageT {
  return new StatusMessageT(
    this.id(),
    this.prioritized(),
    this.dataType(),
    (() => {
      const temp = unionToStatusData(this.dataType(), this.data.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: StatusMessageT): void {
  _o.id = this.id();
  _o.prioritized = this.prioritized();
  _o.dataType = this.dataType();
  _o.data = (() => {
      const temp = unionToStatusData(this.dataType(), this.data.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class StatusMessageT implements flatbuffers.IGeneratedObject {
constructor(
  public id: number = 0,
  public prioritized: boolean = false,
  public dataType: StatusData = StatusData.NONE,
  public data: StatusSteamVRDisconnectedT|StatusTrackerErrorT|StatusTrackerResetT|StatusUnassignedHMDT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const data = builder.createObjectOffset(this.data);

  return StatusMessage.createStatusMessage(builder,
    this.id,
    this.prioritized,
    this.dataType,
    data
  );
}
}
