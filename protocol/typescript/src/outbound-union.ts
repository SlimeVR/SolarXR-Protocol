// automatically generated by the FlatBuffers compiler, do not modify

import { DataFeed, DataFeedT } from './slimevr-protocol/data-feed/data-feed';
import { DataFeedNotify, DataFeedNotifyT } from './slimevr-protocol/data-feed/data-feed-notify';
import { DataFeedRequest, DataFeedRequestT } from './slimevr-protocol/data-feed/data-feed-request';
import { DeviceStatus, DeviceStatusT } from './slimevr-protocol/data-feed/device-status';
import { PollDeviceStatus, PollDeviceStatusT } from './slimevr-protocol/data-feed/poll-device-status';
import { HeartbeatRequest, HeartbeatRequestT } from './slimevr-protocol/rpc/heartbeat-request';
import { SettingsResponse, SettingsResponseT } from './slimevr-protocol/rpc/settings-response';


export enum OutboundUnion{
  NONE = 0,
  slimevr_protocol_rpc_HeartbeatRequest = 1,
  slimevr_protocol_rpc_SettingsResponse = 2,
  slimevr_protocol_data_feed_PollDeviceStatus = 3,
  slimevr_protocol_data_feed_DataFeedRequest = 4,
  slimevr_protocol_data_feed_DataFeedNotify = 5,
  slimevr_protocol_data_feed_DeviceStatus = 6,
  slimevr_protocol_data_feed_DataFeed = 7
}

export function unionToOutboundUnion(
  type: OutboundUnion,
  accessor: (obj:DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|SettingsResponse) => DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|SettingsResponse|null
): DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|SettingsResponse|null {
  switch(OutboundUnion[type]) {
    case 'NONE': return null; 
    case 'slimevr_protocol_rpc_HeartbeatRequest': return accessor(new HeartbeatRequest())! as HeartbeatRequest;
    case 'slimevr_protocol_rpc_SettingsResponse': return accessor(new SettingsResponse())! as SettingsResponse;
    case 'slimevr_protocol_data_feed_PollDeviceStatus': return accessor(new PollDeviceStatus())! as PollDeviceStatus;
    case 'slimevr_protocol_data_feed_DataFeedRequest': return accessor(new DataFeedRequest())! as DataFeedRequest;
    case 'slimevr_protocol_data_feed_DataFeedNotify': return accessor(new DataFeedNotify())! as DataFeedNotify;
    case 'slimevr_protocol_data_feed_DeviceStatus': return accessor(new DeviceStatus())! as DeviceStatus;
    case 'slimevr_protocol_data_feed_DataFeed': return accessor(new DataFeed())! as DataFeed;
    default: return null;
  }
}

export function unionListToOutboundUnion(
  type: OutboundUnion, 
  accessor: (index: number, obj:DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|SettingsResponse) => DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|SettingsResponse|null, 
  index: number
): DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|SettingsResponse|null {
  switch(OutboundUnion[type]) {
    case 'NONE': return null; 
    case 'slimevr_protocol_rpc_HeartbeatRequest': return accessor(index, new HeartbeatRequest())! as HeartbeatRequest;
    case 'slimevr_protocol_rpc_SettingsResponse': return accessor(index, new SettingsResponse())! as SettingsResponse;
    case 'slimevr_protocol_data_feed_PollDeviceStatus': return accessor(index, new PollDeviceStatus())! as PollDeviceStatus;
    case 'slimevr_protocol_data_feed_DataFeedRequest': return accessor(index, new DataFeedRequest())! as DataFeedRequest;
    case 'slimevr_protocol_data_feed_DataFeedNotify': return accessor(index, new DataFeedNotify())! as DataFeedNotify;
    case 'slimevr_protocol_data_feed_DeviceStatus': return accessor(index, new DeviceStatus())! as DeviceStatus;
    case 'slimevr_protocol_data_feed_DataFeed': return accessor(index, new DataFeed())! as DataFeed;
    default: return null;
  }
}

