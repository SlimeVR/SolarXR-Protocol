// automatically generated by the FlatBuffers compiler, do not modify

import { DataFeed, DataFeedT } from './slimevr-protocol/data-feed/data-feed';
import { DataFeedNotify, DataFeedNotifyT } from './slimevr-protocol/data-feed/data-feed-notify';
import { DataFeedRequest, DataFeedRequestT } from './slimevr-protocol/data-feed/data-feed-request';
import { DeviceStatus, DeviceStatusT } from './slimevr-protocol/data-feed/device-status';
import { PollDeviceStatus, PollDeviceStatusT } from './slimevr-protocol/data-feed/poll-device-status';
import { AssignTrackerRequest, AssignTrackerRequestT } from './slimevr-protocol/rpc/assign-tracker-request';
import { ChangeSettingsRequest, ChangeSettingsRequestT } from './slimevr-protocol/rpc/change-settings-request';
import { HeartbeatRequest, HeartbeatRequestT } from './slimevr-protocol/rpc/heartbeat-request';
import { ResetRequest, ResetRequestT } from './slimevr-protocol/rpc/reset-request';
import { SettingsRequest, SettingsRequestT } from './slimevr-protocol/rpc/settings-request';


export enum InboundUnion{
  NONE = 0,
  slimevr_protocol_rpc_HeartbeatRequest = 1,
  slimevr_protocol_rpc_ResetRequest = 2,
  slimevr_protocol_rpc_AssignTrackerRequest = 3,
  slimevr_protocol_rpc_SettingsRequest = 4,
  slimevr_protocol_rpc_ChangeSettingsRequest = 5,
  slimevr_protocol_data_feed_PollDeviceStatus = 6,
  slimevr_protocol_data_feed_DataFeedRequest = 7,
  slimevr_protocol_data_feed_DataFeedNotify = 8,
  slimevr_protocol_data_feed_DeviceStatus = 9,
  slimevr_protocol_data_feed_DataFeed = 10
}

export function unionToInboundUnion(
  type: InboundUnion,
  accessor: (obj:AssignTrackerRequest|ChangeSettingsRequest|DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|ResetRequest|SettingsRequest) => AssignTrackerRequest|ChangeSettingsRequest|DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|ResetRequest|SettingsRequest|null
): AssignTrackerRequest|ChangeSettingsRequest|DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|ResetRequest|SettingsRequest|null {
  switch(InboundUnion[type]) {
    case 'NONE': return null; 
    case 'slimevr_protocol_rpc_HeartbeatRequest': return accessor(new HeartbeatRequest())! as HeartbeatRequest;
    case 'slimevr_protocol_rpc_ResetRequest': return accessor(new ResetRequest())! as ResetRequest;
    case 'slimevr_protocol_rpc_AssignTrackerRequest': return accessor(new AssignTrackerRequest())! as AssignTrackerRequest;
    case 'slimevr_protocol_rpc_SettingsRequest': return accessor(new SettingsRequest())! as SettingsRequest;
    case 'slimevr_protocol_rpc_ChangeSettingsRequest': return accessor(new ChangeSettingsRequest())! as ChangeSettingsRequest;
    case 'slimevr_protocol_data_feed_PollDeviceStatus': return accessor(new PollDeviceStatus())! as PollDeviceStatus;
    case 'slimevr_protocol_data_feed_DataFeedRequest': return accessor(new DataFeedRequest())! as DataFeedRequest;
    case 'slimevr_protocol_data_feed_DataFeedNotify': return accessor(new DataFeedNotify())! as DataFeedNotify;
    case 'slimevr_protocol_data_feed_DeviceStatus': return accessor(new DeviceStatus())! as DeviceStatus;
    case 'slimevr_protocol_data_feed_DataFeed': return accessor(new DataFeed())! as DataFeed;
    default: return null;
  }
}

export function unionListToInboundUnion(
  type: InboundUnion, 
  accessor: (index: number, obj:AssignTrackerRequest|ChangeSettingsRequest|DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|ResetRequest|SettingsRequest) => AssignTrackerRequest|ChangeSettingsRequest|DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|ResetRequest|SettingsRequest|null, 
  index: number
): AssignTrackerRequest|ChangeSettingsRequest|DataFeed|DataFeedNotify|DataFeedRequest|DeviceStatus|HeartbeatRequest|PollDeviceStatus|ResetRequest|SettingsRequest|null {
  switch(InboundUnion[type]) {
    case 'NONE': return null; 
    case 'slimevr_protocol_rpc_HeartbeatRequest': return accessor(index, new HeartbeatRequest())! as HeartbeatRequest;
    case 'slimevr_protocol_rpc_ResetRequest': return accessor(index, new ResetRequest())! as ResetRequest;
    case 'slimevr_protocol_rpc_AssignTrackerRequest': return accessor(index, new AssignTrackerRequest())! as AssignTrackerRequest;
    case 'slimevr_protocol_rpc_SettingsRequest': return accessor(index, new SettingsRequest())! as SettingsRequest;
    case 'slimevr_protocol_rpc_ChangeSettingsRequest': return accessor(index, new ChangeSettingsRequest())! as ChangeSettingsRequest;
    case 'slimevr_protocol_data_feed_PollDeviceStatus': return accessor(index, new PollDeviceStatus())! as PollDeviceStatus;
    case 'slimevr_protocol_data_feed_DataFeedRequest': return accessor(index, new DataFeedRequest())! as DataFeedRequest;
    case 'slimevr_protocol_data_feed_DataFeedNotify': return accessor(index, new DataFeedNotify())! as DataFeedNotify;
    case 'slimevr_protocol_data_feed_DeviceStatus': return accessor(index, new DeviceStatus())! as DeviceStatus;
    case 'slimevr_protocol_data_feed_DataFeed': return accessor(index, new DataFeed())! as DataFeed;
    default: return null;
  }
}

