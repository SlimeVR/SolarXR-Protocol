// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.datatypes;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Sent as a response to a request for acknowledgement via the `acknowledge_me`
 * field. `packet_id` should be the packet that is being acknowledged.
 */
@SuppressWarnings("unused")
public final class Acknowledgement extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Acknowledgement getRootAsAcknowledgement(ByteBuffer _bb) { return getRootAsAcknowledgement(_bb, new Acknowledgement()); }
  public static Acknowledgement getRootAsAcknowledgement(ByteBuffer _bb, Acknowledgement obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Acknowledgement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long packetId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createAcknowledgement(FlatBufferBuilder builder,
      long packetId) {
    builder.startTable(1);
    Acknowledgement.addPacketId(builder, packetId);
    return Acknowledgement.endAcknowledgement(builder);
  }

  public static void startAcknowledgement(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addPacketId(FlatBufferBuilder builder, long packetId) { builder.addInt(0, (int) packetId, (int) 0L); }
  public static int endAcknowledgement(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Acknowledgement get(int j) { return get(new Acknowledgement(), j); }
    public Acknowledgement get(Acknowledgement obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public AcknowledgementT unpack() {
    AcknowledgementT _o = new AcknowledgementT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(AcknowledgementT _o) {
    long _oPacketId = packetId();
    _o.setPacketId(_oPacketId);
  }
  public static int pack(FlatBufferBuilder builder, AcknowledgementT _o) {
    if (_o == null) return 0;
    return createAcknowledgement(
      builder,
      _o.getPacketId());
  }
}

