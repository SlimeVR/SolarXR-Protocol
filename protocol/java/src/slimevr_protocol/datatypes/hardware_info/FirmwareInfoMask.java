// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.datatypes.hardware_info;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * A mask of the info in `FirmwareInfo`
 */
@SuppressWarnings("unused")
public final class FirmwareInfoMask extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FirmwareInfoMask getRootAsFirmwareInfoMask(ByteBuffer _bb) { return getRootAsFirmwareInfoMask(_bb, new FirmwareInfoMask()); }
  public static FirmwareInfoMask getRootAsFirmwareInfoMask(ByteBuffer _bb, FirmwareInfoMask obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FirmwareInfoMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean mcuId() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean imuIds() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean displayName() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean model() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean manufacturer() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hardwareRevision() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean firmwareVersion() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean macAddress() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createFirmwareInfoMask(FlatBufferBuilder builder,
      boolean mcuId,
      boolean imuIds,
      boolean displayName,
      boolean model,
      boolean manufacturer,
      boolean hardwareRevision,
      boolean firmwareVersion,
      boolean macAddress) {
    builder.startTable(8);
    FirmwareInfoMask.addMacAddress(builder, macAddress);
    FirmwareInfoMask.addFirmwareVersion(builder, firmwareVersion);
    FirmwareInfoMask.addHardwareRevision(builder, hardwareRevision);
    FirmwareInfoMask.addManufacturer(builder, manufacturer);
    FirmwareInfoMask.addModel(builder, model);
    FirmwareInfoMask.addDisplayName(builder, displayName);
    FirmwareInfoMask.addImuIds(builder, imuIds);
    FirmwareInfoMask.addMcuId(builder, mcuId);
    return FirmwareInfoMask.endFirmwareInfoMask(builder);
  }

  public static void startFirmwareInfoMask(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addMcuId(FlatBufferBuilder builder, boolean mcuId) { builder.addBoolean(0, mcuId, false); }
  public static void addImuIds(FlatBufferBuilder builder, boolean imuIds) { builder.addBoolean(1, imuIds, false); }
  public static void addDisplayName(FlatBufferBuilder builder, boolean displayName) { builder.addBoolean(2, displayName, false); }
  public static void addModel(FlatBufferBuilder builder, boolean model) { builder.addBoolean(3, model, false); }
  public static void addManufacturer(FlatBufferBuilder builder, boolean manufacturer) { builder.addBoolean(4, manufacturer, false); }
  public static void addHardwareRevision(FlatBufferBuilder builder, boolean hardwareRevision) { builder.addBoolean(5, hardwareRevision, false); }
  public static void addFirmwareVersion(FlatBufferBuilder builder, boolean firmwareVersion) { builder.addBoolean(6, firmwareVersion, false); }
  public static void addMacAddress(FlatBufferBuilder builder, boolean macAddress) { builder.addBoolean(7, macAddress, false); }
  public static int endFirmwareInfoMask(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FirmwareInfoMask get(int j) { return get(new FirmwareInfoMask(), j); }
    public FirmwareInfoMask get(FirmwareInfoMask obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FirmwareInfoMaskT unpack() {
    FirmwareInfoMaskT _o = new FirmwareInfoMaskT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FirmwareInfoMaskT _o) {
    boolean _oMcuId = mcuId();
    _o.setMcuId(_oMcuId);
    boolean _oImuIds = imuIds();
    _o.setImuIds(_oImuIds);
    boolean _oDisplayName = displayName();
    _o.setDisplayName(_oDisplayName);
    boolean _oModel = model();
    _o.setModel(_oModel);
    boolean _oManufacturer = manufacturer();
    _o.setManufacturer(_oManufacturer);
    boolean _oHardwareRevision = hardwareRevision();
    _o.setHardwareRevision(_oHardwareRevision);
    boolean _oFirmwareVersion = firmwareVersion();
    _o.setFirmwareVersion(_oFirmwareVersion);
    boolean _oMacAddress = macAddress();
    _o.setMacAddress(_oMacAddress);
  }
  public static int pack(FlatBufferBuilder builder, FirmwareInfoMaskT _o) {
    if (_o == null) return 0;
    return createFirmwareInfoMask(
      builder,
      _o.getMcuId(),
      _o.getImuIds(),
      _o.getDisplayName(),
      _o.getModel(),
      _o.getManufacturer(),
      _o.getHardwareRevision(),
      _o.getFirmwareVersion(),
      _o.getMacAddress());
  }
}

