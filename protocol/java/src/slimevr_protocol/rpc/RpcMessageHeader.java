// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RpcMessageHeader extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static RpcMessageHeader getRootAsRpcMessageHeader(ByteBuffer _bb) { return getRootAsRpcMessageHeader(_bb, new RpcMessageHeader()); }
  public static RpcMessageHeader getRootAsRpcMessageHeader(ByteBuffer _bb, RpcMessageHeader obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RpcMessageHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * For a request, this identifies the request. For a response, this corresponds
   * to the request that it is responding to.
   */
  public slimevr_protocol.datatypes.TransactionId txId() { return txId(new slimevr_protocol.datatypes.TransactionId()); }
  public slimevr_protocol.datatypes.TransactionId txId(slimevr_protocol.datatypes.TransactionId obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public byte mesageType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table mesage(Table obj) { int o = __offset(8); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static void startRpcMessageHeader(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addTxId(FlatBufferBuilder builder, int txIdOffset) { builder.addStruct(0, txIdOffset, 0); }
  public static void addMesageType(FlatBufferBuilder builder, byte mesageType) { builder.addByte(1, mesageType, 0); }
  public static void addMesage(FlatBufferBuilder builder, int mesageOffset) { builder.addOffset(2, mesageOffset, 0); }
  public static int endRpcMessageHeader(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RpcMessageHeader get(int j) { return get(new RpcMessageHeader(), j); }
    public RpcMessageHeader get(RpcMessageHeader obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public RpcMessageHeaderT unpack() {
    RpcMessageHeaderT _o = new RpcMessageHeaderT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(RpcMessageHeaderT _o) {
    if (txId() != null) txId().unpackTo(_o.getTxId());
    else _o.setTxId(null);
    slimevr_protocol.rpc.RpcMessageUnion _oMesage = new slimevr_protocol.rpc.RpcMessageUnion();
    byte _oMesageType = mesageType();
    _oMesage.setType(_oMesageType);
    Table _oMesageValue;
    switch (_oMesageType) {
      case slimevr_protocol.rpc.RpcMessage.HeartbeatRequest:
        _oMesageValue = mesage(new slimevr_protocol.rpc.HeartbeatRequest());
        _oMesage.setValue(_oMesageValue != null ? ((slimevr_protocol.rpc.HeartbeatRequest) _oMesageValue).unpack() : null);
        break;
      case slimevr_protocol.rpc.RpcMessage.HeartbeatResponse:
        _oMesageValue = mesage(new slimevr_protocol.rpc.HeartbeatResponse());
        _oMesage.setValue(_oMesageValue != null ? ((slimevr_protocol.rpc.HeartbeatResponse) _oMesageValue).unpack() : null);
        break;
      case slimevr_protocol.rpc.RpcMessage.ResetRequest:
        _oMesageValue = mesage(new slimevr_protocol.rpc.ResetRequest());
        _oMesage.setValue(_oMesageValue != null ? ((slimevr_protocol.rpc.ResetRequest) _oMesageValue).unpack() : null);
        break;
      case slimevr_protocol.rpc.RpcMessage.AssignTrackerRequest:
        _oMesageValue = mesage(new slimevr_protocol.rpc.AssignTrackerRequest());
        _oMesage.setValue(_oMesageValue != null ? ((slimevr_protocol.rpc.AssignTrackerRequest) _oMesageValue).unpack() : null);
        break;
      case slimevr_protocol.rpc.RpcMessage.SettingsRequest:
        _oMesageValue = mesage(new slimevr_protocol.rpc.SettingsRequest());
        _oMesage.setValue(_oMesageValue != null ? ((slimevr_protocol.rpc.SettingsRequest) _oMesageValue).unpack() : null);
        break;
      case slimevr_protocol.rpc.RpcMessage.SettingsResponse:
        _oMesageValue = mesage(new slimevr_protocol.rpc.SettingsResponse());
        _oMesage.setValue(_oMesageValue != null ? ((slimevr_protocol.rpc.SettingsResponse) _oMesageValue).unpack() : null);
        break;
      case slimevr_protocol.rpc.RpcMessage.ChangeSettingsRequest:
        _oMesageValue = mesage(new slimevr_protocol.rpc.ChangeSettingsRequest());
        _oMesage.setValue(_oMesageValue != null ? ((slimevr_protocol.rpc.ChangeSettingsRequest) _oMesageValue).unpack() : null);
        break;
      default: break;
    }
    _o.setMesage(_oMesage);
  }
  public static int pack(FlatBufferBuilder builder, RpcMessageHeaderT _o) {
    if (_o == null) return 0;
    byte _mesageType = _o.getMesage() == null ? slimevr_protocol.rpc.RpcMessage.NONE : _o.getMesage().getType();
    int _mesage = _o.getMesage() == null ? 0 : slimevr_protocol.rpc.RpcMessageUnion.pack(builder, _o.getMesage());
    startRpcMessageHeader(builder);
    addTxId(builder, slimevr_protocol.datatypes.TransactionId.pack(builder, _o.getTxId()));
    addMesageType(builder, _mesageType);
    addMesage(builder, _mesage);
    return endRpcMessageHeader(builder);
  }
}

