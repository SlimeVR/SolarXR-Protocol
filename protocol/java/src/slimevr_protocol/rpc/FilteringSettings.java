// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FilteringSettings extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FilteringSettings getRootAsFilteringSettings(ByteBuffer _bb) { return getRootAsFilteringSettings(_bb, new FilteringSettings()); }
  public static FilteringSettings getRootAsFilteringSettings(ByteBuffer _bb, FilteringSettings obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FilteringSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int intensity() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int ticks() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createFilteringSettings(FlatBufferBuilder builder,
      int type,
      int intensity,
      int ticks) {
    builder.startTable(3);
    FilteringSettings.addTicks(builder, ticks);
    FilteringSettings.addIntensity(builder, intensity);
    FilteringSettings.addType(builder, type);
    return FilteringSettings.endFilteringSettings(builder);
  }

  public static void startFilteringSettings(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addByte(0, (byte) type, (byte) 0); }
  public static void addIntensity(FlatBufferBuilder builder, int intensity) { builder.addByte(1, (byte) intensity, (byte) 0); }
  public static void addTicks(FlatBufferBuilder builder, int ticks) { builder.addByte(2, (byte) ticks, (byte) 0); }
  public static int endFilteringSettings(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FilteringSettings get(int j) { return get(new FilteringSettings(), j); }
    public FilteringSettings get(FilteringSettings obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

