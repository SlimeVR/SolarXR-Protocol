// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.data_feed;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * All possible info related to a hardware device. For example a vive tracker is a
 * single hardware device, and a slime tracker with two extensions is a single hardware
 * device.
 *
 * Each `DeviceStatus` contains data about one or more `TrackerStatus`es. For example,
 * a SlimeVR waist tracker with a chest extension has two `TrackerStatus`es, because
 * it is tracking information about two different parts of the body.
 */
@SuppressWarnings("unused")
public final class DeviceStatus extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static DeviceStatus getRootAsDeviceStatus(ByteBuffer _bb) { return getRootAsDeviceStatus(_bb, new DeviceStatus()); }
  public static DeviceStatus getRootAsDeviceStatus(ByteBuffer _bb, DeviceStatus obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DeviceStatus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * A unique ID for the device. IDs are not guaranteed to be the same after
   * the connection is terminated.
   */
  public int id() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * The dynamically changeable name of the device. This might be set by the
   * user to help them remember which tracker is which.
   */
  public String customName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer customNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer customNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Mostly-static info about the device hardware
   */
  public slimevr_protocol.datatypes.hardware_info.FirmwareInfo firmwareInfo() { return firmwareInfo(new slimevr_protocol.datatypes.hardware_info.FirmwareInfo()); }
  public slimevr_protocol.datatypes.hardware_info.FirmwareInfo firmwareInfo(slimevr_protocol.datatypes.hardware_info.FirmwareInfo obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * General info about the status of the device
   */
  public slimevr_protocol.datatypes.hardware_info.FirmwareStatus firmwareStatus() { return firmwareStatus(new slimevr_protocol.datatypes.hardware_info.FirmwareStatus()); }
  public slimevr_protocol.datatypes.hardware_info.FirmwareStatus firmwareStatus(slimevr_protocol.datatypes.hardware_info.FirmwareStatus obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * All the relevant information from the different trackers, in an order
   * dictated by the conventions of the firmware running on the device
   */
  public slimevr_protocol.datatypes.tracker.TrackerStatus trackerStatuses(int j) { return trackerStatuses(new slimevr_protocol.datatypes.tracker.TrackerStatus(), j); }
  public slimevr_protocol.datatypes.tracker.TrackerStatus trackerStatuses(slimevr_protocol.datatypes.tracker.TrackerStatus obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int trackerStatusesLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public slimevr_protocol.datatypes.tracker.TrackerStatus.Vector trackerStatusesVector() { return trackerStatusesVector(new slimevr_protocol.datatypes.tracker.TrackerStatus.Vector()); }
  public slimevr_protocol.datatypes.tracker.TrackerStatus.Vector trackerStatusesVector(slimevr_protocol.datatypes.tracker.TrackerStatus.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createDeviceStatus(FlatBufferBuilder builder,
      int id,
      int customNameOffset,
      int firmwareInfoOffset,
      int firmwareStatusOffset,
      int trackerStatusesOffset) {
    builder.startTable(5);
    DeviceStatus.addTrackerStatuses(builder, trackerStatusesOffset);
    DeviceStatus.addFirmwareStatus(builder, firmwareStatusOffset);
    DeviceStatus.addFirmwareInfo(builder, firmwareInfoOffset);
    DeviceStatus.addCustomName(builder, customNameOffset);
    DeviceStatus.addId(builder, id);
    return DeviceStatus.endDeviceStatus(builder);
  }

  public static void startDeviceStatus(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addByte(0, (byte) id, (byte) 0); }
  public static void addCustomName(FlatBufferBuilder builder, int customNameOffset) { builder.addOffset(1, customNameOffset, 0); }
  public static void addFirmwareInfo(FlatBufferBuilder builder, int firmwareInfoOffset) { builder.addOffset(2, firmwareInfoOffset, 0); }
  public static void addFirmwareStatus(FlatBufferBuilder builder, int firmwareStatusOffset) { builder.addOffset(3, firmwareStatusOffset, 0); }
  public static void addTrackerStatuses(FlatBufferBuilder builder, int trackerStatusesOffset) { builder.addOffset(4, trackerStatusesOffset, 0); }
  public static int createTrackerStatusesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTrackerStatusesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDeviceStatus(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DeviceStatus get(int j) { return get(new DeviceStatus(), j); }
    public DeviceStatus get(DeviceStatus obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

