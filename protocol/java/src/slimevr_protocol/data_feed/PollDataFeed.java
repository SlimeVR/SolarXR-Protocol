// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.data_feed;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Requests for a single `DataFeedUpdate` to be sent. This is helpful when getting
 * initial info about the device.
 */
@SuppressWarnings("unused")
public final class PollDataFeed extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PollDataFeed getRootAsPollDataFeed(ByteBuffer _bb) { return getRootAsPollDataFeed(_bb, new PollDataFeed()); }
  public static PollDataFeed getRootAsPollDataFeed(ByteBuffer _bb, PollDataFeed obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PollDataFeed __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public slimevr_protocol.data_feed.DataFeedConfig config() { return config(new slimevr_protocol.data_feed.DataFeedConfig()); }
  public slimevr_protocol.data_feed.DataFeedConfig config(slimevr_protocol.data_feed.DataFeedConfig obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createPollDataFeed(FlatBufferBuilder builder,
      int configOffset) {
    builder.startTable(1);
    PollDataFeed.addConfig(builder, configOffset);
    return PollDataFeed.endPollDataFeed(builder);
  }

  public static void startPollDataFeed(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addConfig(FlatBufferBuilder builder, int configOffset) { builder.addOffset(0, configOffset, 0); }
  public static int endPollDataFeed(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PollDataFeed get(int j) { return get(new PollDataFeed(), j); }
    public PollDataFeed get(PollDataFeed obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

