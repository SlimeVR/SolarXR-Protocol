// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.data_feed;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * A mask of values to be reported in subsequent DeviceStatus. Values set to `false`
 * or `null` will not reported. By default, all fields are false/null.
 *
 * If you set a value to `true`, it is not guaranteed that the sender actually has
 * such a value to send. In this case, they will probably send `null`, and the receiver
 * has the choice to disconnect due to missing data.
 */
@SuppressWarnings("unused")
public final class DeviceStatusMask extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static DeviceStatusMask getRootAsDeviceStatusMask(ByteBuffer _bb) { return getRootAsDeviceStatusMask(_bb, new DeviceStatusMask()); }
  public static DeviceStatusMask getRootAsDeviceStatusMask(ByteBuffer _bb, DeviceStatusMask obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DeviceStatusMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean customName() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public slimevr_protocol.datatypes.hardware_info.FirmwareInfoMask firmwareInfo() { return firmwareInfo(new slimevr_protocol.datatypes.hardware_info.FirmwareInfoMask()); }
  public slimevr_protocol.datatypes.hardware_info.FirmwareInfoMask firmwareInfo(slimevr_protocol.datatypes.hardware_info.FirmwareInfoMask obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public slimevr_protocol.datatypes.hardware_info.FirmwareStatusMask firmwareStatus() { return firmwareStatus(new slimevr_protocol.datatypes.hardware_info.FirmwareStatusMask()); }
  public slimevr_protocol.datatypes.hardware_info.FirmwareStatusMask firmwareStatus(slimevr_protocol.datatypes.hardware_info.FirmwareStatusMask obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public slimevr_protocol.datatypes.tracker.TrackerStatusMask trackerStatuses() { return trackerStatuses(new slimevr_protocol.datatypes.tracker.TrackerStatusMask()); }
  public slimevr_protocol.datatypes.tracker.TrackerStatusMask trackerStatuses(slimevr_protocol.datatypes.tracker.TrackerStatusMask obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createDeviceStatusMask(FlatBufferBuilder builder,
      boolean customName,
      int firmwareInfoOffset,
      int firmwareStatusOffset,
      int trackerStatusesOffset) {
    builder.startTable(4);
    DeviceStatusMask.addTrackerStatuses(builder, trackerStatusesOffset);
    DeviceStatusMask.addFirmwareStatus(builder, firmwareStatusOffset);
    DeviceStatusMask.addFirmwareInfo(builder, firmwareInfoOffset);
    DeviceStatusMask.addCustomName(builder, customName);
    return DeviceStatusMask.endDeviceStatusMask(builder);
  }

  public static void startDeviceStatusMask(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addCustomName(FlatBufferBuilder builder, boolean customName) { builder.addBoolean(0, customName, false); }
  public static void addFirmwareInfo(FlatBufferBuilder builder, int firmwareInfoOffset) { builder.addOffset(1, firmwareInfoOffset, 0); }
  public static void addFirmwareStatus(FlatBufferBuilder builder, int firmwareStatusOffset) { builder.addOffset(2, firmwareStatusOffset, 0); }
  public static void addTrackerStatuses(FlatBufferBuilder builder, int trackerStatusesOffset) { builder.addOffset(3, trackerStatusesOffset, 0); }
  public static int endDeviceStatusMask(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DeviceStatusMask get(int j) { return get(new DeviceStatusMask(), j); }
    public DeviceStatusMask get(DeviceStatusMask obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

