// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.data_feed.tracker;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Describes all possible information about a tracker. A tracker is anything that
 * provides kinematic data about a particular body part.
 *
 * Trackers may be synthetic/computed or instead part of an actual hardware device.
 * There can be multiple trackers per hardware device.
 */
@SuppressWarnings("unused")
public final class TrackerData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static TrackerData getRootAsTrackerData(ByteBuffer _bb) { return getRootAsTrackerData(_bb, new TrackerData()); }
  public static TrackerData getRootAsTrackerData(ByteBuffer _bb, TrackerData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrackerData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public slimevr_protocol.datatypes.TrackerId trackerId() { return trackerId(new slimevr_protocol.datatypes.TrackerId()); }
  public slimevr_protocol.datatypes.TrackerId trackerId(slimevr_protocol.datatypes.TrackerId obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public slimevr_protocol.data_feed.tracker.TrackerDataComponentW data(int j) { return data(new slimevr_protocol.data_feed.tracker.TrackerDataComponentW(), j); }
  public slimevr_protocol.data_feed.tracker.TrackerDataComponentW data(slimevr_protocol.data_feed.tracker.TrackerDataComponentW obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int dataLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public slimevr_protocol.data_feed.tracker.TrackerDataComponentW.Vector dataVector() { return dataVector(new slimevr_protocol.data_feed.tracker.TrackerDataComponentW.Vector()); }
  public slimevr_protocol.data_feed.tracker.TrackerDataComponentW.Vector dataVector(slimevr_protocol.data_feed.tracker.TrackerDataComponentW.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createTrackerData(FlatBufferBuilder builder,
      int trackerIdOffset,
      int dataOffset) {
    builder.startTable(2);
    TrackerData.addData(builder, dataOffset);
    TrackerData.addTrackerId(builder, trackerIdOffset);
    return TrackerData.endTrackerData(builder);
  }

  public static void startTrackerData(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTrackerId(FlatBufferBuilder builder, int trackerIdOffset) { builder.addOffset(0, trackerIdOffset, 0); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(1, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTrackerData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrackerData get(int j) { return get(new TrackerData(), j); }
    public TrackerData get(TrackerData obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TrackerDataT unpack() {
    TrackerDataT _o = new TrackerDataT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TrackerDataT _o) {
    if (trackerId() != null) _o.setTrackerId(trackerId().unpack());
    else _o.setTrackerId(null);
    slimevr_protocol.data_feed.tracker.TrackerDataComponentWT[] _oData = new slimevr_protocol.data_feed.tracker.TrackerDataComponentWT[dataLength()];
    for (int _j = 0; _j < dataLength(); ++_j) {_oData[_j] = (data(_j) != null ? data(_j).unpack() : null);}
    _o.setData(_oData);
  }
  public static int pack(FlatBufferBuilder builder, TrackerDataT _o) {
    if (_o == null) return 0;
    int _tracker_id = _o.getTrackerId() == null ? 0 : slimevr_protocol.datatypes.TrackerId.pack(builder, _o.getTrackerId());
    int _data = 0;
    if (_o.getData() != null) {
      int[] __data = new int[_o.getData().length];
      int _j = 0;
      for (slimevr_protocol.data_feed.tracker.TrackerDataComponentWT _e : _o.getData()) { __data[_j] = slimevr_protocol.data_feed.tracker.TrackerDataComponentW.pack(builder, _e); _j++;}
      _data = createDataVector(builder, __data);
    }
    return createTrackerData(
      builder,
      _tracker_id,
      _data);
  }
}

