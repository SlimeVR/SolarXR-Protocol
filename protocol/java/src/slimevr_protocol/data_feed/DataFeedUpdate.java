// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.data_feed;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * A single update of the `DeviceStatus` updates.
 *
 * A data feed might send data only when it changes/updates, and we should make no
 * assumptions that the data is actually delivered. If you want to guarantee
 * delivery and avoid dropped observations of data (such as a user-initiated
 * button press), it is better to use the RPC system.
 */
@SuppressWarnings("unused")
public final class DataFeedUpdate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static DataFeedUpdate getRootAsDataFeedUpdate(ByteBuffer _bb) { return getRootAsDataFeedUpdate(_bb, new DataFeedUpdate()); }
  public static DataFeedUpdate getRootAsDataFeedUpdate(ByteBuffer _bb, DataFeedUpdate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataFeedUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public slimevr_protocol.data_feed.DeviceStatus devices(int j) { return devices(new slimevr_protocol.data_feed.DeviceStatus(), j); }
  public slimevr_protocol.data_feed.DeviceStatus devices(slimevr_protocol.data_feed.DeviceStatus obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int devicesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public slimevr_protocol.data_feed.DeviceStatus.Vector devicesVector() { return devicesVector(new slimevr_protocol.data_feed.DeviceStatus.Vector()); }
  public slimevr_protocol.data_feed.DeviceStatus.Vector devicesVector(slimevr_protocol.data_feed.DeviceStatus.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public slimevr_protocol.datatypes.tracker.TrackerStatus syntheticTrackers(int j) { return syntheticTrackers(new slimevr_protocol.datatypes.tracker.TrackerStatus(), j); }
  public slimevr_protocol.datatypes.tracker.TrackerStatus syntheticTrackers(slimevr_protocol.datatypes.tracker.TrackerStatus obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int syntheticTrackersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public slimevr_protocol.datatypes.tracker.TrackerStatus.Vector syntheticTrackersVector() { return syntheticTrackersVector(new slimevr_protocol.datatypes.tracker.TrackerStatus.Vector()); }
  public slimevr_protocol.datatypes.tracker.TrackerStatus.Vector syntheticTrackersVector(slimevr_protocol.datatypes.tracker.TrackerStatus.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createDataFeedUpdate(FlatBufferBuilder builder,
      int devicesOffset,
      int syntheticTrackersOffset) {
    builder.startTable(2);
    DataFeedUpdate.addSyntheticTrackers(builder, syntheticTrackersOffset);
    DataFeedUpdate.addDevices(builder, devicesOffset);
    return DataFeedUpdate.endDataFeedUpdate(builder);
  }

  public static void startDataFeedUpdate(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addDevices(FlatBufferBuilder builder, int devicesOffset) { builder.addOffset(0, devicesOffset, 0); }
  public static int createDevicesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDevicesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSyntheticTrackers(FlatBufferBuilder builder, int syntheticTrackersOffset) { builder.addOffset(1, syntheticTrackersOffset, 0); }
  public static int createSyntheticTrackersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSyntheticTrackersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDataFeedUpdate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataFeedUpdate get(int j) { return get(new DataFeedUpdate(), j); }
    public DataFeedUpdate get(DataFeedUpdate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

