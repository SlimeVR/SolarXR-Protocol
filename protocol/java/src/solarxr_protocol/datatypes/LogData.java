// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.datatypes;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * General purpose logging datatype
 */
@SuppressWarnings("unused")
public final class LogData extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static LogData getRootAsLogData(ByteBuffer _bb) { return getRootAsLogData(_bb, new LogData()); }
  public static LogData getRootAsLogData(ByteBuffer _bb, LogData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LogData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String message() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer messageAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer messageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int data(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int dataLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector dataVector() { return dataVector(new ByteVector()); }
  public ByteVector dataVector(ByteVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer dataAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer dataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createLogData(FlatBufferBuilder builder,
      int messageOffset,
      int dataOffset) {
    builder.startTable(2);
    LogData.addData(builder, dataOffset);
    LogData.addMessage(builder, messageOffset);
    return LogData.endLogData(builder);
  }

  public static void startLogData(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addMessage(FlatBufferBuilder builder, int messageOffset) { builder.addOffset(0, messageOffset, 0); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(1, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createDataVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endLogData(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LogData get(int j) { return get(new LogData(), j); }
    public LogData get(LogData obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public LogDataT unpack() {
    LogDataT _o = new LogDataT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(LogDataT _o) {
    String _oMessage = message();
    _o.setMessage(_oMessage);
    int[] _oData = new int[dataLength()];
    for (int _j = 0; _j < dataLength(); ++_j) {_oData[_j] = data(_j);}
    _o.setData(_oData);
  }
  public static int pack(FlatBufferBuilder builder, LogDataT _o) {
    if (_o == null) return 0;
    int _message = _o.getMessage() == null ? 0 : builder.createString(_o.getMessage());
    int _data = 0;
    if (_o.getData() != null) {
      byte[] __data = new byte[_o.getData().length];
      int _j = 0;
      for (int _e : _o.getData()) { __data[_j] = (byte) _e; _j++;}
      _data = createDataVector(builder, __data);
    }
    return createLogData(
      builder,
      _message,
      _data);
  }
}

