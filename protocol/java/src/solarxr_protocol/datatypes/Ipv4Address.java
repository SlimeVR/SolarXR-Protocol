// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.datatypes;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * The 4 bytes of an ip address are stored in 32 bits in big endian order.
 * We will switch over to fixed size arrays when they are supported better.
 */
@SuppressWarnings("unused")
public final class Ipv4Address extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Ipv4Address __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long addr() { return (long)bb.getInt(bb_pos + 0) & 0xFFFFFFFFL; }

  public static int createIpv4Address(FlatBufferBuilder builder, long addr) {
    builder.prep(4, 4);
    builder.putInt((int) addr);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Ipv4Address get(int j) { return get(new Ipv4Address(), j); }
    public Ipv4Address get(Ipv4Address obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public Ipv4AddressT unpack() {
    Ipv4AddressT _o = new Ipv4AddressT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(Ipv4AddressT _o) {
    long _oAddr = addr();
    _o.setAddr(_oAddr);
  }
  public static int pack(FlatBufferBuilder builder, Ipv4AddressT _o) {
    if (_o == null) return 0;
    return createIpv4Address(
      builder,
      _o.getAddr());
  }
}

