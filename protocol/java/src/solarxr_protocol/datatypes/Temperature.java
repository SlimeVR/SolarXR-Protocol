// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.datatypes;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Temperature in degrees celsius
 */
@SuppressWarnings("unused")
public final class Temperature extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Temperature __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float temp() { return bb.getFloat(bb_pos + 0); }

  public static int createTemperature(FlatBufferBuilder builder, float temp) {
    builder.prep(4, 4);
    builder.putFloat(temp);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Temperature get(int j) { return get(new Temperature(), j); }
    public Temperature get(Temperature obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public TemperatureT unpack() {
    TemperatureT _o = new TemperatureT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TemperatureT _o) {
    float _oTemp = temp();
    _o.setTemp(_oTemp);
  }
  public static int pack(FlatBufferBuilder builder, TemperatureT _o) {
    if (_o == null) return 0;
    return createTemperature(
      builder,
      _o.getTemp());
  }
}

