// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.datatypes;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Bytes extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Bytes getRootAsBytes(ByteBuffer _bb) { return getRootAsBytes(_bb, new Bytes()); }
  public static Bytes getRootAsBytes(ByteBuffer _bb, Bytes obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Bytes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int b(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int bLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector bVector() { return bVector(new ByteVector()); }
  public ByteVector bVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer bInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createBytes(FlatBufferBuilder builder,
      int bOffset) {
    builder.startTable(1);
    Bytes.addB(builder, bOffset);
    return Bytes.endBytes(builder);
  }

  public static void startBytes(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addB(FlatBufferBuilder builder, int bOffset) { builder.addOffset(0, bOffset, 0); }
  public static int createBVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endBytes(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Bytes get(int j) { return get(new Bytes(), j); }
    public Bytes get(Bytes obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public BytesT unpack() {
    BytesT _o = new BytesT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(BytesT _o) {
    int[] _oB = new int[bLength()];
    for (int _j = 0; _j < bLength(); ++_j) {_oB[_j] = b(_j);}
    _o.setB(_oB);
  }
  public static int pack(FlatBufferBuilder builder, BytesT _o) {
    if (_o == null) return 0;
    int _b = 0;
    if (_o.getB() != null) {
      byte[] __b = new byte[_o.getB().length];
      int _j = 0;
      for (int _e : _o.getB()) { __b[_j] = (byte) _e; _j++;}
      _b = createBVector(builder, __b);
    }
    return createBytes(
      builder,
      _b);
  }
}

