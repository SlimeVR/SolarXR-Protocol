// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.datatypes;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TransactionId extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TransactionId __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * This is expected to overflow, networking logic should handle this case.
   */
  public long id() { return (long)bb.getInt(bb_pos + 0) & 0xFFFFFFFFL; }

  public static int createTransactionId(FlatBufferBuilder builder, long id) {
    builder.prep(4, 4);
    builder.putInt((int) id);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TransactionId get(int j) { return get(new TransactionId(), j); }
    public TransactionId get(TransactionId obj, int j) {  return obj.__assign(__element(j), bb); }
  }
  public TransactionIdT unpack() {
    TransactionIdT _o = new TransactionIdT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TransactionIdT _o) {
    long _oId = id();
    _o.setId(_oId);
  }
  public static int pack(FlatBufferBuilder builder, TransactionIdT _o) {
    if (_o == null) return 0;
    return createTransactionId(
      builder,
      _o.getId());
  }
}

