// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.pub_sub;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class KeyValues extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static KeyValues getRootAsKeyValues(ByteBuffer _bb) { return getRootAsKeyValues(_bb, new KeyValues()); }
  public static KeyValues getRootAsKeyValues(ByteBuffer _bb, KeyValues obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public KeyValues __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String keys(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int keysLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public StringVector keysVector() { return keysVector(new StringVector()); }
  public StringVector keysVector(StringVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String values(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int valuesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector valuesVector() { return valuesVector(new StringVector()); }
  public StringVector valuesVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createKeyValues(FlatBufferBuilder builder,
      int keysOffset,
      int valuesOffset) {
    builder.startTable(2);
    KeyValues.addValues(builder, valuesOffset);
    KeyValues.addKeys(builder, keysOffset);
    return KeyValues.endKeyValues(builder);
  }

  public static void startKeyValues(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addKeys(FlatBufferBuilder builder, int keysOffset) { builder.addOffset(0, keysOffset, 0); }
  public static int createKeysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startKeysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(1, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endKeyValues(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public KeyValues get(int j) { return get(new KeyValues(), j); }
    public KeyValues get(KeyValues obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public KeyValuesT unpack() {
    KeyValuesT _o = new KeyValuesT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(KeyValuesT _o) {
    String[] _oKeys = new String[keysLength()];
    for (int _j = 0; _j < keysLength(); ++_j) {_oKeys[_j] = keys(_j);}
    _o.setKeys(_oKeys);
    String[] _oValues = new String[valuesLength()];
    for (int _j = 0; _j < valuesLength(); ++_j) {_oValues[_j] = values(_j);}
    _o.setValues(_oValues);
  }
  public static int pack(FlatBufferBuilder builder, KeyValuesT _o) {
    if (_o == null) return 0;
    int _keys = 0;
    if (_o.getKeys() != null) {
      int[] __keys = new int[_o.getKeys().length];
      int _j = 0;
      for (String _e : _o.getKeys()) { __keys[_j] = builder.createString(_e); _j++;}
      _keys = createKeysVector(builder, __keys);
    }
    int _values = 0;
    if (_o.getValues() != null) {
      int[] __values = new int[_o.getValues().length];
      int _j = 0;
      for (String _e : _o.getValues()) { __values[_j] = builder.createString(_e); _j++;}
      _values = createValuesVector(builder, __values);
    }
    return createKeyValues(
      builder,
      _keys,
      _values);
  }
}

