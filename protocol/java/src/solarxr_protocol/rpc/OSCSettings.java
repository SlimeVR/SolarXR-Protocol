// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class OSCSettings extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static OSCSettings getRootAsOSCSettings(ByteBuffer _bb) { return getRootAsOSCSettings(_bb, new OSCSettings()); }
  public static OSCSettings getRootAsOSCSettings(ByteBuffer _bb, OSCSettings obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OSCSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean enabled() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int portIn() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public int portOut() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public solarxr_protocol.datatypes.Ipv4Address address() { return address(new solarxr_protocol.datatypes.Ipv4Address()); }
  public solarxr_protocol.datatypes.Ipv4Address address(solarxr_protocol.datatypes.Ipv4Address obj) { int o = __offset(10); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public solarxr_protocol.rpc.OSCTrackersSetting trackers() { return trackers(new solarxr_protocol.rpc.OSCTrackersSetting()); }
  public solarxr_protocol.rpc.OSCTrackersSetting trackers(solarxr_protocol.rpc.OSCTrackersSetting obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int appIn() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int appOut() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static void startOSCSettings(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addEnabled(FlatBufferBuilder builder, boolean enabled) { builder.addBoolean(0, enabled, false); }
  public static void addPortIn(FlatBufferBuilder builder, int portIn) { builder.addShort(1, (short) portIn, (short) 0); }
  public static void addPortOut(FlatBufferBuilder builder, int portOut) { builder.addShort(2, (short) portOut, (short) 0); }
  public static void addAddress(FlatBufferBuilder builder, int addressOffset) { builder.addStruct(3, addressOffset, 0); }
  public static void addTrackers(FlatBufferBuilder builder, int trackersOffset) { builder.addOffset(4, trackersOffset, 0); }
  public static void addAppIn(FlatBufferBuilder builder, int appIn) { builder.addByte(5, (byte) appIn, (byte) 0); }
  public static void addAppOut(FlatBufferBuilder builder, int appOut) { builder.addByte(6, (byte) appOut, (byte) 0); }
  public static int endOSCSettings(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OSCSettings get(int j) { return get(new OSCSettings(), j); }
    public OSCSettings get(OSCSettings obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public OSCSettingsT unpack() {
    OSCSettingsT _o = new OSCSettingsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(OSCSettingsT _o) {
    boolean _oEnabled = enabled();
    _o.setEnabled(_oEnabled);
    int _oPortIn = portIn();
    _o.setPortIn(_oPortIn);
    int _oPortOut = portOut();
    _o.setPortOut(_oPortOut);
    if (address() != null) address().unpackTo(_o.getAddress());
    else _o.setAddress(null);
    if (trackers() != null) _o.setTrackers(trackers().unpack());
    else _o.setTrackers(null);
    int _oAppIn = appIn();
    _o.setAppIn(_oAppIn);
    int _oAppOut = appOut();
    _o.setAppOut(_oAppOut);
  }
  public static int pack(FlatBufferBuilder builder, OSCSettingsT _o) {
    if (_o == null) return 0;
    int _trackers = _o.getTrackers() == null ? 0 : solarxr_protocol.rpc.OSCTrackersSetting.pack(builder, _o.getTrackers());
    startOSCSettings(builder);
    addEnabled(builder, _o.getEnabled());
    addPortIn(builder, _o.getPortIn());
    addPortOut(builder, _o.getPortOut());
    addAddress(builder, solarxr_protocol.datatypes.Ipv4Address.pack(builder, _o.getAddress()));
    addTrackers(builder, _trackers);
    addAppIn(builder, _o.getAppIn());
    addAppOut(builder, _o.getAppOut());
    return endOSCSettings(builder);
  }
}

