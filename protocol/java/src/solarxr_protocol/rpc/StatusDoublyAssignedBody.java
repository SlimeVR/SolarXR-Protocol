// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Multiple trackers are assigned to the same body part
 */
@SuppressWarnings("unused")
public final class StatusDoublyAssignedBody extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static StatusDoublyAssignedBody getRootAsStatusDoublyAssignedBody(ByteBuffer _bb) { return getRootAsStatusDoublyAssignedBody(_bb, new StatusDoublyAssignedBody()); }
  public static StatusDoublyAssignedBody getRootAsStatusDoublyAssignedBody(ByteBuffer _bb, StatusDoublyAssignedBody obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public StatusDoublyAssignedBody __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.datatypes.TrackerId trackerIds(int j) { return trackerIds(new solarxr_protocol.datatypes.TrackerId(), j); }
  public solarxr_protocol.datatypes.TrackerId trackerIds(solarxr_protocol.datatypes.TrackerId obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int trackerIdsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.datatypes.TrackerId.Vector trackerIdsVector() { return trackerIdsVector(new solarxr_protocol.datatypes.TrackerId.Vector()); }
  public solarxr_protocol.datatypes.TrackerId.Vector trackerIdsVector(solarxr_protocol.datatypes.TrackerId.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createStatusDoublyAssignedBody(FlatBufferBuilder builder,
      int trackerIdsOffset) {
    builder.startTable(1);
    StatusDoublyAssignedBody.addTrackerIds(builder, trackerIdsOffset);
    return StatusDoublyAssignedBody.endStatusDoublyAssignedBody(builder);
  }

  public static void startStatusDoublyAssignedBody(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addTrackerIds(FlatBufferBuilder builder, int trackerIdsOffset) { builder.addOffset(0, trackerIdsOffset, 0); }
  public static int createTrackerIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTrackerIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endStatusDoublyAssignedBody(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public StatusDoublyAssignedBody get(int j) { return get(new StatusDoublyAssignedBody(), j); }
    public StatusDoublyAssignedBody get(StatusDoublyAssignedBody obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public StatusDoublyAssignedBodyT unpack() {
    StatusDoublyAssignedBodyT _o = new StatusDoublyAssignedBodyT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(StatusDoublyAssignedBodyT _o) {
    solarxr_protocol.datatypes.TrackerIdT[] _oTrackerIds = new solarxr_protocol.datatypes.TrackerIdT[trackerIdsLength()];
    for (int _j = 0; _j < trackerIdsLength(); ++_j) {_oTrackerIds[_j] = (trackerIds(_j) != null ? trackerIds(_j).unpack() : null);}
    _o.setTrackerIds(_oTrackerIds);
  }
  public static int pack(FlatBufferBuilder builder, StatusDoublyAssignedBodyT _o) {
    if (_o == null) return 0;
    int _trackerIds = 0;
    if (_o.getTrackerIds() != null) {
      int[] __trackerIds = new int[_o.getTrackerIds().length];
      int _j = 0;
      for (solarxr_protocol.datatypes.TrackerIdT _e : _o.getTrackerIds()) { __trackerIds[_j] = solarxr_protocol.datatypes.TrackerId.pack(builder, _e); _j++;}
      _trackerIds = createTrackerIdsVector(builder, __trackerIds);
    }
    return createStatusDoublyAssignedBody(
      builder,
      _trackerIds);
  }
}

