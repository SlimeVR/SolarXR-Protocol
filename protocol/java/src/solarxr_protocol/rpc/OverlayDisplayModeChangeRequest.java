// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Changes the state of the overlay's display mode.
 */
@SuppressWarnings("unused")
public final class OverlayDisplayModeChangeRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static OverlayDisplayModeChangeRequest getRootAsOverlayDisplayModeChangeRequest(ByteBuffer _bb) { return getRootAsOverlayDisplayModeChangeRequest(_bb, new OverlayDisplayModeChangeRequest()); }
  public static OverlayDisplayModeChangeRequest getRootAsOverlayDisplayModeChangeRequest(ByteBuffer _bb, OverlayDisplayModeChangeRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OverlayDisplayModeChangeRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean hasIsVisible() { return 0 != __offset(4); }
  public boolean isVisible() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hasIsMirrored() { return 0 != __offset(6); }
  public boolean isMirrored() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createOverlayDisplayModeChangeRequest(FlatBufferBuilder builder,
      boolean isVisible,
      boolean isMirrored) {
    builder.startTable(2);
    OverlayDisplayModeChangeRequest.addIsMirrored(builder, isMirrored);
    OverlayDisplayModeChangeRequest.addIsVisible(builder, isVisible);
    return OverlayDisplayModeChangeRequest.endOverlayDisplayModeChangeRequest(builder);
  }

  public static void startOverlayDisplayModeChangeRequest(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addIsVisible(FlatBufferBuilder builder, boolean isVisible) { builder.addBoolean(0, isVisible, false); }
  public static void addIsMirrored(FlatBufferBuilder builder, boolean isMirrored) { builder.addBoolean(1, isMirrored, false); }
  public static int endOverlayDisplayModeChangeRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OverlayDisplayModeChangeRequest get(int j) { return get(new OverlayDisplayModeChangeRequest(), j); }
    public OverlayDisplayModeChangeRequest get(OverlayDisplayModeChangeRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public OverlayDisplayModeChangeRequestT unpack() {
    OverlayDisplayModeChangeRequestT _o = new OverlayDisplayModeChangeRequestT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(OverlayDisplayModeChangeRequestT _o) {
    Boolean _oIsVisible = hasIsVisible() ? isVisible() : null;
    _o.setIsVisible(_oIsVisible);
    Boolean _oIsMirrored = hasIsMirrored() ? isMirrored() : null;
    _o.setIsMirrored(_oIsMirrored);
  }
  public static int pack(FlatBufferBuilder builder, OverlayDisplayModeChangeRequestT _o) {
    if (_o == null) return 0;
    return createOverlayDisplayModeChangeRequest(
      builder,
      _o.getIsVisible(),
      _o.getIsMirrored());
  }
}

