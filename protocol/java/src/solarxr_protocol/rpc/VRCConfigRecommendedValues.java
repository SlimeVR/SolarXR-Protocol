// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class VRCConfigRecommendedValues extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static VRCConfigRecommendedValues getRootAsVRCConfigRecommendedValues(ByteBuffer _bb) { return getRootAsVRCConfigRecommendedValues(_bb, new VRCConfigRecommendedValues()); }
  public static VRCConfigRecommendedValues getRootAsVRCConfigRecommendedValues(ByteBuffer _bb, VRCConfigRecommendedValues obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public VRCConfigRecommendedValues __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean legacyMode() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean shoulderTrackingDisabled() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public float userHeight() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float calibrationRange() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean calibrationVisuals() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int trackerModel() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int spineMode(int j) { int o = __offset(16); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int spineModeLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector spineModeVector() { return spineModeVector(new ByteVector()); }
  public ByteVector spineModeVector(ByteVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer spineModeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer spineModeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }

  public static int createVRCConfigRecommendedValues(FlatBufferBuilder builder,
      boolean legacyMode,
      boolean shoulderTrackingDisabled,
      float userHeight,
      float calibrationRange,
      boolean calibrationVisuals,
      int trackerModel,
      int spineModeOffset) {
    builder.startTable(7);
    VRCConfigRecommendedValues.addSpineMode(builder, spineModeOffset);
    VRCConfigRecommendedValues.addCalibrationRange(builder, calibrationRange);
    VRCConfigRecommendedValues.addUserHeight(builder, userHeight);
    VRCConfigRecommendedValues.addTrackerModel(builder, trackerModel);
    VRCConfigRecommendedValues.addCalibrationVisuals(builder, calibrationVisuals);
    VRCConfigRecommendedValues.addShoulderTrackingDisabled(builder, shoulderTrackingDisabled);
    VRCConfigRecommendedValues.addLegacyMode(builder, legacyMode);
    return VRCConfigRecommendedValues.endVRCConfigRecommendedValues(builder);
  }

  public static void startVRCConfigRecommendedValues(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addLegacyMode(FlatBufferBuilder builder, boolean legacyMode) { builder.addBoolean(0, legacyMode, false); }
  public static void addShoulderTrackingDisabled(FlatBufferBuilder builder, boolean shoulderTrackingDisabled) { builder.addBoolean(1, shoulderTrackingDisabled, false); }
  public static void addUserHeight(FlatBufferBuilder builder, float userHeight) { builder.addFloat(2, userHeight, 0.0f); }
  public static void addCalibrationRange(FlatBufferBuilder builder, float calibrationRange) { builder.addFloat(3, calibrationRange, 0.0f); }
  public static void addCalibrationVisuals(FlatBufferBuilder builder, boolean calibrationVisuals) { builder.addBoolean(4, calibrationVisuals, false); }
  public static void addTrackerModel(FlatBufferBuilder builder, int trackerModel) { builder.addByte(5, (byte) trackerModel, (byte) 0); }
  public static void addSpineMode(FlatBufferBuilder builder, int spineModeOffset) { builder.addOffset(6, spineModeOffset, 0); }
  public static int createSpineModeVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createSpineModeVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startSpineModeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endVRCConfigRecommendedValues(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public VRCConfigRecommendedValues get(int j) { return get(new VRCConfigRecommendedValues(), j); }
    public VRCConfigRecommendedValues get(VRCConfigRecommendedValues obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public VRCConfigRecommendedValuesT unpack() {
    VRCConfigRecommendedValuesT _o = new VRCConfigRecommendedValuesT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(VRCConfigRecommendedValuesT _o) {
    boolean _oLegacyMode = legacyMode();
    _o.setLegacyMode(_oLegacyMode);
    boolean _oShoulderTrackingDisabled = shoulderTrackingDisabled();
    _o.setShoulderTrackingDisabled(_oShoulderTrackingDisabled);
    float _oUserHeight = userHeight();
    _o.setUserHeight(_oUserHeight);
    float _oCalibrationRange = calibrationRange();
    _o.setCalibrationRange(_oCalibrationRange);
    boolean _oCalibrationVisuals = calibrationVisuals();
    _o.setCalibrationVisuals(_oCalibrationVisuals);
    int _oTrackerModel = trackerModel();
    _o.setTrackerModel(_oTrackerModel);
    int[] _oSpineMode = new int[spineModeLength()];
    for (int _j = 0; _j < spineModeLength(); ++_j) {_oSpineMode[_j] = spineMode(_j);}
    _o.setSpineMode(_oSpineMode);
  }
  public static int pack(FlatBufferBuilder builder, VRCConfigRecommendedValuesT _o) {
    if (_o == null) return 0;
    int _spineMode = 0;
    if (_o.getSpineMode() != null) {
      byte[] __spineMode = new byte[_o.getSpineMode().length];
      int _j = 0;
      for (int _e : _o.getSpineMode()) { __spineMode[_j] = (byte) _e; _j++;}
      _spineMode = createSpineModeVector(builder, __spineMode);
    }
    return createVRCConfigRecommendedValues(
      builder,
      _o.getLegacyMode(),
      _o.getShoulderTrackingDisabled(),
      _o.getUserHeight(),
      _o.getCalibrationRange(),
      _o.getCalibrationVisuals(),
      _o.getTrackerModel(),
      _spineMode);
  }
}

