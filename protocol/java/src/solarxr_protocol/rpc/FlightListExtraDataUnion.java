// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import com.google.flatbuffers.FlatBufferBuilder;

public class FlightListExtraDataUnion {
  private byte type;
  private Object value;

  public byte getType() { return type; }

  public void setType(byte type) { this.type = type; }

  public Object getValue() { return value; }

  public void setValue(Object value) { this.value = value; }

  public FlightListExtraDataUnion() {
    this.type = FlightListExtraData.NONE;
    this.value = null;
  }

  public solarxr_protocol.rpc.StatusTrackerResetT asStatusTrackerReset() { return (solarxr_protocol.rpc.StatusTrackerResetT) value; }
  public solarxr_protocol.rpc.StatusTrackerErrorT asStatusTrackerError() { return (solarxr_protocol.rpc.StatusTrackerErrorT) value; }
  public solarxr_protocol.rpc.StatusSteamVRDisconnectedT asStatusSteamVRDisconnected() { return (solarxr_protocol.rpc.StatusSteamVRDisconnectedT) value; }
  public solarxr_protocol.rpc.StatusUnassignedHMDT asStatusUnassignedHMD() { return (solarxr_protocol.rpc.StatusUnassignedHMDT) value; }
  public solarxr_protocol.rpc.FlightListNeedCalibrationT asFlightListNeedCalibration() { return (solarxr_protocol.rpc.FlightListNeedCalibrationT) value; }

  public static int pack(FlatBufferBuilder builder, FlightListExtraDataUnion _o) {
    switch (_o.type) {
      case FlightListExtraData.StatusTrackerReset: return solarxr_protocol.rpc.StatusTrackerReset.pack(builder, _o.asStatusTrackerReset());
      case FlightListExtraData.StatusTrackerError: return solarxr_protocol.rpc.StatusTrackerError.pack(builder, _o.asStatusTrackerError());
      case FlightListExtraData.StatusSteamVRDisconnected: return solarxr_protocol.rpc.StatusSteamVRDisconnected.pack(builder, _o.asStatusSteamVRDisconnected());
      case FlightListExtraData.StatusUnassignedHMD: return solarxr_protocol.rpc.StatusUnassignedHMD.pack(builder, _o.asStatusUnassignedHMD());
      case FlightListExtraData.FlightListNeedCalibration: return solarxr_protocol.rpc.FlightListNeedCalibration.pack(builder, _o.asFlightListNeedCalibration());
      default: return 0;
    }
  }
}

