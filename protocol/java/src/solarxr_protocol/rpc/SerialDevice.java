// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SerialDevice extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static SerialDevice getRootAsSerialDevice(ByteBuffer _bb) { return getRootAsSerialDevice(_bb, new SerialDevice()); }
  public static SerialDevice getRootAsSerialDevice(ByteBuffer _bb, SerialDevice obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SerialDevice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String port() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer portAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer portInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createSerialDevice(FlatBufferBuilder builder,
      int portOffset,
      int nameOffset) {
    builder.startTable(2);
    SerialDevice.addName(builder, nameOffset);
    SerialDevice.addPort(builder, portOffset);
    return SerialDevice.endSerialDevice(builder);
  }

  public static void startSerialDevice(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addPort(FlatBufferBuilder builder, int portOffset) { builder.addOffset(0, portOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static int endSerialDevice(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SerialDevice get(int j) { return get(new SerialDevice(), j); }
    public SerialDevice get(SerialDevice obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SerialDeviceT unpack() {
    SerialDeviceT _o = new SerialDeviceT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SerialDeviceT _o) {
    String _oPort = port();
    _o.setPort(_oPort);
    String _oName = name();
    _o.setName(_oName);
  }
  public static int pack(FlatBufferBuilder builder, SerialDeviceT _o) {
    if (_o == null) return 0;
    int _port = _o.getPort() == null ? 0 : builder.createString(_o.getPort());
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    return createSerialDevice(
      builder,
      _port,
      _name);
  }
}

