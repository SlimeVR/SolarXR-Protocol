// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class OTAFirmwareUpdate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static OTAFirmwareUpdate getRootAsOTAFirmwareUpdate(ByteBuffer _bb) { return getRootAsOTAFirmwareUpdate(_bb, new OTAFirmwareUpdate()); }
  public static OTAFirmwareUpdate getRootAsOTAFirmwareUpdate(ByteBuffer _bb, OTAFirmwareUpdate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OTAFirmwareUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * id of the device, this refer to the actual DeviceId from the protocol
   */
  public solarxr_protocol.datatypes.DeviceId deviceId() { return deviceId(new solarxr_protocol.datatypes.DeviceId()); }
  public solarxr_protocol.datatypes.DeviceId deviceId(solarxr_protocol.datatypes.DeviceId obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * A table containing the url and offset of the firmware bin file
   */
  public solarxr_protocol.rpc.FirmwarePart firmwarePart() { return firmwarePart(new solarxr_protocol.rpc.FirmwarePart()); }
  public solarxr_protocol.rpc.FirmwarePart firmwarePart(solarxr_protocol.rpc.FirmwarePart obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static void startOTAFirmwareUpdate(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addDeviceId(FlatBufferBuilder builder, int deviceIdOffset) { builder.addStruct(0, deviceIdOffset, 0); }
  public static void addFirmwarePart(FlatBufferBuilder builder, int firmwarePartOffset) { builder.addOffset(1, firmwarePartOffset, 0); }
  public static int endOTAFirmwareUpdate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OTAFirmwareUpdate get(int j) { return get(new OTAFirmwareUpdate(), j); }
    public OTAFirmwareUpdate get(OTAFirmwareUpdate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public OTAFirmwareUpdateT unpack() {
    OTAFirmwareUpdateT _o = new OTAFirmwareUpdateT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(OTAFirmwareUpdateT _o) {
    if (deviceId() != null) deviceId().unpackTo(_o.getDeviceId());
    else _o.setDeviceId(null);
    if (firmwarePart() != null) _o.setFirmwarePart(firmwarePart().unpack());
    else _o.setFirmwarePart(null);
  }
  public static int pack(FlatBufferBuilder builder, OTAFirmwareUpdateT _o) {
    if (_o == null) return 0;
    int _firmwarePart = _o.getFirmwarePart() == null ? 0 : solarxr_protocol.rpc.FirmwarePart.pack(builder, _o.getFirmwarePart());
    startOTAFirmwareUpdate(builder);
    addDeviceId(builder, solarxr_protocol.datatypes.DeviceId.pack(builder, _o.getDeviceId()));
    addFirmwarePart(builder, _firmwarePart);
    return endOTAFirmwareUpdate(builder);
  }
}

