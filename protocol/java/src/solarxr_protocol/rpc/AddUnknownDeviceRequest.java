// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class AddUnknownDeviceRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static AddUnknownDeviceRequest getRootAsAddUnknownDeviceRequest(ByteBuffer _bb) { return getRootAsAddUnknownDeviceRequest(_bb, new AddUnknownDeviceRequest()); }
  public static AddUnknownDeviceRequest getRootAsAddUnknownDeviceRequest(ByteBuffer _bb, AddUnknownDeviceRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AddUnknownDeviceRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String macAddress(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int macAddressLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public StringVector macAddressVector() { return macAddressVector(new StringVector()); }
  public StringVector macAddressVector(StringVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createAddUnknownDeviceRequest(FlatBufferBuilder builder,
      int macAddressOffset) {
    builder.startTable(1);
    AddUnknownDeviceRequest.addMacAddress(builder, macAddressOffset);
    return AddUnknownDeviceRequest.endAddUnknownDeviceRequest(builder);
  }

  public static void startAddUnknownDeviceRequest(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addMacAddress(FlatBufferBuilder builder, int macAddressOffset) { builder.addOffset(0, macAddressOffset, 0); }
  public static int createMacAddressVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMacAddressVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAddUnknownDeviceRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AddUnknownDeviceRequest get(int j) { return get(new AddUnknownDeviceRequest(), j); }
    public AddUnknownDeviceRequest get(AddUnknownDeviceRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public AddUnknownDeviceRequestT unpack() {
    AddUnknownDeviceRequestT _o = new AddUnknownDeviceRequestT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(AddUnknownDeviceRequestT _o) {
    String[] _oMacAddress = new String[macAddressLength()];
    for (int _j = 0; _j < macAddressLength(); ++_j) {_oMacAddress[_j] = macAddress(_j);}
    _o.setMacAddress(_oMacAddress);
  }
  public static int pack(FlatBufferBuilder builder, AddUnknownDeviceRequestT _o) {
    if (_o == null) return 0;
    int _macAddress = 0;
    if (_o.getMacAddress() != null) {
      int[] __macAddress = new int[_o.getMacAddress().length];
      int _j = 0;
      for (String _e : _o.getMacAddress()) { __macAddress[_j] = builder.createString(_e); _j++;}
      _macAddress = createMacAddressVector(builder, __macAddress);
    }
    return createAddUnknownDeviceRequest(
      builder,
      _macAddress);
  }
}

