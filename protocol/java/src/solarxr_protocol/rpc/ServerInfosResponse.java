// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Holds the Server informations, this is a basic table holding various informations about the currently running server
 * like its local ip address (usefull for standalone users so they can specify the ip of the server more easilly) and any more
 * infos we might want to add in the future. (like java version, working dir, server version ....)
 * This only holds the local ip for now. But there will be other informations added as we chose to display them on the gui for instance
 */
@SuppressWarnings("unused")
public final class ServerInfosResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static ServerInfosResponse getRootAsServerInfosResponse(ByteBuffer _bb) { return getRootAsServerInfosResponse(_bb, new ServerInfosResponse()); }
  public static ServerInfosResponse getRootAsServerInfosResponse(ByteBuffer _bb, ServerInfosResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ServerInfosResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String localIp() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer localIpAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer localIpInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createServerInfosResponse(FlatBufferBuilder builder,
      int localIpOffset) {
    builder.startTable(1);
    ServerInfosResponse.addLocalIp(builder, localIpOffset);
    return ServerInfosResponse.endServerInfosResponse(builder);
  }

  public static void startServerInfosResponse(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addLocalIp(FlatBufferBuilder builder, int localIpOffset) { builder.addOffset(0, localIpOffset, 0); }
  public static int endServerInfosResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ServerInfosResponse get(int j) { return get(new ServerInfosResponse(), j); }
    public ServerInfosResponse get(ServerInfosResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ServerInfosResponseT unpack() {
    ServerInfosResponseT _o = new ServerInfosResponseT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ServerInfosResponseT _o) {
    String _oLocalIp = localIp();
    _o.setLocalIp(_oLocalIp);
  }
  public static int pack(FlatBufferBuilder builder, ServerInfosResponseT _o) {
    if (_o == null) return 0;
    int _localIp = _o.getLocalIp() == null ? 0 : builder.createString(_o.getLocalIp());
    return createServerInfosResponse(
      builder,
      _localIp);
  }
}

