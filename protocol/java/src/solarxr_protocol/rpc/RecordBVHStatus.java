// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RecordBVHStatus extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static RecordBVHStatus getRootAsRecordBVHStatus(ByteBuffer _bb) { return getRootAsRecordBVHStatus(_bb, new RecordBVHStatus()); }
  public static RecordBVHStatus getRootAsRecordBVHStatus(ByteBuffer _bb, RecordBVHStatus obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RecordBVHStatus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean recording() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createRecordBVHStatus(FlatBufferBuilder builder,
      boolean recording) {
    builder.startTable(1);
    RecordBVHStatus.addRecording(builder, recording);
    return RecordBVHStatus.endRecordBVHStatus(builder);
  }

  public static void startRecordBVHStatus(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addRecording(FlatBufferBuilder builder, boolean recording) { builder.addBoolean(0, recording, false); }
  public static int endRecordBVHStatus(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RecordBVHStatus get(int j) { return get(new RecordBVHStatus(), j); }
    public RecordBVHStatus get(RecordBVHStatus obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public RecordBVHStatusT unpack() {
    RecordBVHStatusT _o = new RecordBVHStatusT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(RecordBVHStatusT _o) {
    boolean _oRecording = recording();
    _o.setRecording(_oRecording);
  }
  public static int pack(FlatBufferBuilder builder, RecordBVHStatusT _o) {
    if (_o == null) return 0;
    return createRecordBVHStatus(
      builder,
      _o.getRecording());
  }
}

