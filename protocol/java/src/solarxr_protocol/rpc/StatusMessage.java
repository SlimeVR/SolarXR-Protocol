// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * An status is some kind of warning sent by the server, it's mainly made for
 * showing problems with the server and need attention from the user.
 */
@SuppressWarnings("unused")
public final class StatusMessage extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static StatusMessage getRootAsStatusMessage(ByteBuffer _bb) { return getRootAsStatusMessage(_bb, new StatusMessage()); }
  public static StatusMessage getRootAsStatusMessage(ByteBuffer _bb, StatusMessage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public StatusMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The status ID
   */
  public long id() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  /**
   * This should be prioritized in the GUI in some way if true
   */
  public boolean prioritized() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public byte dataType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table data(Table obj) { int o = __offset(10); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createStatusMessage(FlatBufferBuilder builder,
      long id,
      boolean prioritized,
      byte dataType,
      int dataOffset) {
    builder.startTable(4);
    StatusMessage.addData(builder, dataOffset);
    StatusMessage.addId(builder, id);
    StatusMessage.addDataType(builder, dataType);
    StatusMessage.addPrioritized(builder, prioritized);
    return StatusMessage.endStatusMessage(builder);
  }

  public static void startStatusMessage(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addInt(0, (int) id, (int) 0L); }
  public static void addPrioritized(FlatBufferBuilder builder, boolean prioritized) { builder.addBoolean(1, prioritized, false); }
  public static void addDataType(FlatBufferBuilder builder, byte dataType) { builder.addByte(2, dataType, 0); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(3, dataOffset, 0); }
  public static int endStatusMessage(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public StatusMessage get(int j) { return get(new StatusMessage(), j); }
    public StatusMessage get(StatusMessage obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public StatusMessageT unpack() {
    StatusMessageT _o = new StatusMessageT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(StatusMessageT _o) {
    long _oId = id();
    _o.setId(_oId);
    boolean _oPrioritized = prioritized();
    _o.setPrioritized(_oPrioritized);
    solarxr_protocol.rpc.StatusDataUnion _oData = new solarxr_protocol.rpc.StatusDataUnion();
    byte _oDataType = dataType();
    _oData.setType(_oDataType);
    Table _oDataValue;
    switch (_oDataType) {
      case solarxr_protocol.rpc.StatusData.StatusTrackerReset:
        _oDataValue = data(new solarxr_protocol.rpc.StatusTrackerReset());
        _oData.setValue(_oDataValue != null ? ((solarxr_protocol.rpc.StatusTrackerReset) _oDataValue).unpack() : null);
        break;
      case solarxr_protocol.rpc.StatusData.StatusTrackerError:
        _oDataValue = data(new solarxr_protocol.rpc.StatusTrackerError());
        _oData.setValue(_oDataValue != null ? ((solarxr_protocol.rpc.StatusTrackerError) _oDataValue).unpack() : null);
        break;
      case solarxr_protocol.rpc.StatusData.StatusSteamVRDisconnected:
        _oDataValue = data(new solarxr_protocol.rpc.StatusSteamVRDisconnected());
        _oData.setValue(_oDataValue != null ? ((solarxr_protocol.rpc.StatusSteamVRDisconnected) _oDataValue).unpack() : null);
        break;
      case solarxr_protocol.rpc.StatusData.StatusUnassignedHMD:
        _oDataValue = data(new solarxr_protocol.rpc.StatusUnassignedHMD());
        _oData.setValue(_oDataValue != null ? ((solarxr_protocol.rpc.StatusUnassignedHMD) _oDataValue).unpack() : null);
        break;
      default: break;
    }
    _o.setData(_oData);
  }
  public static int pack(FlatBufferBuilder builder, StatusMessageT _o) {
    if (_o == null) return 0;
    byte _dataType = _o.getData() == null ? solarxr_protocol.rpc.StatusData.NONE : _o.getData().getType();
    int _data = _o.getData() == null ? 0 : solarxr_protocol.rpc.StatusDataUnion.pack(builder, _o.getData());
    return createStatusMessage(
      builder,
      _o.getId(),
      _o.getPrioritized(),
      _dataType,
      _data);
  }
}

