// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Forward OSC messages to allow the usage of 2 OSC programs for the same app
 */
@SuppressWarnings("unused")
public final class OSCRouterSettings extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static OSCRouterSettings getRootAsOSCRouterSettings(ByteBuffer _bb) { return getRootAsOSCRouterSettings(_bb, new OSCRouterSettings()); }
  public static OSCRouterSettings getRootAsOSCRouterSettings(ByteBuffer _bb, OSCRouterSettings obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OSCRouterSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.rpc.OSCSettings generalSettings() { return generalSettings(new solarxr_protocol.rpc.OSCSettings()); }
  public solarxr_protocol.rpc.OSCSettings generalSettings(solarxr_protocol.rpc.OSCSettings obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createOSCRouterSettings(FlatBufferBuilder builder,
      int generalSettingsOffset) {
    builder.startTable(1);
    OSCRouterSettings.addGeneralSettings(builder, generalSettingsOffset);
    return OSCRouterSettings.endOSCRouterSettings(builder);
  }

  public static void startOSCRouterSettings(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addGeneralSettings(FlatBufferBuilder builder, int generalSettingsOffset) { builder.addOffset(0, generalSettingsOffset, 0); }
  public static int endOSCRouterSettings(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OSCRouterSettings get(int j) { return get(new OSCRouterSettings(), j); }
    public OSCRouterSettings get(OSCRouterSettings obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public OSCRouterSettingsT unpack() {
    OSCRouterSettingsT _o = new OSCRouterSettingsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(OSCRouterSettingsT _o) {
    if (generalSettings() != null) _o.setGeneralSettings(generalSettings().unpack());
    else _o.setGeneralSettings(null);
  }
  public static int pack(FlatBufferBuilder builder, OSCRouterSettingsT _o) {
    if (_o == null) return 0;
    int _generalSettings = _o.getGeneralSettings() == null ? 0 : solarxr_protocol.rpc.OSCSettings.pack(builder, _o.getGeneralSettings());
    return createOSCRouterSettings(
      builder,
      _generalSettings);
  }
}

