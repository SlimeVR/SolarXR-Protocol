// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class OpenSerialRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static OpenSerialRequest getRootAsOpenSerialRequest(ByteBuffer _bb) { return getRootAsOpenSerialRequest(_bb, new OpenSerialRequest()); }
  public static OpenSerialRequest getRootAsOpenSerialRequest(ByteBuffer _bb, OpenSerialRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OpenSerialRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * rts: Status of the Serial Line "Request to Send" datapin cached. On Dev-Boards used for RST or Flash Pin
   * dtr: Status of the Serial Line "Data Terminal Ready" datapin cached. On Dev-Boards used for RST or Flash Pin
   */
  public boolean rts() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean dtr() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createOpenSerialRequest(FlatBufferBuilder builder,
      boolean rts,
      boolean dtr) {
    builder.startTable(2);
    OpenSerialRequest.addDtr(builder, dtr);
    OpenSerialRequest.addRts(builder, rts);
    return OpenSerialRequest.endOpenSerialRequest(builder);
  }

  public static void startOpenSerialRequest(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addRts(FlatBufferBuilder builder, boolean rts) { builder.addBoolean(0, rts, false); }
  public static void addDtr(FlatBufferBuilder builder, boolean dtr) { builder.addBoolean(1, dtr, false); }
  public static int endOpenSerialRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OpenSerialRequest get(int j) { return get(new OpenSerialRequest(), j); }
    public OpenSerialRequest get(OpenSerialRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public OpenSerialRequestT unpack() {
    OpenSerialRequestT _o = new OpenSerialRequestT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(OpenSerialRequestT _o) {
    boolean _oRts = rts();
    _o.setRts(_oRts);
    boolean _oDtr = dtr();
    _o.setDtr(_oDtr);
  }
  public static int pack(FlatBufferBuilder builder, OpenSerialRequestT _o) {
    if (_o == null) return 0;
    return createOpenSerialRequest(
      builder,
      _o.getRts(),
      _o.getDtr());
  }
}

