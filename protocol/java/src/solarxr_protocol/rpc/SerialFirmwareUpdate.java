// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SerialFirmwareUpdate extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static SerialFirmwareUpdate getRootAsSerialFirmwareUpdate(ByteBuffer _bb) { return getRootAsSerialFirmwareUpdate(_bb, new SerialFirmwareUpdate()); }
  public static SerialFirmwareUpdate getRootAsSerialFirmwareUpdate(ByteBuffer _bb, SerialFirmwareUpdate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SerialFirmwareUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * id of the device, this refer to a serial port id
   */
  public solarxr_protocol.rpc.SerialDevicePort deviceId() { return deviceId(new solarxr_protocol.rpc.SerialDevicePort()); }
  public solarxr_protocol.rpc.SerialDevicePort deviceId(solarxr_protocol.rpc.SerialDevicePort obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * Will make the server ask for the tracker to be manually rebooted by the user
   * after the tracker is done flashing
   */
  public boolean needManualReboot() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Credentials to provision after the flashing
   * Only used with Serial flashing, because OTA is already connected to the wifi
   */
  public String ssid() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ssidAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ssidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String password() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer passwordAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer passwordInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * A list of urls and offsets of the different firmware files to flash
   */
  public solarxr_protocol.rpc.FirmwarePart firmwarePart(int j) { return firmwarePart(new solarxr_protocol.rpc.FirmwarePart(), j); }
  public solarxr_protocol.rpc.FirmwarePart firmwarePart(solarxr_protocol.rpc.FirmwarePart obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int firmwarePartLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.rpc.FirmwarePart.Vector firmwarePartVector() { return firmwarePartVector(new solarxr_protocol.rpc.FirmwarePart.Vector()); }
  public solarxr_protocol.rpc.FirmwarePart.Vector firmwarePartVector(solarxr_protocol.rpc.FirmwarePart.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSerialFirmwareUpdate(FlatBufferBuilder builder,
      int deviceIdOffset,
      boolean needManualReboot,
      int ssidOffset,
      int passwordOffset,
      int firmwarePartOffset) {
    builder.startTable(5);
    SerialFirmwareUpdate.addFirmwarePart(builder, firmwarePartOffset);
    SerialFirmwareUpdate.addPassword(builder, passwordOffset);
    SerialFirmwareUpdate.addSsid(builder, ssidOffset);
    SerialFirmwareUpdate.addDeviceId(builder, deviceIdOffset);
    SerialFirmwareUpdate.addNeedManualReboot(builder, needManualReboot);
    return SerialFirmwareUpdate.endSerialFirmwareUpdate(builder);
  }

  public static void startSerialFirmwareUpdate(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addDeviceId(FlatBufferBuilder builder, int deviceIdOffset) { builder.addOffset(0, deviceIdOffset, 0); }
  public static void addNeedManualReboot(FlatBufferBuilder builder, boolean needManualReboot) { builder.addBoolean(1, needManualReboot, false); }
  public static void addSsid(FlatBufferBuilder builder, int ssidOffset) { builder.addOffset(2, ssidOffset, 0); }
  public static void addPassword(FlatBufferBuilder builder, int passwordOffset) { builder.addOffset(3, passwordOffset, 0); }
  public static void addFirmwarePart(FlatBufferBuilder builder, int firmwarePartOffset) { builder.addOffset(4, firmwarePartOffset, 0); }
  public static int createFirmwarePartVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFirmwarePartVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSerialFirmwareUpdate(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SerialFirmwareUpdate get(int j) { return get(new SerialFirmwareUpdate(), j); }
    public SerialFirmwareUpdate get(SerialFirmwareUpdate obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SerialFirmwareUpdateT unpack() {
    SerialFirmwareUpdateT _o = new SerialFirmwareUpdateT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SerialFirmwareUpdateT _o) {
    if (deviceId() != null) _o.setDeviceId(deviceId().unpack());
    else _o.setDeviceId(null);
    boolean _oNeedManualReboot = needManualReboot();
    _o.setNeedManualReboot(_oNeedManualReboot);
    String _oSsid = ssid();
    _o.setSsid(_oSsid);
    String _oPassword = password();
    _o.setPassword(_oPassword);
    solarxr_protocol.rpc.FirmwarePartT[] _oFirmwarePart = new solarxr_protocol.rpc.FirmwarePartT[firmwarePartLength()];
    for (int _j = 0; _j < firmwarePartLength(); ++_j) {_oFirmwarePart[_j] = (firmwarePart(_j) != null ? firmwarePart(_j).unpack() : null);}
    _o.setFirmwarePart(_oFirmwarePart);
  }
  public static int pack(FlatBufferBuilder builder, SerialFirmwareUpdateT _o) {
    if (_o == null) return 0;
    int _deviceId = _o.getDeviceId() == null ? 0 : solarxr_protocol.rpc.SerialDevicePort.pack(builder, _o.getDeviceId());
    int _ssid = _o.getSsid() == null ? 0 : builder.createString(_o.getSsid());
    int _password = _o.getPassword() == null ? 0 : builder.createString(_o.getPassword());
    int _firmwarePart = 0;
    if (_o.getFirmwarePart() != null) {
      int[] __firmwarePart = new int[_o.getFirmwarePart().length];
      int _j = 0;
      for (solarxr_protocol.rpc.FirmwarePartT _e : _o.getFirmwarePart()) { __firmwarePart[_j] = solarxr_protocol.rpc.FirmwarePart.pack(builder, _e); _j++;}
      _firmwarePart = createFirmwarePartVector(builder, __firmwarePart);
    }
    return createSerialFirmwareUpdate(
      builder,
      _deviceId,
      _o.getNeedManualReboot(),
      _ssid,
      _password,
      _firmwarePart);
  }
}

