// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class AutoBoneEpochResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static AutoBoneEpochResponse getRootAsAutoBoneEpochResponse(ByteBuffer _bb) { return getRootAsAutoBoneEpochResponse(_bb, new AutoBoneEpochResponse()); }
  public static AutoBoneEpochResponse getRootAsAutoBoneEpochResponse(ByteBuffer _bb, AutoBoneEpochResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AutoBoneEpochResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long currentEpoch() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long totalEpochs() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public float epochError() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public solarxr_protocol.rpc.SkeletonPart adjustedSkeletonParts(int j) { return adjustedSkeletonParts(new solarxr_protocol.rpc.SkeletonPart(), j); }
  public solarxr_protocol.rpc.SkeletonPart adjustedSkeletonParts(solarxr_protocol.rpc.SkeletonPart obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int adjustedSkeletonPartsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.rpc.SkeletonPart.Vector adjustedSkeletonPartsVector() { return adjustedSkeletonPartsVector(new solarxr_protocol.rpc.SkeletonPart.Vector()); }
  public solarxr_protocol.rpc.SkeletonPart.Vector adjustedSkeletonPartsVector(solarxr_protocol.rpc.SkeletonPart.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createAutoBoneEpochResponse(FlatBufferBuilder builder,
      long currentEpoch,
      long totalEpochs,
      float epochError,
      int adjustedSkeletonPartsOffset) {
    builder.startTable(4);
    AutoBoneEpochResponse.addAdjustedSkeletonParts(builder, adjustedSkeletonPartsOffset);
    AutoBoneEpochResponse.addEpochError(builder, epochError);
    AutoBoneEpochResponse.addTotalEpochs(builder, totalEpochs);
    AutoBoneEpochResponse.addCurrentEpoch(builder, currentEpoch);
    return AutoBoneEpochResponse.endAutoBoneEpochResponse(builder);
  }

  public static void startAutoBoneEpochResponse(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addCurrentEpoch(FlatBufferBuilder builder, long currentEpoch) { builder.addInt(0, (int) currentEpoch, (int) 0L); }
  public static void addTotalEpochs(FlatBufferBuilder builder, long totalEpochs) { builder.addInt(1, (int) totalEpochs, (int) 0L); }
  public static void addEpochError(FlatBufferBuilder builder, float epochError) { builder.addFloat(2, epochError, 0.0f); }
  public static void addAdjustedSkeletonParts(FlatBufferBuilder builder, int adjustedSkeletonPartsOffset) { builder.addOffset(3, adjustedSkeletonPartsOffset, 0); }
  public static int createAdjustedSkeletonPartsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAdjustedSkeletonPartsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAutoBoneEpochResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AutoBoneEpochResponse get(int j) { return get(new AutoBoneEpochResponse(), j); }
    public AutoBoneEpochResponse get(AutoBoneEpochResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public AutoBoneEpochResponseT unpack() {
    AutoBoneEpochResponseT _o = new AutoBoneEpochResponseT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(AutoBoneEpochResponseT _o) {
    long _oCurrentEpoch = currentEpoch();
    _o.setCurrentEpoch(_oCurrentEpoch);
    long _oTotalEpochs = totalEpochs();
    _o.setTotalEpochs(_oTotalEpochs);
    float _oEpochError = epochError();
    _o.setEpochError(_oEpochError);
    solarxr_protocol.rpc.SkeletonPartT[] _oAdjustedSkeletonParts = new solarxr_protocol.rpc.SkeletonPartT[adjustedSkeletonPartsLength()];
    for (int _j = 0; _j < adjustedSkeletonPartsLength(); ++_j) {_oAdjustedSkeletonParts[_j] = (adjustedSkeletonParts(_j) != null ? adjustedSkeletonParts(_j).unpack() : null);}
    _o.setAdjustedSkeletonParts(_oAdjustedSkeletonParts);
  }
  public static int pack(FlatBufferBuilder builder, AutoBoneEpochResponseT _o) {
    if (_o == null) return 0;
    int _adjustedSkeletonParts = 0;
    if (_o.getAdjustedSkeletonParts() != null) {
      int[] __adjustedSkeletonParts = new int[_o.getAdjustedSkeletonParts().length];
      int _j = 0;
      for (solarxr_protocol.rpc.SkeletonPartT _e : _o.getAdjustedSkeletonParts()) { __adjustedSkeletonParts[_j] = solarxr_protocol.rpc.SkeletonPart.pack(builder, _e); _j++;}
      _adjustedSkeletonParts = createAdjustedSkeletonPartsVector(builder, __adjustedSkeletonParts);
    }
    return createAutoBoneEpochResponse(
      builder,
      _o.getCurrentEpoch(),
      _o.getTotalEpochs(),
      _o.getEpochError(),
      _adjustedSkeletonParts);
  }
}

