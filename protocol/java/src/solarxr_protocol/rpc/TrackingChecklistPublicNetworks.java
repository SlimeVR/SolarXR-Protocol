// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TrackingChecklistPublicNetworks extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static TrackingChecklistPublicNetworks getRootAsTrackingChecklistPublicNetworks(ByteBuffer _bb) { return getRootAsTrackingChecklistPublicNetworks(_bb, new TrackingChecklistPublicNetworks()); }
  public static TrackingChecklistPublicNetworks getRootAsTrackingChecklistPublicNetworks(ByteBuffer _bb, TrackingChecklistPublicNetworks obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrackingChecklistPublicNetworks __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String adapters(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int adaptersLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public StringVector adaptersVector() { return adaptersVector(new StringVector()); }
  public StringVector adaptersVector(StringVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createTrackingChecklistPublicNetworks(FlatBufferBuilder builder,
      int adaptersOffset) {
    builder.startTable(1);
    TrackingChecklistPublicNetworks.addAdapters(builder, adaptersOffset);
    return TrackingChecklistPublicNetworks.endTrackingChecklistPublicNetworks(builder);
  }

  public static void startTrackingChecklistPublicNetworks(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addAdapters(FlatBufferBuilder builder, int adaptersOffset) { builder.addOffset(0, adaptersOffset, 0); }
  public static int createAdaptersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAdaptersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTrackingChecklistPublicNetworks(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrackingChecklistPublicNetworks get(int j) { return get(new TrackingChecklistPublicNetworks(), j); }
    public TrackingChecklistPublicNetworks get(TrackingChecklistPublicNetworks obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TrackingChecklistPublicNetworksT unpack() {
    TrackingChecklistPublicNetworksT _o = new TrackingChecklistPublicNetworksT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TrackingChecklistPublicNetworksT _o) {
    String[] _oAdapters = new String[adaptersLength()];
    for (int _j = 0; _j < adaptersLength(); ++_j) {_oAdapters[_j] = adapters(_j);}
    _o.setAdapters(_oAdapters);
  }
  public static int pack(FlatBufferBuilder builder, TrackingChecklistPublicNetworksT _o) {
    if (_o == null) return 0;
    int _adapters = 0;
    if (_o.getAdapters() != null) {
      int[] __adapters = new int[_o.getAdapters().length];
      int _j = 0;
      for (String _e : _o.getAdapters()) { __adapters[_j] = builder.createString(_e); _j++;}
      _adapters = createAdaptersVector(builder, __adapters);
    }
    return createTrackingChecklistPublicNetworks(
      builder,
      _adapters);
  }
}

