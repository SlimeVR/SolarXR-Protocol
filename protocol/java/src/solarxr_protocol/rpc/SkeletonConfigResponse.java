// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SkeletonConfigResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static SkeletonConfigResponse getRootAsSkeletonConfigResponse(ByteBuffer _bb) { return getRootAsSkeletonConfigResponse(_bb, new SkeletonConfigResponse()); }
  public static SkeletonConfigResponse getRootAsSkeletonConfigResponse(ByteBuffer _bb, SkeletonConfigResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SkeletonConfigResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.rpc.SkeletonPart skeletonParts(int j) { return skeletonParts(new solarxr_protocol.rpc.SkeletonPart(), j); }
  public solarxr_protocol.rpc.SkeletonPart skeletonParts(solarxr_protocol.rpc.SkeletonPart obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int skeletonPartsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.rpc.SkeletonPart.Vector skeletonPartsVector() { return skeletonPartsVector(new solarxr_protocol.rpc.SkeletonPart.Vector()); }
  public solarxr_protocol.rpc.SkeletonPart.Vector skeletonPartsVector(solarxr_protocol.rpc.SkeletonPart.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSkeletonConfigResponse(FlatBufferBuilder builder,
      int skeletonPartsOffset) {
    builder.startTable(1);
    SkeletonConfigResponse.addSkeletonParts(builder, skeletonPartsOffset);
    return SkeletonConfigResponse.endSkeletonConfigResponse(builder);
  }

  public static void startSkeletonConfigResponse(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addSkeletonParts(FlatBufferBuilder builder, int skeletonPartsOffset) { builder.addOffset(0, skeletonPartsOffset, 0); }
  public static int createSkeletonPartsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSkeletonPartsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSkeletonConfigResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SkeletonConfigResponse get(int j) { return get(new SkeletonConfigResponse(), j); }
    public SkeletonConfigResponse get(SkeletonConfigResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SkeletonConfigResponseT unpack() {
    SkeletonConfigResponseT _o = new SkeletonConfigResponseT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SkeletonConfigResponseT _o) {
    solarxr_protocol.rpc.SkeletonPartT[] _oSkeletonParts = new solarxr_protocol.rpc.SkeletonPartT[skeletonPartsLength()];
    for (int _j = 0; _j < skeletonPartsLength(); ++_j) {_oSkeletonParts[_j] = (skeletonParts(_j) != null ? skeletonParts(_j).unpack() : null);}
    _o.setSkeletonParts(_oSkeletonParts);
  }
  public static int pack(FlatBufferBuilder builder, SkeletonConfigResponseT _o) {
    if (_o == null) return 0;
    int _skeletonParts = 0;
    if (_o.getSkeletonParts() != null) {
      int[] __skeletonParts = new int[_o.getSkeletonParts().length];
      int _j = 0;
      for (solarxr_protocol.rpc.SkeletonPartT _e : _o.getSkeletonParts()) { __skeletonParts[_j] = solarxr_protocol.rpc.SkeletonPart.pack(builder, _e); _j++;}
      _skeletonParts = createSkeletonPartsVector(builder, __skeletonParts);
    }
    return createSkeletonConfigResponse(
      builder,
      _skeletonParts);
  }
}

