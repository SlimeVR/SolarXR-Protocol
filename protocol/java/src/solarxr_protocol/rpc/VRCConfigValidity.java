// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class VRCConfigValidity extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static VRCConfigValidity getRootAsVRCConfigValidity(ByteBuffer _bb) { return getRootAsVRCConfigValidity(_bb, new VRCConfigValidity()); }
  public static VRCConfigValidity getRootAsVRCConfigValidity(ByteBuffer _bb, VRCConfigValidity obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public VRCConfigValidity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean legacyModeOk() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean shoulderTrackingOk() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean userHeightOk() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean calibrationRangeOk() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean calibrationVisualsOk() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean trackerModelOk() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean spineModeOk() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean avatarMeasurementTypeOk() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createVRCConfigValidity(FlatBufferBuilder builder,
      boolean legacyModeOk,
      boolean shoulderTrackingOk,
      boolean userHeightOk,
      boolean calibrationRangeOk,
      boolean calibrationVisualsOk,
      boolean trackerModelOk,
      boolean spineModeOk,
      boolean avatarMeasurementTypeOk) {
    builder.startTable(8);
    VRCConfigValidity.addAvatarMeasurementTypeOk(builder, avatarMeasurementTypeOk);
    VRCConfigValidity.addSpineModeOk(builder, spineModeOk);
    VRCConfigValidity.addTrackerModelOk(builder, trackerModelOk);
    VRCConfigValidity.addCalibrationVisualsOk(builder, calibrationVisualsOk);
    VRCConfigValidity.addCalibrationRangeOk(builder, calibrationRangeOk);
    VRCConfigValidity.addUserHeightOk(builder, userHeightOk);
    VRCConfigValidity.addShoulderTrackingOk(builder, shoulderTrackingOk);
    VRCConfigValidity.addLegacyModeOk(builder, legacyModeOk);
    return VRCConfigValidity.endVRCConfigValidity(builder);
  }

  public static void startVRCConfigValidity(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addLegacyModeOk(FlatBufferBuilder builder, boolean legacyModeOk) { builder.addBoolean(0, legacyModeOk, false); }
  public static void addShoulderTrackingOk(FlatBufferBuilder builder, boolean shoulderTrackingOk) { builder.addBoolean(1, shoulderTrackingOk, false); }
  public static void addUserHeightOk(FlatBufferBuilder builder, boolean userHeightOk) { builder.addBoolean(2, userHeightOk, false); }
  public static void addCalibrationRangeOk(FlatBufferBuilder builder, boolean calibrationRangeOk) { builder.addBoolean(3, calibrationRangeOk, false); }
  public static void addCalibrationVisualsOk(FlatBufferBuilder builder, boolean calibrationVisualsOk) { builder.addBoolean(4, calibrationVisualsOk, false); }
  public static void addTrackerModelOk(FlatBufferBuilder builder, boolean trackerModelOk) { builder.addBoolean(5, trackerModelOk, false); }
  public static void addSpineModeOk(FlatBufferBuilder builder, boolean spineModeOk) { builder.addBoolean(6, spineModeOk, false); }
  public static void addAvatarMeasurementTypeOk(FlatBufferBuilder builder, boolean avatarMeasurementTypeOk) { builder.addBoolean(7, avatarMeasurementTypeOk, false); }
  public static int endVRCConfigValidity(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public VRCConfigValidity get(int j) { return get(new VRCConfigValidity(), j); }
    public VRCConfigValidity get(VRCConfigValidity obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public VRCConfigValidityT unpack() {
    VRCConfigValidityT _o = new VRCConfigValidityT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(VRCConfigValidityT _o) {
    boolean _oLegacyModeOk = legacyModeOk();
    _o.setLegacyModeOk(_oLegacyModeOk);
    boolean _oShoulderTrackingOk = shoulderTrackingOk();
    _o.setShoulderTrackingOk(_oShoulderTrackingOk);
    boolean _oUserHeightOk = userHeightOk();
    _o.setUserHeightOk(_oUserHeightOk);
    boolean _oCalibrationRangeOk = calibrationRangeOk();
    _o.setCalibrationRangeOk(_oCalibrationRangeOk);
    boolean _oCalibrationVisualsOk = calibrationVisualsOk();
    _o.setCalibrationVisualsOk(_oCalibrationVisualsOk);
    boolean _oTrackerModelOk = trackerModelOk();
    _o.setTrackerModelOk(_oTrackerModelOk);
    boolean _oSpineModeOk = spineModeOk();
    _o.setSpineModeOk(_oSpineModeOk);
    boolean _oAvatarMeasurementTypeOk = avatarMeasurementTypeOk();
    _o.setAvatarMeasurementTypeOk(_oAvatarMeasurementTypeOk);
  }
  public static int pack(FlatBufferBuilder builder, VRCConfigValidityT _o) {
    if (_o == null) return 0;
    return createVRCConfigValidity(
      builder,
      _o.getLegacyModeOk(),
      _o.getShoulderTrackingOk(),
      _o.getUserHeightOk(),
      _o.getCalibrationRangeOk(),
      _o.getCalibrationVisualsOk(),
      _o.getTrackerModelOk(),
      _o.getSpineModeOk(),
      _o.getAvatarMeasurementTypeOk());
  }
}

