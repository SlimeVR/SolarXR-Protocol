// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * https://github.com/SlimeVR/SlimeVR-Server/blob/v0.8.3/server/src/main/java/dev/slimevr/config/AutoBoneConfig.kt
 */
@SuppressWarnings("unused")
public final class AutoBoneSettings extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static AutoBoneSettings getRootAsAutoBoneSettings(ByteBuffer _bb) { return getRootAsAutoBoneSettings(_bb, new AutoBoneSettings()); }
  public static AutoBoneSettings getRootAsAutoBoneSettings(ByteBuffer _bb, AutoBoneSettings obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AutoBoneSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean hasCursorIncrement() { return 0 != __offset(4); }
  public int cursorIncrement() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean hasMinDataDistance() { return 0 != __offset(6); }
  public int minDataDistance() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean hasMaxDataDistance() { return 0 != __offset(8); }
  public int maxDataDistance() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean hasNumEpochs() { return 0 != __offset(10); }
  public int numEpochs() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean hasPrintEveryNumEpochs() { return 0 != __offset(12); }
  public int printEveryNumEpochs() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean hasInitialAdjustRate() { return 0 != __offset(14); }
  public float initialAdjustRate() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasAdjustRateDecay() { return 0 != __offset(16); }
  public float adjustRateDecay() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasSlideErrorFactor() { return 0 != __offset(18); }
  public float slideErrorFactor() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasOffsetSlideErrorFactor() { return 0 != __offset(20); }
  public float offsetSlideErrorFactor() { int o = __offset(20); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasFootHeightOffsetErrorFactor() { return 0 != __offset(22); }
  public float footHeightOffsetErrorFactor() { int o = __offset(22); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasBodyProportionErrorFactor() { return 0 != __offset(24); }
  public float bodyProportionErrorFactor() { int o = __offset(24); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasHeightErrorFactor() { return 0 != __offset(26); }
  public float heightErrorFactor() { int o = __offset(26); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasPositionErrorFactor() { return 0 != __offset(28); }
  public float positionErrorFactor() { int o = __offset(28); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasPositionOffsetErrorFactor() { return 0 != __offset(30); }
  public float positionOffsetErrorFactor() { int o = __offset(30); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasCalcInitError() { return 0 != __offset(32); }
  public boolean calcInitError() { int o = __offset(32); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hasTargetHmdHeight() { return 0 != __offset(34); }
  public float targetHmdHeight() { int o = __offset(34); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasTargetFullHeight() { return 0 != __offset(36); }
  public float targetFullHeight() { int o = __offset(36); return o != 0 ? bb.getFloat(o + bb_pos) : 0f; }
  public boolean hasRandomizeFrameOrder() { return 0 != __offset(38); }
  public boolean randomizeFrameOrder() { int o = __offset(38); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hasScaleEachStep() { return 0 != __offset(40); }
  public boolean scaleEachStep() { int o = __offset(40); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hasSampleCount() { return 0 != __offset(42); }
  public int sampleCount() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean hasSampleRateMs() { return 0 != __offset(44); }
  public long sampleRateMs() { int o = __offset(44); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean hasSaveRecordings() { return 0 != __offset(46); }
  public boolean saveRecordings() { int o = __offset(46); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hasUseSkeletonHeight() { return 0 != __offset(48); }
  public boolean useSkeletonHeight() { int o = __offset(48); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean hasRandSeed() { return 0 != __offset(50); }
  public long randSeed() { int o = __offset(50); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createAutoBoneSettings(FlatBufferBuilder builder,
      int cursorIncrement,
      int minDataDistance,
      int maxDataDistance,
      int numEpochs,
      int printEveryNumEpochs,
      float initialAdjustRate,
      float adjustRateDecay,
      float slideErrorFactor,
      float offsetSlideErrorFactor,
      float footHeightOffsetErrorFactor,
      float bodyProportionErrorFactor,
      float heightErrorFactor,
      float positionErrorFactor,
      float positionOffsetErrorFactor,
      boolean calcInitError,
      float targetHmdHeight,
      float targetFullHeight,
      boolean randomizeFrameOrder,
      boolean scaleEachStep,
      int sampleCount,
      long sampleRateMs,
      boolean saveRecordings,
      boolean useSkeletonHeight,
      long randSeed) {
    builder.startTable(24);
    AutoBoneSettings.addRandSeed(builder, randSeed);
    AutoBoneSettings.addSampleRateMs(builder, sampleRateMs);
    AutoBoneSettings.addSampleCount(builder, sampleCount);
    AutoBoneSettings.addTargetFullHeight(builder, targetFullHeight);
    AutoBoneSettings.addTargetHmdHeight(builder, targetHmdHeight);
    AutoBoneSettings.addPositionOffsetErrorFactor(builder, positionOffsetErrorFactor);
    AutoBoneSettings.addPositionErrorFactor(builder, positionErrorFactor);
    AutoBoneSettings.addHeightErrorFactor(builder, heightErrorFactor);
    AutoBoneSettings.addBodyProportionErrorFactor(builder, bodyProportionErrorFactor);
    AutoBoneSettings.addFootHeightOffsetErrorFactor(builder, footHeightOffsetErrorFactor);
    AutoBoneSettings.addOffsetSlideErrorFactor(builder, offsetSlideErrorFactor);
    AutoBoneSettings.addSlideErrorFactor(builder, slideErrorFactor);
    AutoBoneSettings.addAdjustRateDecay(builder, adjustRateDecay);
    AutoBoneSettings.addInitialAdjustRate(builder, initialAdjustRate);
    AutoBoneSettings.addPrintEveryNumEpochs(builder, printEveryNumEpochs);
    AutoBoneSettings.addNumEpochs(builder, numEpochs);
    AutoBoneSettings.addMaxDataDistance(builder, maxDataDistance);
    AutoBoneSettings.addMinDataDistance(builder, minDataDistance);
    AutoBoneSettings.addCursorIncrement(builder, cursorIncrement);
    AutoBoneSettings.addUseSkeletonHeight(builder, useSkeletonHeight);
    AutoBoneSettings.addSaveRecordings(builder, saveRecordings);
    AutoBoneSettings.addScaleEachStep(builder, scaleEachStep);
    AutoBoneSettings.addRandomizeFrameOrder(builder, randomizeFrameOrder);
    AutoBoneSettings.addCalcInitError(builder, calcInitError);
    return AutoBoneSettings.endAutoBoneSettings(builder);
  }

  public static void startAutoBoneSettings(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addCursorIncrement(FlatBufferBuilder builder, int cursorIncrement) { builder.addInt(0, cursorIncrement, 0); }
  public static void addMinDataDistance(FlatBufferBuilder builder, int minDataDistance) { builder.addInt(1, minDataDistance, 0); }
  public static void addMaxDataDistance(FlatBufferBuilder builder, int maxDataDistance) { builder.addInt(2, maxDataDistance, 0); }
  public static void addNumEpochs(FlatBufferBuilder builder, int numEpochs) { builder.addInt(3, numEpochs, 0); }
  public static void addPrintEveryNumEpochs(FlatBufferBuilder builder, int printEveryNumEpochs) { builder.addInt(4, printEveryNumEpochs, 0); }
  public static void addInitialAdjustRate(FlatBufferBuilder builder, float initialAdjustRate) { builder.addFloat(5, initialAdjustRate, 0f); }
  public static void addAdjustRateDecay(FlatBufferBuilder builder, float adjustRateDecay) { builder.addFloat(6, adjustRateDecay, 0f); }
  public static void addSlideErrorFactor(FlatBufferBuilder builder, float slideErrorFactor) { builder.addFloat(7, slideErrorFactor, 0f); }
  public static void addOffsetSlideErrorFactor(FlatBufferBuilder builder, float offsetSlideErrorFactor) { builder.addFloat(8, offsetSlideErrorFactor, 0f); }
  public static void addFootHeightOffsetErrorFactor(FlatBufferBuilder builder, float footHeightOffsetErrorFactor) { builder.addFloat(9, footHeightOffsetErrorFactor, 0f); }
  public static void addBodyProportionErrorFactor(FlatBufferBuilder builder, float bodyProportionErrorFactor) { builder.addFloat(10, bodyProportionErrorFactor, 0f); }
  public static void addHeightErrorFactor(FlatBufferBuilder builder, float heightErrorFactor) { builder.addFloat(11, heightErrorFactor, 0f); }
  public static void addPositionErrorFactor(FlatBufferBuilder builder, float positionErrorFactor) { builder.addFloat(12, positionErrorFactor, 0f); }
  public static void addPositionOffsetErrorFactor(FlatBufferBuilder builder, float positionOffsetErrorFactor) { builder.addFloat(13, positionOffsetErrorFactor, 0f); }
  public static void addCalcInitError(FlatBufferBuilder builder, boolean calcInitError) { builder.addBoolean(14, calcInitError, false); }
  public static void addTargetHmdHeight(FlatBufferBuilder builder, float targetHmdHeight) { builder.addFloat(15, targetHmdHeight, 0f); }
  public static void addTargetFullHeight(FlatBufferBuilder builder, float targetFullHeight) { builder.addFloat(16, targetFullHeight, 0f); }
  public static void addRandomizeFrameOrder(FlatBufferBuilder builder, boolean randomizeFrameOrder) { builder.addBoolean(17, randomizeFrameOrder, false); }
  public static void addScaleEachStep(FlatBufferBuilder builder, boolean scaleEachStep) { builder.addBoolean(18, scaleEachStep, false); }
  public static void addSampleCount(FlatBufferBuilder builder, int sampleCount) { builder.addInt(19, sampleCount, 0); }
  public static void addSampleRateMs(FlatBufferBuilder builder, long sampleRateMs) { builder.addLong(20, sampleRateMs, 0L); }
  public static void addSaveRecordings(FlatBufferBuilder builder, boolean saveRecordings) { builder.addBoolean(21, saveRecordings, false); }
  public static void addUseSkeletonHeight(FlatBufferBuilder builder, boolean useSkeletonHeight) { builder.addBoolean(22, useSkeletonHeight, false); }
  public static void addRandSeed(FlatBufferBuilder builder, long randSeed) { builder.addLong(23, randSeed, 0L); }
  public static int endAutoBoneSettings(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AutoBoneSettings get(int j) { return get(new AutoBoneSettings(), j); }
    public AutoBoneSettings get(AutoBoneSettings obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public AutoBoneSettingsT unpack() {
    AutoBoneSettingsT _o = new AutoBoneSettingsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(AutoBoneSettingsT _o) {
    Integer _oCursorIncrement = hasCursorIncrement() ? cursorIncrement() : null;
    _o.setCursorIncrement(_oCursorIncrement);
    Integer _oMinDataDistance = hasMinDataDistance() ? minDataDistance() : null;
    _o.setMinDataDistance(_oMinDataDistance);
    Integer _oMaxDataDistance = hasMaxDataDistance() ? maxDataDistance() : null;
    _o.setMaxDataDistance(_oMaxDataDistance);
    Integer _oNumEpochs = hasNumEpochs() ? numEpochs() : null;
    _o.setNumEpochs(_oNumEpochs);
    Integer _oPrintEveryNumEpochs = hasPrintEveryNumEpochs() ? printEveryNumEpochs() : null;
    _o.setPrintEveryNumEpochs(_oPrintEveryNumEpochs);
    Float _oInitialAdjustRate = hasInitialAdjustRate() ? initialAdjustRate() : null;
    _o.setInitialAdjustRate(_oInitialAdjustRate);
    Float _oAdjustRateDecay = hasAdjustRateDecay() ? adjustRateDecay() : null;
    _o.setAdjustRateDecay(_oAdjustRateDecay);
    Float _oSlideErrorFactor = hasSlideErrorFactor() ? slideErrorFactor() : null;
    _o.setSlideErrorFactor(_oSlideErrorFactor);
    Float _oOffsetSlideErrorFactor = hasOffsetSlideErrorFactor() ? offsetSlideErrorFactor() : null;
    _o.setOffsetSlideErrorFactor(_oOffsetSlideErrorFactor);
    Float _oFootHeightOffsetErrorFactor = hasFootHeightOffsetErrorFactor() ? footHeightOffsetErrorFactor() : null;
    _o.setFootHeightOffsetErrorFactor(_oFootHeightOffsetErrorFactor);
    Float _oBodyProportionErrorFactor = hasBodyProportionErrorFactor() ? bodyProportionErrorFactor() : null;
    _o.setBodyProportionErrorFactor(_oBodyProportionErrorFactor);
    Float _oHeightErrorFactor = hasHeightErrorFactor() ? heightErrorFactor() : null;
    _o.setHeightErrorFactor(_oHeightErrorFactor);
    Float _oPositionErrorFactor = hasPositionErrorFactor() ? positionErrorFactor() : null;
    _o.setPositionErrorFactor(_oPositionErrorFactor);
    Float _oPositionOffsetErrorFactor = hasPositionOffsetErrorFactor() ? positionOffsetErrorFactor() : null;
    _o.setPositionOffsetErrorFactor(_oPositionOffsetErrorFactor);
    Boolean _oCalcInitError = hasCalcInitError() ? calcInitError() : null;
    _o.setCalcInitError(_oCalcInitError);
    Float _oTargetHmdHeight = hasTargetHmdHeight() ? targetHmdHeight() : null;
    _o.setTargetHmdHeight(_oTargetHmdHeight);
    Float _oTargetFullHeight = hasTargetFullHeight() ? targetFullHeight() : null;
    _o.setTargetFullHeight(_oTargetFullHeight);
    Boolean _oRandomizeFrameOrder = hasRandomizeFrameOrder() ? randomizeFrameOrder() : null;
    _o.setRandomizeFrameOrder(_oRandomizeFrameOrder);
    Boolean _oScaleEachStep = hasScaleEachStep() ? scaleEachStep() : null;
    _o.setScaleEachStep(_oScaleEachStep);
    Integer _oSampleCount = hasSampleCount() ? sampleCount() : null;
    _o.setSampleCount(_oSampleCount);
    Long _oSampleRateMs = hasSampleRateMs() ? sampleRateMs() : null;
    _o.setSampleRateMs(_oSampleRateMs);
    Boolean _oSaveRecordings = hasSaveRecordings() ? saveRecordings() : null;
    _o.setSaveRecordings(_oSaveRecordings);
    Boolean _oUseSkeletonHeight = hasUseSkeletonHeight() ? useSkeletonHeight() : null;
    _o.setUseSkeletonHeight(_oUseSkeletonHeight);
    Long _oRandSeed = hasRandSeed() ? randSeed() : null;
    _o.setRandSeed(_oRandSeed);
  }
  public static int pack(FlatBufferBuilder builder, AutoBoneSettingsT _o) {
    if (_o == null) return 0;
    return createAutoBoneSettings(
      builder,
      _o.getCursorIncrement(),
      _o.getMinDataDistance(),
      _o.getMaxDataDistance(),
      _o.getNumEpochs(),
      _o.getPrintEveryNumEpochs(),
      _o.getInitialAdjustRate(),
      _o.getAdjustRateDecay(),
      _o.getSlideErrorFactor(),
      _o.getOffsetSlideErrorFactor(),
      _o.getFootHeightOffsetErrorFactor(),
      _o.getBodyProportionErrorFactor(),
      _o.getHeightErrorFactor(),
      _o.getPositionErrorFactor(),
      _o.getPositionOffsetErrorFactor(),
      _o.getCalcInitError(),
      _o.getTargetHmdHeight(),
      _o.getTargetFullHeight(),
      _o.getRandomizeFrameOrder(),
      _o.getScaleEachStep(),
      _o.getSampleCount(),
      _o.getSampleRateMs(),
      _o.getSaveRecordings(),
      _o.getUseSkeletonHeight(),
      _o.getRandSeed());
  }
}

