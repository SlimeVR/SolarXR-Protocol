// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class VRCConfigValues extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static VRCConfigValues getRootAsVRCConfigValues(ByteBuffer _bb) { return getRootAsVRCConfigValues(_bb, new VRCConfigValues()); }
  public static VRCConfigValues getRootAsVRCConfigValues(ByteBuffer _bb, VRCConfigValues obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public VRCConfigValues __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean legacyMode() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean shoulderTrackingDisabled() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public float userHeight() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float calibrationRange() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean calibrationVisuals() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int trackerModel() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int spineMode() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int avatarMeasurementType() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean shoulderWidthCompensation() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createVRCConfigValues(FlatBufferBuilder builder,
      boolean legacyMode,
      boolean shoulderTrackingDisabled,
      float userHeight,
      float calibrationRange,
      boolean calibrationVisuals,
      int trackerModel,
      int spineMode,
      int avatarMeasurementType,
      boolean shoulderWidthCompensation) {
    builder.startTable(9);
    VRCConfigValues.addCalibrationRange(builder, calibrationRange);
    VRCConfigValues.addUserHeight(builder, userHeight);
    VRCConfigValues.addShoulderWidthCompensation(builder, shoulderWidthCompensation);
    VRCConfigValues.addAvatarMeasurementType(builder, avatarMeasurementType);
    VRCConfigValues.addSpineMode(builder, spineMode);
    VRCConfigValues.addTrackerModel(builder, trackerModel);
    VRCConfigValues.addCalibrationVisuals(builder, calibrationVisuals);
    VRCConfigValues.addShoulderTrackingDisabled(builder, shoulderTrackingDisabled);
    VRCConfigValues.addLegacyMode(builder, legacyMode);
    return VRCConfigValues.endVRCConfigValues(builder);
  }

  public static void startVRCConfigValues(FlatBufferBuilder builder) { builder.startTable(9); }
  public static void addLegacyMode(FlatBufferBuilder builder, boolean legacyMode) { builder.addBoolean(0, legacyMode, false); }
  public static void addShoulderTrackingDisabled(FlatBufferBuilder builder, boolean shoulderTrackingDisabled) { builder.addBoolean(1, shoulderTrackingDisabled, false); }
  public static void addUserHeight(FlatBufferBuilder builder, float userHeight) { builder.addFloat(2, userHeight, 0.0f); }
  public static void addCalibrationRange(FlatBufferBuilder builder, float calibrationRange) { builder.addFloat(3, calibrationRange, 0.0f); }
  public static void addCalibrationVisuals(FlatBufferBuilder builder, boolean calibrationVisuals) { builder.addBoolean(4, calibrationVisuals, false); }
  public static void addTrackerModel(FlatBufferBuilder builder, int trackerModel) { builder.addByte(5, (byte) trackerModel, (byte) 0); }
  public static void addSpineMode(FlatBufferBuilder builder, int spineMode) { builder.addByte(6, (byte) spineMode, (byte) 0); }
  public static void addAvatarMeasurementType(FlatBufferBuilder builder, int avatarMeasurementType) { builder.addByte(7, (byte) avatarMeasurementType, (byte) 0); }
  public static void addShoulderWidthCompensation(FlatBufferBuilder builder, boolean shoulderWidthCompensation) { builder.addBoolean(8, shoulderWidthCompensation, false); }
  public static int endVRCConfigValues(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public VRCConfigValues get(int j) { return get(new VRCConfigValues(), j); }
    public VRCConfigValues get(VRCConfigValues obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public VRCConfigValuesT unpack() {
    VRCConfigValuesT _o = new VRCConfigValuesT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(VRCConfigValuesT _o) {
    boolean _oLegacyMode = legacyMode();
    _o.setLegacyMode(_oLegacyMode);
    boolean _oShoulderTrackingDisabled = shoulderTrackingDisabled();
    _o.setShoulderTrackingDisabled(_oShoulderTrackingDisabled);
    float _oUserHeight = userHeight();
    _o.setUserHeight(_oUserHeight);
    float _oCalibrationRange = calibrationRange();
    _o.setCalibrationRange(_oCalibrationRange);
    boolean _oCalibrationVisuals = calibrationVisuals();
    _o.setCalibrationVisuals(_oCalibrationVisuals);
    int _oTrackerModel = trackerModel();
    _o.setTrackerModel(_oTrackerModel);
    int _oSpineMode = spineMode();
    _o.setSpineMode(_oSpineMode);
    int _oAvatarMeasurementType = avatarMeasurementType();
    _o.setAvatarMeasurementType(_oAvatarMeasurementType);
    boolean _oShoulderWidthCompensation = shoulderWidthCompensation();
    _o.setShoulderWidthCompensation(_oShoulderWidthCompensation);
  }
  public static int pack(FlatBufferBuilder builder, VRCConfigValuesT _o) {
    if (_o == null) return 0;
    return createVRCConfigValues(
      builder,
      _o.getLegacyMode(),
      _o.getShoulderTrackingDisabled(),
      _o.getUserHeight(),
      _o.getCalibrationRange(),
      _o.getCalibrationVisuals(),
      _o.getTrackerModel(),
      _o.getSpineMode(),
      _o.getAvatarMeasurementType(),
      _o.getShoulderWidthCompensation());
  }
}

