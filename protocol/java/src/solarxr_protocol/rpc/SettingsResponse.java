// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SettingsResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static SettingsResponse getRootAsSettingsResponse(ByteBuffer _bb) { return getRootAsSettingsResponse(_bb, new SettingsResponse()); }
  public static SettingsResponse getRootAsSettingsResponse(ByteBuffer _bb, SettingsResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SettingsResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.rpc.SteamVRTrackersSetting steamVrTrackers() { return steamVrTrackers(new solarxr_protocol.rpc.SteamVRTrackersSetting()); }
  public solarxr_protocol.rpc.SteamVRTrackersSetting steamVrTrackers(solarxr_protocol.rpc.SteamVRTrackersSetting obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public solarxr_protocol.rpc.FilteringSettings filtering() { return filtering(new solarxr_protocol.rpc.FilteringSettings()); }
  public solarxr_protocol.rpc.FilteringSettings filtering(solarxr_protocol.rpc.FilteringSettings obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public solarxr_protocol.rpc.settings.ModelSettings modelSettings() { return modelSettings(new solarxr_protocol.rpc.settings.ModelSettings()); }
  public solarxr_protocol.rpc.settings.ModelSettings modelSettings(solarxr_protocol.rpc.settings.ModelSettings obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createSettingsResponse(FlatBufferBuilder builder,
      int steamVrTrackersOffset,
      int filteringOffset,
      int modelSettingsOffset) {
    builder.startTable(3);
    SettingsResponse.addModelSettings(builder, modelSettingsOffset);
    SettingsResponse.addFiltering(builder, filteringOffset);
    SettingsResponse.addSteamVrTrackers(builder, steamVrTrackersOffset);
    return SettingsResponse.endSettingsResponse(builder);
  }

  public static void startSettingsResponse(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addSteamVrTrackers(FlatBufferBuilder builder, int steamVrTrackersOffset) { builder.addOffset(0, steamVrTrackersOffset, 0); }
  public static void addFiltering(FlatBufferBuilder builder, int filteringOffset) { builder.addOffset(1, filteringOffset, 0); }
  public static void addModelSettings(FlatBufferBuilder builder, int modelSettingsOffset) { builder.addOffset(2, modelSettingsOffset, 0); }
  public static int endSettingsResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SettingsResponse get(int j) { return get(new SettingsResponse(), j); }
    public SettingsResponse get(SettingsResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SettingsResponseT unpack() {
    SettingsResponseT _o = new SettingsResponseT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SettingsResponseT _o) {
    if (steamVrTrackers() != null) _o.setSteamVrTrackers(steamVrTrackers().unpack());
    else _o.setSteamVrTrackers(null);
    if (filtering() != null) _o.setFiltering(filtering().unpack());
    else _o.setFiltering(null);
    if (modelSettings() != null) _o.setModelSettings(modelSettings().unpack());
    else _o.setModelSettings(null);
  }
  public static int pack(FlatBufferBuilder builder, SettingsResponseT _o) {
    if (_o == null) return 0;
    int _steamVrTrackers = _o.getSteamVrTrackers() == null ? 0 : solarxr_protocol.rpc.SteamVRTrackersSetting.pack(builder, _o.getSteamVrTrackers());
    int _filtering = _o.getFiltering() == null ? 0 : solarxr_protocol.rpc.FilteringSettings.pack(builder, _o.getFiltering());
    int _modelSettings = _o.getModelSettings() == null ? 0 : solarxr_protocol.rpc.settings.ModelSettings.pack(builder, _o.getModelSettings());
    return createSettingsResponse(
      builder,
      _steamVrTrackers,
      _filtering,
      _modelSettings);
  }
}

