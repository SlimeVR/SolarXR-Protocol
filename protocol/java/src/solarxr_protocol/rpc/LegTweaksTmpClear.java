// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Clears the legtweaks temprorary state back to what the config has.
 * Setting a field to `true` will reset that field.
 */
@SuppressWarnings("unused")
public final class LegTweaksTmpClear extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static LegTweaksTmpClear getRootAsLegTweaksTmpClear(ByteBuffer _bb) { return getRootAsLegTweaksTmpClear(_bb, new LegTweaksTmpClear()); }
  public static LegTweaksTmpClear getRootAsLegTweaksTmpClear(ByteBuffer _bb, LegTweaksTmpClear obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LegTweaksTmpClear __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean floorClip() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean skatingCorrection() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean toeSnap() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean footPlant() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createLegTweaksTmpClear(FlatBufferBuilder builder,
      boolean floorClip,
      boolean skatingCorrection,
      boolean toeSnap,
      boolean footPlant) {
    builder.startTable(4);
    LegTweaksTmpClear.addFootPlant(builder, footPlant);
    LegTweaksTmpClear.addToeSnap(builder, toeSnap);
    LegTweaksTmpClear.addSkatingCorrection(builder, skatingCorrection);
    LegTweaksTmpClear.addFloorClip(builder, floorClip);
    return LegTweaksTmpClear.endLegTweaksTmpClear(builder);
  }

  public static void startLegTweaksTmpClear(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addFloorClip(FlatBufferBuilder builder, boolean floorClip) { builder.addBoolean(0, floorClip, false); }
  public static void addSkatingCorrection(FlatBufferBuilder builder, boolean skatingCorrection) { builder.addBoolean(1, skatingCorrection, false); }
  public static void addToeSnap(FlatBufferBuilder builder, boolean toeSnap) { builder.addBoolean(2, toeSnap, false); }
  public static void addFootPlant(FlatBufferBuilder builder, boolean footPlant) { builder.addBoolean(3, footPlant, false); }
  public static int endLegTweaksTmpClear(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LegTweaksTmpClear get(int j) { return get(new LegTweaksTmpClear(), j); }
    public LegTweaksTmpClear get(LegTweaksTmpClear obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public LegTweaksTmpClearT unpack() {
    LegTweaksTmpClearT _o = new LegTweaksTmpClearT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(LegTweaksTmpClearT _o) {
    boolean _oFloorClip = floorClip();
    _o.setFloorClip(_oFloorClip);
    boolean _oSkatingCorrection = skatingCorrection();
    _o.setSkatingCorrection(_oSkatingCorrection);
    boolean _oToeSnap = toeSnap();
    _o.setToeSnap(_oToeSnap);
    boolean _oFootPlant = footPlant();
    _o.setFootPlant(_oFootPlant);
  }
  public static int pack(FlatBufferBuilder builder, LegTweaksTmpClearT _o) {
    if (_o == null) return 0;
    return createLegTweaksTmpClear(
      builder,
      _o.getFloorClip(),
      _o.getSkatingCorrection(),
      _o.getToeSnap(),
      _o.getFootPlant());
  }
}

