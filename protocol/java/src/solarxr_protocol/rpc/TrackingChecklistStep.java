// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TrackingChecklistStep extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static TrackingChecklistStep getRootAsTrackingChecklistStep(ByteBuffer _bb) { return getRootAsTrackingChecklistStep(_bb, new TrackingChecklistStep()); }
  public static TrackingChecklistStep getRootAsTrackingChecklistStep(ByteBuffer _bb, TrackingChecklistStep obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrackingChecklistStep __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean valid() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean enabled() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int visibility() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean optional() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean ignorable() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public byte extraDataType() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table extraData(Table obj) { int o = __offset(18); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createTrackingChecklistStep(FlatBufferBuilder builder,
      int id,
      boolean valid,
      boolean enabled,
      int visibility,
      boolean optional,
      boolean ignorable,
      byte extraDataType,
      int extraDataOffset) {
    builder.startTable(8);
    TrackingChecklistStep.addExtraData(builder, extraDataOffset);
    TrackingChecklistStep.addExtraDataType(builder, extraDataType);
    TrackingChecklistStep.addIgnorable(builder, ignorable);
    TrackingChecklistStep.addOptional(builder, optional);
    TrackingChecklistStep.addVisibility(builder, visibility);
    TrackingChecklistStep.addEnabled(builder, enabled);
    TrackingChecklistStep.addValid(builder, valid);
    TrackingChecklistStep.addId(builder, id);
    return TrackingChecklistStep.endTrackingChecklistStep(builder);
  }

  public static void startTrackingChecklistStep(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addByte(0, (byte) id, (byte) 0); }
  public static void addValid(FlatBufferBuilder builder, boolean valid) { builder.addBoolean(1, valid, false); }
  public static void addEnabled(FlatBufferBuilder builder, boolean enabled) { builder.addBoolean(2, enabled, false); }
  public static void addVisibility(FlatBufferBuilder builder, int visibility) { builder.addByte(3, (byte) visibility, (byte) 0); }
  public static void addOptional(FlatBufferBuilder builder, boolean optional) { builder.addBoolean(4, optional, false); }
  public static void addIgnorable(FlatBufferBuilder builder, boolean ignorable) { builder.addBoolean(5, ignorable, false); }
  public static void addExtraDataType(FlatBufferBuilder builder, byte extraDataType) { builder.addByte(6, extraDataType, 0); }
  public static void addExtraData(FlatBufferBuilder builder, int extraDataOffset) { builder.addOffset(7, extraDataOffset, 0); }
  public static int endTrackingChecklistStep(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrackingChecklistStep get(int j) { return get(new TrackingChecklistStep(), j); }
    public TrackingChecklistStep get(TrackingChecklistStep obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TrackingChecklistStepT unpack() {
    TrackingChecklistStepT _o = new TrackingChecklistStepT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TrackingChecklistStepT _o) {
    int _oId = id();
    _o.setId(_oId);
    boolean _oValid = valid();
    _o.setValid(_oValid);
    boolean _oEnabled = enabled();
    _o.setEnabled(_oEnabled);
    int _oVisibility = visibility();
    _o.setVisibility(_oVisibility);
    boolean _oOptional = optional();
    _o.setOptional(_oOptional);
    boolean _oIgnorable = ignorable();
    _o.setIgnorable(_oIgnorable);
    solarxr_protocol.rpc.TrackingChecklistExtraDataUnion _oExtraData = new solarxr_protocol.rpc.TrackingChecklistExtraDataUnion();
    byte _oExtraDataType = extraDataType();
    _oExtraData.setType(_oExtraDataType);
    Table _oExtraDataValue;
    switch (_oExtraDataType) {
      case solarxr_protocol.rpc.TrackingChecklistExtraData.TrackingChecklistTrackerReset:
        _oExtraDataValue = extraData(new solarxr_protocol.rpc.TrackingChecklistTrackerReset());
        _oExtraData.setValue(_oExtraDataValue != null ? ((solarxr_protocol.rpc.TrackingChecklistTrackerReset) _oExtraDataValue).unpack() : null);
        break;
      case solarxr_protocol.rpc.TrackingChecklistExtraData.TrackingChecklistTrackerError:
        _oExtraDataValue = extraData(new solarxr_protocol.rpc.TrackingChecklistTrackerError());
        _oExtraData.setValue(_oExtraDataValue != null ? ((solarxr_protocol.rpc.TrackingChecklistTrackerError) _oExtraDataValue).unpack() : null);
        break;
      case solarxr_protocol.rpc.TrackingChecklistExtraData.TrackingChecklistSteamVRDisconnected:
        _oExtraDataValue = extraData(new solarxr_protocol.rpc.TrackingChecklistSteamVRDisconnected());
        _oExtraData.setValue(_oExtraDataValue != null ? ((solarxr_protocol.rpc.TrackingChecklistSteamVRDisconnected) _oExtraDataValue).unpack() : null);
        break;
      case solarxr_protocol.rpc.TrackingChecklistExtraData.TrackingChecklistUnassignedHMD:
        _oExtraDataValue = extraData(new solarxr_protocol.rpc.TrackingChecklistUnassignedHMD());
        _oExtraData.setValue(_oExtraDataValue != null ? ((solarxr_protocol.rpc.TrackingChecklistUnassignedHMD) _oExtraDataValue).unpack() : null);
        break;
      case solarxr_protocol.rpc.TrackingChecklistExtraData.TrackingChecklistNeedCalibration:
        _oExtraDataValue = extraData(new solarxr_protocol.rpc.TrackingChecklistNeedCalibration());
        _oExtraData.setValue(_oExtraDataValue != null ? ((solarxr_protocol.rpc.TrackingChecklistNeedCalibration) _oExtraDataValue).unpack() : null);
        break;
      case solarxr_protocol.rpc.TrackingChecklistExtraData.TrackingChecklistPublicNetworks:
        _oExtraDataValue = extraData(new solarxr_protocol.rpc.TrackingChecklistPublicNetworks());
        _oExtraData.setValue(_oExtraDataValue != null ? ((solarxr_protocol.rpc.TrackingChecklistPublicNetworks) _oExtraDataValue).unpack() : null);
        break;
      default: break;
    }
    _o.setExtraData(_oExtraData);
  }
  public static int pack(FlatBufferBuilder builder, TrackingChecklistStepT _o) {
    if (_o == null) return 0;
    byte _extraDataType = _o.getExtraData() == null ? solarxr_protocol.rpc.TrackingChecklistExtraData.NONE : _o.getExtraData().getType();
    int _extraData = _o.getExtraData() == null ? 0 : solarxr_protocol.rpc.TrackingChecklistExtraDataUnion.pack(builder, _o.getExtraData());
    return createTrackingChecklistStep(
      builder,
      _o.getId(),
      _o.getValid(),
      _o.getEnabled(),
      _o.getVisibility(),
      _o.getOptional(),
      _o.getIgnorable(),
      _extraDataType,
      _extraData);
  }
}

