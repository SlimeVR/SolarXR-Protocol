// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FkSettings extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FkSettings getRootAsFkSettings(ByteBuffer _bb) { return getRootAsFkSettings(_bb, new FkSettings()); }
  public static FkSettings getRootAsFkSettings(ByteBuffer _bb, FkSettings obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FkSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public solarxr_protocol.rpc.FkSkeletonToggle toggles(int j) { return toggles(new solarxr_protocol.rpc.FkSkeletonToggle(), j); }
  public solarxr_protocol.rpc.FkSkeletonToggle toggles(solarxr_protocol.rpc.FkSkeletonToggle obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int togglesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.rpc.FkSkeletonToggle.Vector togglesVector() { return togglesVector(new solarxr_protocol.rpc.FkSkeletonToggle.Vector()); }
  public solarxr_protocol.rpc.FkSkeletonToggle.Vector togglesVector(solarxr_protocol.rpc.FkSkeletonToggle.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public solarxr_protocol.rpc.FkSkeletonValue values(int j) { return values(new solarxr_protocol.rpc.FkSkeletonValue(), j); }
  public solarxr_protocol.rpc.FkSkeletonValue values(solarxr_protocol.rpc.FkSkeletonValue obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int valuesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public solarxr_protocol.rpc.FkSkeletonValue.Vector valuesVector() { return valuesVector(new solarxr_protocol.rpc.FkSkeletonValue.Vector()); }
  public solarxr_protocol.rpc.FkSkeletonValue.Vector valuesVector(solarxr_protocol.rpc.FkSkeletonValue.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createFkSettings(FlatBufferBuilder builder,
      int togglesOffset,
      int valuesOffset) {
    builder.startTable(2);
    FkSettings.addValues(builder, valuesOffset);
    FkSettings.addToggles(builder, togglesOffset);
    return FkSettings.endFkSettings(builder);
  }

  public static void startFkSettings(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addToggles(FlatBufferBuilder builder, int togglesOffset) { builder.addOffset(0, togglesOffset, 0); }
  public static int createTogglesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTogglesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(1, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFkSettings(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FkSettings get(int j) { return get(new FkSettings(), j); }
    public FkSettings get(FkSettings obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FkSettingsT unpack() {
    FkSettingsT _o = new FkSettingsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FkSettingsT _o) {
    solarxr_protocol.rpc.FkSkeletonToggleT[] _oToggles = new solarxr_protocol.rpc.FkSkeletonToggleT[togglesLength()];
    for (int _j = 0; _j < togglesLength(); ++_j) {_oToggles[_j] = (toggles(_j) != null ? toggles(_j).unpack() : null);}
    _o.setToggles(_oToggles);
    solarxr_protocol.rpc.FkSkeletonValueT[] _oValues = new solarxr_protocol.rpc.FkSkeletonValueT[valuesLength()];
    for (int _j = 0; _j < valuesLength(); ++_j) {_oValues[_j] = (values(_j) != null ? values(_j).unpack() : null);}
    _o.setValues(_oValues);
  }
  public static int pack(FlatBufferBuilder builder, FkSettingsT _o) {
    if (_o == null) return 0;
    int _toggles = 0;
    if (_o.getToggles() != null) {
      int[] __toggles = new int[_o.getToggles().length];
      int _j = 0;
      for (solarxr_protocol.rpc.FkSkeletonToggleT _e : _o.getToggles()) { __toggles[_j] = solarxr_protocol.rpc.FkSkeletonToggle.pack(builder, _e); _j++;}
      _toggles = createTogglesVector(builder, __toggles);
    }
    int _values = 0;
    if (_o.getValues() != null) {
      int[] __values = new int[_o.getValues().length];
      int _j = 0;
      for (solarxr_protocol.rpc.FkSkeletonValueT _e : _o.getValues()) { __values[_j] = solarxr_protocol.rpc.FkSkeletonValue.pack(builder, _e); _j++;}
      _values = createValuesVector(builder, __values);
    }
    return createFkSettings(
      builder,
      _toggles,
      _values);
  }
}

