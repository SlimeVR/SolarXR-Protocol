// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.data_feed.tracker;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * Static description of a tracker
 */
@SuppressWarnings("unused")
public final class TrackerInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_22_10_26(); }
  public static TrackerInfo getRootAsTrackerInfo(ByteBuffer _bb) { return getRootAsTrackerInfo(_bb, new TrackerInfo()); }
  public static TrackerInfo getRootAsTrackerInfo(ByteBuffer _bb, TrackerInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrackerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int imuType() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  /**
   * The user-assigned role of the tracker.
   */
  public int bodyPart() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * average samples per second
   */
  public solarxr_protocol.datatypes.HzF32 pollRate() { return pollRate(new solarxr_protocol.datatypes.HzF32()); }
  public solarxr_protocol.datatypes.HzF32 pollRate(solarxr_protocol.datatypes.HzF32 obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * The orientation of the tracker when mounted on the body
   */
  public solarxr_protocol.datatypes.math.Quat mountingOrientation() { return mountingOrientation(new solarxr_protocol.datatypes.math.Quat()); }
  public solarxr_protocol.datatypes.math.Quat mountingOrientation(solarxr_protocol.datatypes.math.Quat obj) { int o = __offset(10); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public boolean editable() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean computed() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * A human-friendly name to display as the name of the tracker.
   */
  public String displayName() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer displayNameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer displayNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * name to display as the name of the tracker set by the user
   */
  public String customName() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer customNameAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer customNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }

  public static void startTrackerInfo(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addImuType(FlatBufferBuilder builder, int imuType) { builder.addShort(0, (short) imuType, (short) 0); }
  public static void addBodyPart(FlatBufferBuilder builder, int bodyPart) { builder.addByte(1, (byte) bodyPart, (byte) 0); }
  public static void addPollRate(FlatBufferBuilder builder, int pollRateOffset) { builder.addStruct(2, pollRateOffset, 0); }
  public static void addMountingOrientation(FlatBufferBuilder builder, int mountingOrientationOffset) { builder.addStruct(3, mountingOrientationOffset, 0); }
  public static void addEditable(FlatBufferBuilder builder, boolean editable) { builder.addBoolean(4, editable, false); }
  public static void addComputed(FlatBufferBuilder builder, boolean computed) { builder.addBoolean(5, computed, false); }
  public static void addDisplayName(FlatBufferBuilder builder, int displayNameOffset) { builder.addOffset(6, displayNameOffset, 0); }
  public static void addCustomName(FlatBufferBuilder builder, int customNameOffset) { builder.addOffset(7, customNameOffset, 0); }
  public static int endTrackerInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrackerInfo get(int j) { return get(new TrackerInfo(), j); }
    public TrackerInfo get(TrackerInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TrackerInfoT unpack() {
    TrackerInfoT _o = new TrackerInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TrackerInfoT _o) {
    int _oImuType = imuType();
    _o.setImuType(_oImuType);
    int _oBodyPart = bodyPart();
    _o.setBodyPart(_oBodyPart);
    if (pollRate() != null) pollRate().unpackTo(_o.getPollRate());
    else _o.setPollRate(null);
    if (mountingOrientation() != null) mountingOrientation().unpackTo(_o.getMountingOrientation());
    else _o.setMountingOrientation(null);
    boolean _oEditable = editable();
    _o.setEditable(_oEditable);
    boolean _oComputed = computed();
    _o.setComputed(_oComputed);
    String _oDisplayName = displayName();
    _o.setDisplayName(_oDisplayName);
    String _oCustomName = customName();
    _o.setCustomName(_oCustomName);
  }
  public static int pack(FlatBufferBuilder builder, TrackerInfoT _o) {
    if (_o == null) return 0;
    int _displayName = _o.getDisplayName() == null ? 0 : builder.createString(_o.getDisplayName());
    int _customName = _o.getCustomName() == null ? 0 : builder.createString(_o.getCustomName());
    startTrackerInfo(builder);
    addImuType(builder, _o.getImuType());
    addBodyPart(builder, _o.getBodyPart());
    addPollRate(builder, solarxr_protocol.datatypes.HzF32.pack(builder, _o.getPollRate()));
    addMountingOrientation(builder, solarxr_protocol.datatypes.math.Quat.pack(builder, _o.getMountingOrientation()));
    addEditable(builder, _o.getEditable());
    addComputed(builder, _o.getComputed());
    addDisplayName(builder, _displayName);
    addCustomName(builder, _customName);
    return endTrackerInfo(builder);
  }
}

