// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ALL_H_
#define FLATBUFFERS_GENERATED_ALL_H_

#include "flatbuffers/flatbuffers.h"

#include "datatypes_generated.h"
#include "data_feed_generated.h"
#include "hardware_info_generated.h"
#include "imu_generated.h"
#include "math_generated.h"
#include "rpc_generated.h"

struct InboundPacket;
struct InboundPacketBuilder;

struct OutboundPacket;
struct OutboundPacketBuilder;

enum class InboundUnion : uint8_t {
  NONE = 0,
  slimevr_protocol_rpc_HeartbeatRequest = 1,
  slimevr_protocol_rpc_ResetRequest = 2,
  slimevr_protocol_rpc_AssignTrackerRequest = 3,
  slimevr_protocol_rpc_SettingsRequest = 4,
  slimevr_protocol_rpc_ChangeSettingsRequest = 5,
  slimevr_protocol_data_feed_PollDeviceStatus = 6,
  slimevr_protocol_data_feed_DataFeedRequest = 7,
  slimevr_protocol_data_feed_DataFeedNotify = 8,
  slimevr_protocol_data_feed_DeviceStatus = 9,
  slimevr_protocol_data_feed_DataFeed = 10,
  MIN = NONE,
  MAX = slimevr_protocol_data_feed_DataFeed
};

inline const InboundUnion (&EnumValuesInboundUnion())[11] {
  static const InboundUnion values[] = {
    InboundUnion::NONE,
    InboundUnion::slimevr_protocol_rpc_HeartbeatRequest,
    InboundUnion::slimevr_protocol_rpc_ResetRequest,
    InboundUnion::slimevr_protocol_rpc_AssignTrackerRequest,
    InboundUnion::slimevr_protocol_rpc_SettingsRequest,
    InboundUnion::slimevr_protocol_rpc_ChangeSettingsRequest,
    InboundUnion::slimevr_protocol_data_feed_PollDeviceStatus,
    InboundUnion::slimevr_protocol_data_feed_DataFeedRequest,
    InboundUnion::slimevr_protocol_data_feed_DataFeedNotify,
    InboundUnion::slimevr_protocol_data_feed_DeviceStatus,
    InboundUnion::slimevr_protocol_data_feed_DataFeed
  };
  return values;
}

inline const char * const *EnumNamesInboundUnion() {
  static const char * const names[12] = {
    "NONE",
    "slimevr_protocol_rpc_HeartbeatRequest",
    "slimevr_protocol_rpc_ResetRequest",
    "slimevr_protocol_rpc_AssignTrackerRequest",
    "slimevr_protocol_rpc_SettingsRequest",
    "slimevr_protocol_rpc_ChangeSettingsRequest",
    "slimevr_protocol_data_feed_PollDeviceStatus",
    "slimevr_protocol_data_feed_DataFeedRequest",
    "slimevr_protocol_data_feed_DataFeedNotify",
    "slimevr_protocol_data_feed_DeviceStatus",
    "slimevr_protocol_data_feed_DataFeed",
    nullptr
  };
  return names;
}

inline const char *EnumNameInboundUnion(InboundUnion e) {
  if (flatbuffers::IsOutRange(e, InboundUnion::NONE, InboundUnion::slimevr_protocol_data_feed_DataFeed)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesInboundUnion()[index];
}

template<typename T> struct InboundUnionTraits {
  static const InboundUnion enum_value = InboundUnion::NONE;
};

template<> struct InboundUnionTraits<slimevr_protocol::rpc::HeartbeatRequest> {
  static const InboundUnion enum_value = InboundUnion::slimevr_protocol_rpc_HeartbeatRequest;
};

template<> struct InboundUnionTraits<slimevr_protocol::rpc::ResetRequest> {
  static const InboundUnion enum_value = InboundUnion::slimevr_protocol_rpc_ResetRequest;
};

template<> struct InboundUnionTraits<slimevr_protocol::rpc::AssignTrackerRequest> {
  static const InboundUnion enum_value = InboundUnion::slimevr_protocol_rpc_AssignTrackerRequest;
};

template<> struct InboundUnionTraits<slimevr_protocol::rpc::SettingsRequest> {
  static const InboundUnion enum_value = InboundUnion::slimevr_protocol_rpc_SettingsRequest;
};

template<> struct InboundUnionTraits<slimevr_protocol::rpc::ChangeSettingsRequest> {
  static const InboundUnion enum_value = InboundUnion::slimevr_protocol_rpc_ChangeSettingsRequest;
};

template<> struct InboundUnionTraits<slimevr_protocol::data_feed::PollDeviceStatus> {
  static const InboundUnion enum_value = InboundUnion::slimevr_protocol_data_feed_PollDeviceStatus;
};

template<> struct InboundUnionTraits<slimevr_protocol::data_feed::DataFeedRequest> {
  static const InboundUnion enum_value = InboundUnion::slimevr_protocol_data_feed_DataFeedRequest;
};

template<> struct InboundUnionTraits<slimevr_protocol::data_feed::DataFeedNotify> {
  static const InboundUnion enum_value = InboundUnion::slimevr_protocol_data_feed_DataFeedNotify;
};

template<> struct InboundUnionTraits<slimevr_protocol::data_feed::DeviceStatus> {
  static const InboundUnion enum_value = InboundUnion::slimevr_protocol_data_feed_DeviceStatus;
};

template<> struct InboundUnionTraits<slimevr_protocol::data_feed::DataFeed> {
  static const InboundUnion enum_value = InboundUnion::slimevr_protocol_data_feed_DataFeed;
};

bool VerifyInboundUnion(flatbuffers::Verifier &verifier, const void *obj, InboundUnion type);
bool VerifyInboundUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<InboundUnion> *types);

enum class OutboundUnion : uint8_t {
  NONE = 0,
  slimevr_protocol_rpc_HeartbeatRequest = 1,
  slimevr_protocol_rpc_SettingsResponse = 2,
  slimevr_protocol_data_feed_PollDeviceStatus = 3,
  slimevr_protocol_data_feed_DataFeedRequest = 4,
  slimevr_protocol_data_feed_DataFeedNotify = 5,
  slimevr_protocol_data_feed_DeviceStatus = 6,
  slimevr_protocol_data_feed_DataFeed = 7,
  MIN = NONE,
  MAX = slimevr_protocol_data_feed_DataFeed
};

inline const OutboundUnion (&EnumValuesOutboundUnion())[8] {
  static const OutboundUnion values[] = {
    OutboundUnion::NONE,
    OutboundUnion::slimevr_protocol_rpc_HeartbeatRequest,
    OutboundUnion::slimevr_protocol_rpc_SettingsResponse,
    OutboundUnion::slimevr_protocol_data_feed_PollDeviceStatus,
    OutboundUnion::slimevr_protocol_data_feed_DataFeedRequest,
    OutboundUnion::slimevr_protocol_data_feed_DataFeedNotify,
    OutboundUnion::slimevr_protocol_data_feed_DeviceStatus,
    OutboundUnion::slimevr_protocol_data_feed_DataFeed
  };
  return values;
}

inline const char * const *EnumNamesOutboundUnion() {
  static const char * const names[9] = {
    "NONE",
    "slimevr_protocol_rpc_HeartbeatRequest",
    "slimevr_protocol_rpc_SettingsResponse",
    "slimevr_protocol_data_feed_PollDeviceStatus",
    "slimevr_protocol_data_feed_DataFeedRequest",
    "slimevr_protocol_data_feed_DataFeedNotify",
    "slimevr_protocol_data_feed_DeviceStatus",
    "slimevr_protocol_data_feed_DataFeed",
    nullptr
  };
  return names;
}

inline const char *EnumNameOutboundUnion(OutboundUnion e) {
  if (flatbuffers::IsOutRange(e, OutboundUnion::NONE, OutboundUnion::slimevr_protocol_data_feed_DataFeed)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOutboundUnion()[index];
}

template<typename T> struct OutboundUnionTraits {
  static const OutboundUnion enum_value = OutboundUnion::NONE;
};

template<> struct OutboundUnionTraits<slimevr_protocol::rpc::HeartbeatRequest> {
  static const OutboundUnion enum_value = OutboundUnion::slimevr_protocol_rpc_HeartbeatRequest;
};

template<> struct OutboundUnionTraits<slimevr_protocol::rpc::SettingsResponse> {
  static const OutboundUnion enum_value = OutboundUnion::slimevr_protocol_rpc_SettingsResponse;
};

template<> struct OutboundUnionTraits<slimevr_protocol::data_feed::PollDeviceStatus> {
  static const OutboundUnion enum_value = OutboundUnion::slimevr_protocol_data_feed_PollDeviceStatus;
};

template<> struct OutboundUnionTraits<slimevr_protocol::data_feed::DataFeedRequest> {
  static const OutboundUnion enum_value = OutboundUnion::slimevr_protocol_data_feed_DataFeedRequest;
};

template<> struct OutboundUnionTraits<slimevr_protocol::data_feed::DataFeedNotify> {
  static const OutboundUnion enum_value = OutboundUnion::slimevr_protocol_data_feed_DataFeedNotify;
};

template<> struct OutboundUnionTraits<slimevr_protocol::data_feed::DeviceStatus> {
  static const OutboundUnion enum_value = OutboundUnion::slimevr_protocol_data_feed_DeviceStatus;
};

template<> struct OutboundUnionTraits<slimevr_protocol::data_feed::DataFeed> {
  static const OutboundUnion enum_value = OutboundUnion::slimevr_protocol_data_feed_DataFeed;
};

bool VerifyOutboundUnion(flatbuffers::Verifier &verifier, const void *obj, OutboundUnion type);
bool VerifyOutboundUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<OutboundUnion> *types);

struct InboundPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InboundPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACKNOWLEDGE_ME = 4,
    VT_PACKET_TYPE = 6,
    VT_PACKET = 8
  };
  bool acknowledge_me() const {
    return GetField<uint8_t>(VT_ACKNOWLEDGE_ME, 0) != 0;
  }
  InboundUnion packet_type() const {
    return static_cast<InboundUnion>(GetField<uint8_t>(VT_PACKET_TYPE, 0));
  }
  const void *packet() const {
    return GetPointer<const void *>(VT_PACKET);
  }
  template<typename T> const T *packet_as() const;
  const slimevr_protocol::rpc::HeartbeatRequest *packet_as_slimevr_protocol_rpc_HeartbeatRequest() const {
    return packet_type() == InboundUnion::slimevr_protocol_rpc_HeartbeatRequest ? static_cast<const slimevr_protocol::rpc::HeartbeatRequest *>(packet()) : nullptr;
  }
  const slimevr_protocol::rpc::ResetRequest *packet_as_slimevr_protocol_rpc_ResetRequest() const {
    return packet_type() == InboundUnion::slimevr_protocol_rpc_ResetRequest ? static_cast<const slimevr_protocol::rpc::ResetRequest *>(packet()) : nullptr;
  }
  const slimevr_protocol::rpc::AssignTrackerRequest *packet_as_slimevr_protocol_rpc_AssignTrackerRequest() const {
    return packet_type() == InboundUnion::slimevr_protocol_rpc_AssignTrackerRequest ? static_cast<const slimevr_protocol::rpc::AssignTrackerRequest *>(packet()) : nullptr;
  }
  const slimevr_protocol::rpc::SettingsRequest *packet_as_slimevr_protocol_rpc_SettingsRequest() const {
    return packet_type() == InboundUnion::slimevr_protocol_rpc_SettingsRequest ? static_cast<const slimevr_protocol::rpc::SettingsRequest *>(packet()) : nullptr;
  }
  const slimevr_protocol::rpc::ChangeSettingsRequest *packet_as_slimevr_protocol_rpc_ChangeSettingsRequest() const {
    return packet_type() == InboundUnion::slimevr_protocol_rpc_ChangeSettingsRequest ? static_cast<const slimevr_protocol::rpc::ChangeSettingsRequest *>(packet()) : nullptr;
  }
  const slimevr_protocol::data_feed::PollDeviceStatus *packet_as_slimevr_protocol_data_feed_PollDeviceStatus() const {
    return packet_type() == InboundUnion::slimevr_protocol_data_feed_PollDeviceStatus ? static_cast<const slimevr_protocol::data_feed::PollDeviceStatus *>(packet()) : nullptr;
  }
  const slimevr_protocol::data_feed::DataFeedRequest *packet_as_slimevr_protocol_data_feed_DataFeedRequest() const {
    return packet_type() == InboundUnion::slimevr_protocol_data_feed_DataFeedRequest ? static_cast<const slimevr_protocol::data_feed::DataFeedRequest *>(packet()) : nullptr;
  }
  const slimevr_protocol::data_feed::DataFeedNotify *packet_as_slimevr_protocol_data_feed_DataFeedNotify() const {
    return packet_type() == InboundUnion::slimevr_protocol_data_feed_DataFeedNotify ? static_cast<const slimevr_protocol::data_feed::DataFeedNotify *>(packet()) : nullptr;
  }
  const slimevr_protocol::data_feed::DeviceStatus *packet_as_slimevr_protocol_data_feed_DeviceStatus() const {
    return packet_type() == InboundUnion::slimevr_protocol_data_feed_DeviceStatus ? static_cast<const slimevr_protocol::data_feed::DeviceStatus *>(packet()) : nullptr;
  }
  const slimevr_protocol::data_feed::DataFeed *packet_as_slimevr_protocol_data_feed_DataFeed() const {
    return packet_type() == InboundUnion::slimevr_protocol_data_feed_DataFeed ? static_cast<const slimevr_protocol::data_feed::DataFeed *>(packet()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ACKNOWLEDGE_ME, 1) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_TYPE, 1) &&
           VerifyOffset(verifier, VT_PACKET) &&
           VerifyInboundUnion(verifier, packet(), packet_type()) &&
           verifier.EndTable();
  }
};

template<> inline const slimevr_protocol::rpc::HeartbeatRequest *InboundPacket::packet_as<slimevr_protocol::rpc::HeartbeatRequest>() const {
  return packet_as_slimevr_protocol_rpc_HeartbeatRequest();
}

template<> inline const slimevr_protocol::rpc::ResetRequest *InboundPacket::packet_as<slimevr_protocol::rpc::ResetRequest>() const {
  return packet_as_slimevr_protocol_rpc_ResetRequest();
}

template<> inline const slimevr_protocol::rpc::AssignTrackerRequest *InboundPacket::packet_as<slimevr_protocol::rpc::AssignTrackerRequest>() const {
  return packet_as_slimevr_protocol_rpc_AssignTrackerRequest();
}

template<> inline const slimevr_protocol::rpc::SettingsRequest *InboundPacket::packet_as<slimevr_protocol::rpc::SettingsRequest>() const {
  return packet_as_slimevr_protocol_rpc_SettingsRequest();
}

template<> inline const slimevr_protocol::rpc::ChangeSettingsRequest *InboundPacket::packet_as<slimevr_protocol::rpc::ChangeSettingsRequest>() const {
  return packet_as_slimevr_protocol_rpc_ChangeSettingsRequest();
}

template<> inline const slimevr_protocol::data_feed::PollDeviceStatus *InboundPacket::packet_as<slimevr_protocol::data_feed::PollDeviceStatus>() const {
  return packet_as_slimevr_protocol_data_feed_PollDeviceStatus();
}

template<> inline const slimevr_protocol::data_feed::DataFeedRequest *InboundPacket::packet_as<slimevr_protocol::data_feed::DataFeedRequest>() const {
  return packet_as_slimevr_protocol_data_feed_DataFeedRequest();
}

template<> inline const slimevr_protocol::data_feed::DataFeedNotify *InboundPacket::packet_as<slimevr_protocol::data_feed::DataFeedNotify>() const {
  return packet_as_slimevr_protocol_data_feed_DataFeedNotify();
}

template<> inline const slimevr_protocol::data_feed::DeviceStatus *InboundPacket::packet_as<slimevr_protocol::data_feed::DeviceStatus>() const {
  return packet_as_slimevr_protocol_data_feed_DeviceStatus();
}

template<> inline const slimevr_protocol::data_feed::DataFeed *InboundPacket::packet_as<slimevr_protocol::data_feed::DataFeed>() const {
  return packet_as_slimevr_protocol_data_feed_DataFeed();
}

struct InboundPacketBuilder {
  typedef InboundPacket Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_acknowledge_me(bool acknowledge_me) {
    fbb_.AddElement<uint8_t>(InboundPacket::VT_ACKNOWLEDGE_ME, static_cast<uint8_t>(acknowledge_me), 0);
  }
  void add_packet_type(InboundUnion packet_type) {
    fbb_.AddElement<uint8_t>(InboundPacket::VT_PACKET_TYPE, static_cast<uint8_t>(packet_type), 0);
  }
  void add_packet(flatbuffers::Offset<void> packet) {
    fbb_.AddOffset(InboundPacket::VT_PACKET, packet);
  }
  explicit InboundPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<InboundPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InboundPacket>(end);
    return o;
  }
};

inline flatbuffers::Offset<InboundPacket> CreateInboundPacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool acknowledge_me = false,
    InboundUnion packet_type = InboundUnion::NONE,
    flatbuffers::Offset<void> packet = 0) {
  InboundPacketBuilder builder_(_fbb);
  builder_.add_packet(packet);
  builder_.add_packet_type(packet_type);
  builder_.add_acknowledge_me(acknowledge_me);
  return builder_.Finish();
}

struct OutboundPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OutboundPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACKNOWLEDGE_ME = 4,
    VT_PACKET_TYPE = 6,
    VT_PACKET = 8
  };
  bool acknowledge_me() const {
    return GetField<uint8_t>(VT_ACKNOWLEDGE_ME, 0) != 0;
  }
  OutboundUnion packet_type() const {
    return static_cast<OutboundUnion>(GetField<uint8_t>(VT_PACKET_TYPE, 0));
  }
  const void *packet() const {
    return GetPointer<const void *>(VT_PACKET);
  }
  template<typename T> const T *packet_as() const;
  const slimevr_protocol::rpc::HeartbeatRequest *packet_as_slimevr_protocol_rpc_HeartbeatRequest() const {
    return packet_type() == OutboundUnion::slimevr_protocol_rpc_HeartbeatRequest ? static_cast<const slimevr_protocol::rpc::HeartbeatRequest *>(packet()) : nullptr;
  }
  const slimevr_protocol::rpc::SettingsResponse *packet_as_slimevr_protocol_rpc_SettingsResponse() const {
    return packet_type() == OutboundUnion::slimevr_protocol_rpc_SettingsResponse ? static_cast<const slimevr_protocol::rpc::SettingsResponse *>(packet()) : nullptr;
  }
  const slimevr_protocol::data_feed::PollDeviceStatus *packet_as_slimevr_protocol_data_feed_PollDeviceStatus() const {
    return packet_type() == OutboundUnion::slimevr_protocol_data_feed_PollDeviceStatus ? static_cast<const slimevr_protocol::data_feed::PollDeviceStatus *>(packet()) : nullptr;
  }
  const slimevr_protocol::data_feed::DataFeedRequest *packet_as_slimevr_protocol_data_feed_DataFeedRequest() const {
    return packet_type() == OutboundUnion::slimevr_protocol_data_feed_DataFeedRequest ? static_cast<const slimevr_protocol::data_feed::DataFeedRequest *>(packet()) : nullptr;
  }
  const slimevr_protocol::data_feed::DataFeedNotify *packet_as_slimevr_protocol_data_feed_DataFeedNotify() const {
    return packet_type() == OutboundUnion::slimevr_protocol_data_feed_DataFeedNotify ? static_cast<const slimevr_protocol::data_feed::DataFeedNotify *>(packet()) : nullptr;
  }
  const slimevr_protocol::data_feed::DeviceStatus *packet_as_slimevr_protocol_data_feed_DeviceStatus() const {
    return packet_type() == OutboundUnion::slimevr_protocol_data_feed_DeviceStatus ? static_cast<const slimevr_protocol::data_feed::DeviceStatus *>(packet()) : nullptr;
  }
  const slimevr_protocol::data_feed::DataFeed *packet_as_slimevr_protocol_data_feed_DataFeed() const {
    return packet_type() == OutboundUnion::slimevr_protocol_data_feed_DataFeed ? static_cast<const slimevr_protocol::data_feed::DataFeed *>(packet()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ACKNOWLEDGE_ME, 1) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_TYPE, 1) &&
           VerifyOffset(verifier, VT_PACKET) &&
           VerifyOutboundUnion(verifier, packet(), packet_type()) &&
           verifier.EndTable();
  }
};

template<> inline const slimevr_protocol::rpc::HeartbeatRequest *OutboundPacket::packet_as<slimevr_protocol::rpc::HeartbeatRequest>() const {
  return packet_as_slimevr_protocol_rpc_HeartbeatRequest();
}

template<> inline const slimevr_protocol::rpc::SettingsResponse *OutboundPacket::packet_as<slimevr_protocol::rpc::SettingsResponse>() const {
  return packet_as_slimevr_protocol_rpc_SettingsResponse();
}

template<> inline const slimevr_protocol::data_feed::PollDeviceStatus *OutboundPacket::packet_as<slimevr_protocol::data_feed::PollDeviceStatus>() const {
  return packet_as_slimevr_protocol_data_feed_PollDeviceStatus();
}

template<> inline const slimevr_protocol::data_feed::DataFeedRequest *OutboundPacket::packet_as<slimevr_protocol::data_feed::DataFeedRequest>() const {
  return packet_as_slimevr_protocol_data_feed_DataFeedRequest();
}

template<> inline const slimevr_protocol::data_feed::DataFeedNotify *OutboundPacket::packet_as<slimevr_protocol::data_feed::DataFeedNotify>() const {
  return packet_as_slimevr_protocol_data_feed_DataFeedNotify();
}

template<> inline const slimevr_protocol::data_feed::DeviceStatus *OutboundPacket::packet_as<slimevr_protocol::data_feed::DeviceStatus>() const {
  return packet_as_slimevr_protocol_data_feed_DeviceStatus();
}

template<> inline const slimevr_protocol::data_feed::DataFeed *OutboundPacket::packet_as<slimevr_protocol::data_feed::DataFeed>() const {
  return packet_as_slimevr_protocol_data_feed_DataFeed();
}

struct OutboundPacketBuilder {
  typedef OutboundPacket Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_acknowledge_me(bool acknowledge_me) {
    fbb_.AddElement<uint8_t>(OutboundPacket::VT_ACKNOWLEDGE_ME, static_cast<uint8_t>(acknowledge_me), 0);
  }
  void add_packet_type(OutboundUnion packet_type) {
    fbb_.AddElement<uint8_t>(OutboundPacket::VT_PACKET_TYPE, static_cast<uint8_t>(packet_type), 0);
  }
  void add_packet(flatbuffers::Offset<void> packet) {
    fbb_.AddOffset(OutboundPacket::VT_PACKET, packet);
  }
  explicit OutboundPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OutboundPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OutboundPacket>(end);
    return o;
  }
};

inline flatbuffers::Offset<OutboundPacket> CreateOutboundPacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool acknowledge_me = false,
    OutboundUnion packet_type = OutboundUnion::NONE,
    flatbuffers::Offset<void> packet = 0) {
  OutboundPacketBuilder builder_(_fbb);
  builder_.add_packet(packet);
  builder_.add_packet_type(packet_type);
  builder_.add_acknowledge_me(acknowledge_me);
  return builder_.Finish();
}

inline bool VerifyInboundUnion(flatbuffers::Verifier &verifier, const void *obj, InboundUnion type) {
  switch (type) {
    case InboundUnion::NONE: {
      return true;
    }
    case InboundUnion::slimevr_protocol_rpc_HeartbeatRequest: {
      auto ptr = reinterpret_cast<const slimevr_protocol::rpc::HeartbeatRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InboundUnion::slimevr_protocol_rpc_ResetRequest: {
      auto ptr = reinterpret_cast<const slimevr_protocol::rpc::ResetRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InboundUnion::slimevr_protocol_rpc_AssignTrackerRequest: {
      auto ptr = reinterpret_cast<const slimevr_protocol::rpc::AssignTrackerRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InboundUnion::slimevr_protocol_rpc_SettingsRequest: {
      auto ptr = reinterpret_cast<const slimevr_protocol::rpc::SettingsRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InboundUnion::slimevr_protocol_rpc_ChangeSettingsRequest: {
      auto ptr = reinterpret_cast<const slimevr_protocol::rpc::ChangeSettingsRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InboundUnion::slimevr_protocol_data_feed_PollDeviceStatus: {
      auto ptr = reinterpret_cast<const slimevr_protocol::data_feed::PollDeviceStatus *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InboundUnion::slimevr_protocol_data_feed_DataFeedRequest: {
      auto ptr = reinterpret_cast<const slimevr_protocol::data_feed::DataFeedRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InboundUnion::slimevr_protocol_data_feed_DataFeedNotify: {
      auto ptr = reinterpret_cast<const slimevr_protocol::data_feed::DataFeedNotify *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InboundUnion::slimevr_protocol_data_feed_DeviceStatus: {
      auto ptr = reinterpret_cast<const slimevr_protocol::data_feed::DeviceStatus *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InboundUnion::slimevr_protocol_data_feed_DataFeed: {
      auto ptr = reinterpret_cast<const slimevr_protocol::data_feed::DataFeed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyInboundUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<InboundUnion> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyInboundUnion(
        verifier,  values->Get(i), types->GetEnum<InboundUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyOutboundUnion(flatbuffers::Verifier &verifier, const void *obj, OutboundUnion type) {
  switch (type) {
    case OutboundUnion::NONE: {
      return true;
    }
    case OutboundUnion::slimevr_protocol_rpc_HeartbeatRequest: {
      auto ptr = reinterpret_cast<const slimevr_protocol::rpc::HeartbeatRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OutboundUnion::slimevr_protocol_rpc_SettingsResponse: {
      auto ptr = reinterpret_cast<const slimevr_protocol::rpc::SettingsResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OutboundUnion::slimevr_protocol_data_feed_PollDeviceStatus: {
      auto ptr = reinterpret_cast<const slimevr_protocol::data_feed::PollDeviceStatus *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OutboundUnion::slimevr_protocol_data_feed_DataFeedRequest: {
      auto ptr = reinterpret_cast<const slimevr_protocol::data_feed::DataFeedRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OutboundUnion::slimevr_protocol_data_feed_DataFeedNotify: {
      auto ptr = reinterpret_cast<const slimevr_protocol::data_feed::DataFeedNotify *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OutboundUnion::slimevr_protocol_data_feed_DeviceStatus: {
      auto ptr = reinterpret_cast<const slimevr_protocol::data_feed::DeviceStatus *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OutboundUnion::slimevr_protocol_data_feed_DataFeed: {
      auto ptr = reinterpret_cast<const slimevr_protocol::data_feed::DataFeed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyOutboundUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<OutboundUnion> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyOutboundUnion(
        verifier,  values->Get(i), types->GetEnum<OutboundUnion>(i))) {
      return false;
    }
  }
  return true;
}

#endif  // FLATBUFFERS_GENERATED_ALL_H_
