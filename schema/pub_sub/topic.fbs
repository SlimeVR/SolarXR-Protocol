namespace solarxr_protocol.pub_sub;

/// A `TopicId` identifies an application-specific category of data. Because it
/// is application-specific, it is up to the application within the specified
/// organization to define its semantics/meaning.
///
/// For example, "bob" may have an "overlay" app with a "settings" topic for controlling
/// the overlay visibility and other settings, as well as a "video feed" topic for
/// allowing other applications to display video data in a wrist mounted window in VR.
table TopicId {
    /// The organization/developer that defines the meaning of this feature. Avoids name
    /// clashes. Should be something unique - same idea as java package identifier.
    organization: string;
    /// The name of the application/device. Should be unique within the organization.
    app_name: string;
    /// The name of the topic. Should be unique within the application.
    topic: string;
}

/// A handle for the topic, allows referencing a topic without sending a huge
/// `TopicId`.
table TopicHandle {
    id: uint16;
}

union Topic {
    TopicHandle,
    TopicId,
}

/// Response for `TopicHandleRequest` or `SubscriptionRequest`.
table TopicMapping {
    id: TopicId;
    handle: TopicHandle;
}

/// Request to get the `FeatureHandle` from a `FeatureId`. This is useful for reducing
/// bandwidth, since `FeatureId` can be large.
table TopicHandleRequest {
    id: TopicId;
}

/// Requests a subscription to `topic`. Replies with a `TopicMapping`.
table SubscriptionRequest {
    topic: Topic;
}
