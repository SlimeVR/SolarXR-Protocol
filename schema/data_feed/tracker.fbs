include "datatypes/math.fbs";
include "datatypes/datatypes.fbs";

namespace solarxr_protocol.data_feed.tracker;

/// Describes all possible information about a tracker. A tracker is anything that
/// provides kinematic data about a particular body part.
///
/// Trackers may be synthetic/computed or instead part of an actual hardware device.
/// There can be multiple trackers per hardware device.
table TrackerData {
    tracker_id: solarxr_protocol.datatypes.TrackerId;

    info: TrackerInfo;

    status: solarxr_protocol.datatypes.TrackerStatus;

    // Everything here is optional and controlled by `TrackerDataMask`

    /// Sensor rotation after fusion
    rotation: solarxr_protocol.datatypes.math.Quat;
    /// Position, in meters
    // TODO: With respect to what space?
    position: solarxr_protocol.datatypes.math.Vec3f;
    /// Raw angular velocity, in euler angles, rad/s
    raw_angular_velocity: solarxr_protocol.datatypes.math.Vec3f;
    /// Raw acceleration, in m/s^2
    raw_acceleration: solarxr_protocol.datatypes.math.Vec3f;
    /// Temperature, in degrees celsius
    temp: solarxr_protocol.datatypes.Temperature;
    /// Acceleration without gravity, in m/s^2
    linear_acceleration: solarxr_protocol.datatypes.math.Vec3f;

    /// Reference-adjusted rotation for IMU-only trackers (VR HMD yaw is used as a reset reference).
    /// In other words, a rotation that is aligned to a reliable source of rotation ((0, VR HMD YAW, 0)),
    /// triggered after user input (using reset buttons).
    /// This is a SlimeVR-specific field and computed exclusively by SlimeVR server.
    /// Includes: mounting orientation, full, quick and mounting reset adjustments.
    /// This rotation can be used to reconstruct a skeleton pose using forward kinematics.
    rotation_reference_adjusted: solarxr_protocol.datatypes.math.Quat;
    /// Zero-reference-adjusted rotation for IMU-only trackers (identity quaternion is used as a reset reference).
    /// In other words, a rotation that is aligned to a zero vector ((0, 0, 0)) by
    /// inverting the current rotation, triggered after user input (using reset buttons).
    /// This is a SlimeVR-specific field and computed exclusively by SlimeVR server.
    /// Includes: only full and quick reset adjustments.
    /// This rotation can be used in visualizations for IMU debugging.
    rotation_identity_adjusted: solarxr_protocol.datatypes.math.Quat;

    /// Data ticks per second, processed by SlimeVR server
    tps: uint16 = null;
}

/// A mask of the different components in `TrackerComponent`
table TrackerDataMask {
    info: bool;
    status: bool;
    rotation: bool;
    position: bool;
    raw_angular_velocity: bool;
    raw_acceleration: bool;
    temp: bool;
    linear_acceleration: bool;
    rotation_reference_adjusted: bool;
    rotation_identity_adjusted: bool;
    tps: bool;
}

/// Static description of a tracker
table TrackerInfo {
    imu_type: solarxr_protocol.datatypes.hardware_info.ImuType;
    /// The user-assigned role of the tracker.
    body_part: solarxr_protocol.datatypes.BodyPart;
    /// average samples per second
    poll_rate: solarxr_protocol.datatypes.HzF32;
    /// The orientation of the tracker when mounted on the body
    mounting_orientation: solarxr_protocol.datatypes.math.Quat;

    /// Should the tracker's settings be editable by the user
    editable: bool;

    /// Indicates if the tracker is computed (solved position and rotation)
    is_computed: bool;

    /// Indicates if the tracker is using an IMU for its tracking data
    is_imu: bool;

    /// A human-friendly name to display as the name of the tracker.
    display_name: string;

    /// name to display as the name of the tracker set by the user
    custom_name: string;

    /// Whether to allow yaw drift compensation for this tracker or not.
    allow_drift_compensation: bool;

    /// Mounting Reset orientation overrides the current `mounting_orientation` of
    /// the tracker, this orientation is not saved and needs to be calculated
    /// each time the server is ran
    mounting_reset_orientation: solarxr_protocol.datatypes.math.Quat;

    /// Indicates if the tracker is actually an HMD
    is_hmd: bool;

    magnetometer: solarxr_protocol.datatypes.MagnetometerStatus;
}
