namespace solarxr_protocol.datatypes;

// /// Trivially wraps a string, for use in a union
// struct StringW {
//     s: string
// }


/// Frequency as 32 bit float
struct HzF32 {
    f: float32;
}


struct TransactionId {
    /// This is expected to overflow, networking logic should handle this case.
    id: uint32;
}


/// A unique ID for the device. IDs are not guaranteed to be the same after
/// the connection is terminated.
struct DeviceId {
    id: uint8;
}


// TODO: Should this be a struct?
// TODO: Should we disassociate trackers from their devices and just have `tracker_num`?
table TrackerId {
    /// The device the tracker is associated with. If there is no hardware device it is
    /// associated with, this should be `null`.
    device_id: solarxr_protocol.datatypes.DeviceId;
    /// There are possibly multiple trackers per device. This identifies which one.
    tracker_num: uint8;
}


/// General purpose logging datatype
table LogData {
    message: string;
    data: [uint8];
}


/// A list of error codes for error conditions on the device
enum FirmwareErrorCode: uint8 {
    Other = 0,
    Disconnected,
    Occluded,
    ImuError,
}


/// Used for filtering tracker rotations in software
enum FilteringType: uint8 {
	NONE = 0,
	SMOOTHING = 1,
	PREDICTION = 2
}


/// Possible tracker roles
/// They're not perfect match for SteamVR tracker roles,
/// because we support more possible roles. Host can
/// chose how to map it to their supported role.
enum TrackerRole: uint8 {
    NONE = 0,
    WAIST = 1,
    LEFT_FOOT = 2,
    RIGHT_FOOT = 3,
    CHEST = 4,
    LEFT_KNEE = 5,
    RIGHT_KNEE = 6,
    LEFT_ELBOW = 7,
    RIGHT_ELBOW = 8,
    LEFT_SHOULDER = 9,
    RIGHT_SHOULDER = 10,
    LEFT_HAND = 11,
    RIGHT_HAND = 12,
    LEFT_CONTROLLER = 13,
    RIGHT_CONTROLLER = 14,
    HEAD = 15,
    NECK = 16,
    CAMERA = 17,
    KEYBOARD = 18,
    HMD = 19,
    BEACON = 20,
    GENERIC_CONTROLLER = 21,
}


/// Different parts of the body. Roughly maps to each possible bone in the skeleton.
/// These are *NOT* the trackers.
enum BodyPart: uint8 {
    NONE = 0,
    HEAD = 1,
    NECK = 2,
    CHEST = 3,
    WAIST = 4,
    HIP = 5,
    LEFT_UPPER_LEG = 6,
    RIGHT_UPPER_LEG = 7,
    LEFT_LOWER_LEG = 8,
    RIGHT_LOWER_LEG = 9,
    LEFT_FOOT = 10,
    RIGHT_FOOT = 11,
    LEFT_CONTROLLER = 12,
    RIGHT_CONTROLLER = 13,
    LEFT_LOWER_ARM = 14,
    RIGHT_LOWER_ARM = 15,
    LEFT_UPPER_ARM = 16,
    RIGHT_UPPER_ARM = 17,
    LEFT_HAND = 18,
    RIGHT_HAND = 19,
    LEFT_SHOULDER = 20,
    RIGHT_SHOULDER = 21,
}

enum TrackerStatus: uint8 {
    NONE = 0,
    DISCONNECTED = 1,
    OK = 2,
    BUSY = 3,
    ERROR = 4,
    OCCLUDED = 5,
}

/// Temperature in degrees celsius
struct Temperature {
    temp: float32;
}

/// The 4 bytes of an ip address are stored in 32 bits in big endian order.
/// We will switch over to fixed size arrays when they are supported better.
struct Ipv4Address  {
    addr: uint32;
}

table Bytes {
    b: [uint8];
}

table StringTable {
    s: string;
}
