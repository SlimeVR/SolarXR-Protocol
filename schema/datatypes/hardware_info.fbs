include "datatypes.fbs";

namespace solarxr_protocol.datatypes.hardware_info;

/// Currently firmware only reports ESP8266 or if the device uses ESP-IDF
enum McuType: uint16 {
    Other = 0,
    ESP8266,
    ESP32,
}

enum ImuType: uint16 {
    Other = 0,
    MPU9250,
	MPU6500,
	BNO080,
	BNO085,
	BNO055,
	MPU6050,
	BNO086,
	BMI160,
	ICM20948,
}


/// A MAC address or a bluetooth address, or some other uniquely identifying address
/// associated with the endpoint that we are communicating with. If it doesn't take
/// up the full set of bytes, it is aligned towards the least significant bits.
struct HardwareAddress {
    // Fixed size arrays not supported, so we use a uint64 (8 bytes), but the mac addr
    // is actually 6 bytes.
    addr: uint64;
}

/// Mostly static info about the device's hardware/firmware.
table HardwareInfo {
    mcu_id: McuType;

    /// A human-friendly name to display as the name of the device.
    display_name: string;
    /// A human-friendly string for the device model.
    model: string;
    /// A human-friendly string for the manufacturer of the device.
    manufacturer: string;
    /// The hardware version of the device. For example, pcb version.
    hardware_revision: string;

    /// The version of the slimevr firmware that the device is running.
    firmware_version: string;
    hardware_address: HardwareAddress;

    ip_address: solarxr_protocol.datatypes.Ipv4Address;

    board_type: string;

    /// A unique identifier for the device. Depending on the type of device it can be the MAC address,
    /// the IP address, or some other unique identifier like what USB device it is.
    hardware_identifier: string;
}


/// Mostly-dynamic status info about a tracked device's firmware
table HardwareStatus {
    error_status: solarxr_protocol.datatypes.FirmwareErrorCode = null;
    tps: uint8 = null (deprecated);
    ping: uint16 = null;
    /// â€œReceived Signal Strength Indicator" between device and wifi adapter in dBm
    rssi: int16 = null;
    /// Temperature in degrees celsius
    mcu_temp: float32 = null;
    battery_voltage: float32 = null;
    battery_pct_estimate: uint8 = null;
    log_data: solarxr_protocol.datatypes.LogData;
}

/// A mask of the data in `FirmwareStatus`
table FirmwareStatusMask {
    error_status: bool;
    tps: bool;
    ping: bool;
    rssi: bool;
    mcu_temp: bool;
    battery_voltage: bool;
    battery_pct_estimate: bool;
}
